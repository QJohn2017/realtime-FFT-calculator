!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR            = ar cqs$/;"	m
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiCenter};$/;"	g	class:QCPItemBracket
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	g	class:QCPItemPixmap
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	g	class:QCPItemRect
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	g	class:QCPItemText
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	g	class:QCPItemEllipse
AntialiasedElement	qcustomplot.h	/^enum AntialiasedElement { aeAxes           = 0x0001 \/\/\/< <tt>0x0001<\/tt> Axis base line and tick marks$/;"	g	namespace:QCP
AxisType	qcustomplot.h	/^  enum AxisType { atLeft    = 0x01  \/\/\/< <tt>0x01<\/tt> Axis is vertical and on the left side of the axis rect$/;"	g	class:QCPAxis
BracketStyle	qcustomplot.h	/^  enum BracketStyle { bsSquare  \/\/\/< A brace with angled edges$/;"	g	class:QCPItemBracket
BracketStyle	qcustomplot.h	/^  enum BracketStyle { bsSquareBracket \/\/\/< A square bracket is drawn.$/;"	g	class:QCPSelectionDecoratorBracket
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT -fPIC $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = cp -f -R$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = cp -f$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -O2 -std=gnu++11 -Wall -W -D_REENTRANT -fPIC $(DEFINES)$/;"	m
CachedLabel	qcustomplot.h	/^  struct CachedLabel$/;"	s	class:QCPAxisPainterPrivate
ChartStyle	qcustomplot.h	/^  enum ChartStyle { csOhlc         \/\/\/< Open-High-Low-Close bar representation$/;"	g	class:QCPFinancial
ColorInterpolation	qcustomplot.h	/^  enum ColorInterpolation { ciRGB  \/\/\/< Color channels red, green and blue are linearly interpolated$/;"	g	class:QCPColorGradient
DEFINES	Makefile	/^DEFINES       = -DQT_DEPRECATED_WARNINGS -DQT_NO_DEBUG -DQT_PRINTSUPPORT_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = \/usr\/lib\/x86_64-linux-gnu\/qt5\/mkspecs\/features\/spec_pre.prf \\$/;"	m
DISTDIR	Makefile	/^DISTDIR = \/home\/zom\/Projects\/qt\/realtimeplotting\/.tmp\/realtimeplotting1.0.0$/;"	m
DISTNAME	Makefile	/^DISTNAME      = realtimeplotting1.0.0$/;"	m
DateStrategy	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	g	class:QCPAxisTickerDateTime
EndingStyle	qcustomplot.h	/^  enum EndingStyle { esNone          \/\/\/< No ending decoration$/;"	g	class:QCPLineEnding
ErrorType	qcustomplot.h	/^  enum ErrorType { etKeyError    \/\/\/< The errors are for the key dimension (bars appear parallel to the key axis)$/;"	g	class:QCPErrorBars
ExportPen	qcustomplot.h	/^enum ExportPen { epNoCosmetic     \/\/\/< Cosmetic pens are converted to pens with pixel width 1 when exporting$/;"	g	namespace:QCP
FillOrder	qcustomplot.h	/^  enum FillOrder { foRowsFirst    \/\/\/< Rows are filled first, and a new element is wrapped to the next column if the row count would exceed \\ref setWrap.$/;"	g	class:QCPLayoutGrid
FractionStyle	qcustomplot.h	/^  enum FractionStyle { fsFloatingPoint     \/\/\/< Fractions are displayed as regular decimal floating point numbers, e.g. "0.25" or "0.125".$/;"	g	class:QCPAxisTickerPi
GradientPreset	qcustomplot.h	/^  enum GradientPreset { gpGrayscale  \/\/\/< Continuous lightness from black to white (suited for non-biased data representation)$/;"	g	class:QCPColorGradient
INCPATH	Makefile	/^INCPATH       = -I. -I..\/..\/..\/gsl\/include -I..\/..\/..\/gsl\/include -isystem \/usr\/include\/x86_64-linux-gnu\/qt5 -isystem \/usr\/include\/x86_64-linux-gnu\/qt5\/QtPrintSupport -isystem \/usr\/include\/x86_64-linux-gnu\/qt5\/QtWidgets -isystem \/usr\/include\/x86_64-linux-gnu\/qt5\/QtGui -isystem \/usr\/include\/x86_64-linux-gnu\/qt5\/QtCore -I. -isystem \/usr\/include\/libdrm -I. -I\/usr\/lib\/x86_64-linux-gnu\/qt5\/mkspecs\/linux-g++$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = cp -f -R$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
InsetPlacement	qcustomplot.h	/^  enum InsetPlacement { ipFree            \/\/\/< The element may be positioned\/sized arbitrarily, see \\ref setInsetRect$/;"	g	class:QCPLayoutInset
Interaction	qcustomplot.h	/^enum Interaction { iRangeDrag         = 0x001 \/\/\/< <tt>0x001<\/tt> Axis ranges are draggable (see \\ref QCPAxisRect::setRangeDrag, \\ref QCPAxisRect::setRangeDragAxes)$/;"	g	namespace:QCP
LFLAGS	Makefile	/^LFLAGS        = -Wl,-O1$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS) -L\/home\/zom\/Projects\/qt\/realtimeplotting\/..\/..\/..\/gsl\/lib\/ -lgsl -lgslcblas -lQt5PrintSupport -lQt5Widgets -lQt5Gui -lQt5Core -lGL -lpthread $/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
LabelSide	qcustomplot.h	/^  enum LabelSide { lsInside    \/\/\/< Tick labels will be displayed inside the axis rect and clipped to the inner axis rect$/;"	g	class:QCPAxis
LayerInsertMode	qcustomplot.h	/^  enum LayerInsertMode { limBelow  \/\/\/< Layer is inserted below other layer$/;"	g	class:QCustomPlot
LayerMode	qcustomplot.h	/^  enum LayerMode { lmLogical   \/\/\/< Layer is used only for rendering order, and shares paint buffer with all other adjacent logical layers.$/;"	g	class:QCPLayer
LineStyle	qcustomplot.h	/^  enum LineStyle { lsNone        \/\/\/< data points are not connected with any lines (e.g. data only represented$/;"	g	class:QCPGraph
LineStyle	qcustomplot.h	/^  enum LineStyle { lsNone  \/\/\/< No line is drawn between data points (e.g. only scatters)$/;"	g	class:QCPCurve
MAINWINDOW_H	mainwindow.h	2;"	d
MAKEFILE	Makefile	/^MAKEFILE      = Makefile$/;"	m
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow
MainWindow	mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
MarginSide	qcustomplot.h	/^enum MarginSide { msLeft     = 0x01 \/\/\/< <tt>0x01<\/tt> left margin$/;"	g	namespace:QCP
OBJECTS	Makefile	/^OBJECTS       = main.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
PainterMode	qcustomplot.h	/^  enum PainterMode { pmDefault       = 0x00   \/\/\/< <tt>0x00<\/tt> Default mode for painting on screen devices$/;"	g	class:QCPPainter
PlottingHint	qcustomplot.h	/^enum PlottingHint { phNone              = 0x000 \/\/\/< <tt>0x000<\/tt> No hints are set$/;"	g	namespace:QCP
PositionType	qcustomplot.h	/^  enum PositionType { ptAbsolute        \/\/\/< Static positioning in pixels, starting from the top left corner of the viewport\/widget.$/;"	g	class:QCPItemPosition
QCP	qcustomplot.h	/^namespace QCP {$/;"	n
QCPAbstractItem	qcustomplot.cpp	/^QCPAbstractItem::QCPAbstractItem(QCustomPlot *parentPlot) :$/;"	f	class:QCPAbstractItem
QCPAbstractItem	qcustomplot.h	/^class QCP_LIB_DECL QCPAbstractItem : public QCPLayerable$/;"	c
QCPAbstractLegendItem	qcustomplot.cpp	/^QCPAbstractLegendItem::QCPAbstractLegendItem(QCPLegend *parent) :$/;"	f	class:QCPAbstractLegendItem
QCPAbstractLegendItem	qcustomplot.h	/^class QCP_LIB_DECL QCPAbstractLegendItem : public QCPLayoutElement$/;"	c
QCPAbstractPaintBuffer	qcustomplot.cpp	/^QCPAbstractPaintBuffer::QCPAbstractPaintBuffer(const QSize &size, double devicePixelRatio) :$/;"	f	class:QCPAbstractPaintBuffer
QCPAbstractPaintBuffer	qcustomplot.h	/^class QCP_LIB_DECL QCPAbstractPaintBuffer$/;"	c
QCPAbstractPlottable	qcustomplot.cpp	/^QCPAbstractPlottable::QCPAbstractPlottable(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPAbstractPlottable
QCPAbstractPlottable	qcustomplot.h	/^class QCP_LIB_DECL QCPAbstractPlottable : public QCPLayerable$/;"	c
QCPAbstractPlottable1D	qcustomplot.h	/^QCPAbstractPlottable1D<DataType>::QCPAbstractPlottable1D(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPAbstractPlottable1D
QCPAbstractPlottable1D	qcustomplot.h	/^class QCPAbstractPlottable1D : public QCPAbstractPlottable, public QCPPlottableInterface1D \/\/ no QCP_LIB_DECL, template class ends up in header (cpp included below)$/;"	c
QCPAxis	qcustomplot.cpp	/^QCPAxis::QCPAxis(QCPAxisRect *parent, AxisType type) :$/;"	f	class:QCPAxis
QCPAxis	qcustomplot.h	/^class QCP_LIB_DECL QCPAxis : public QCPLayerable$/;"	c
QCPAxisPainterPrivate	qcustomplot.cpp	/^QCPAxisPainterPrivate::QCPAxisPainterPrivate(QCustomPlot *parentPlot) :$/;"	f	class:QCPAxisPainterPrivate
QCPAxisPainterPrivate	qcustomplot.h	/^class QCPAxisPainterPrivate$/;"	c
QCPAxisRect	qcustomplot.cpp	/^QCPAxisRect::QCPAxisRect(QCustomPlot *parentPlot, bool setupDefaultAxes) :$/;"	f	class:QCPAxisRect
QCPAxisRect	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisRect : public QCPLayoutElement$/;"	c
QCPAxisTicker	qcustomplot.cpp	/^QCPAxisTicker::QCPAxisTicker() :$/;"	f	class:QCPAxisTicker
QCPAxisTicker	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTicker$/;"	c
QCPAxisTickerDateTime	qcustomplot.cpp	/^QCPAxisTickerDateTime::QCPAxisTickerDateTime() :$/;"	f	class:QCPAxisTickerDateTime
QCPAxisTickerDateTime	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerDateTime : public QCPAxisTicker$/;"	c
QCPAxisTickerFixed	qcustomplot.cpp	/^QCPAxisTickerFixed::QCPAxisTickerFixed() :$/;"	f	class:QCPAxisTickerFixed
QCPAxisTickerFixed	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerFixed : public QCPAxisTicker$/;"	c
QCPAxisTickerLog	qcustomplot.cpp	/^QCPAxisTickerLog::QCPAxisTickerLog() :$/;"	f	class:QCPAxisTickerLog
QCPAxisTickerLog	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerLog : public QCPAxisTicker$/;"	c
QCPAxisTickerPi	qcustomplot.cpp	/^QCPAxisTickerPi::QCPAxisTickerPi() :$/;"	f	class:QCPAxisTickerPi
QCPAxisTickerPi	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerPi : public QCPAxisTicker$/;"	c
QCPAxisTickerText	qcustomplot.cpp	/^QCPAxisTickerText::QCPAxisTickerText() :$/;"	f	class:QCPAxisTickerText
QCPAxisTickerText	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerText : public QCPAxisTicker$/;"	c
QCPAxisTickerTime	qcustomplot.cpp	/^QCPAxisTickerTime::QCPAxisTickerTime() :$/;"	f	class:QCPAxisTickerTime
QCPAxisTickerTime	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerTime : public QCPAxisTicker$/;"	c
QCPBars	qcustomplot.cpp	/^QCPBars::QCPBars(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPBars
QCPBars	qcustomplot.h	/^class QCP_LIB_DECL QCPBars : public QCPAbstractPlottable1D<QCPBarsData>$/;"	c
QCPBarsData	qcustomplot.cpp	/^QCPBarsData::QCPBarsData() :$/;"	f	class:QCPBarsData
QCPBarsData	qcustomplot.cpp	/^QCPBarsData::QCPBarsData(double key, double value) :$/;"	f	class:QCPBarsData
QCPBarsData	qcustomplot.h	/^class QCP_LIB_DECL QCPBarsData$/;"	c
QCPBarsDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPBarsData> QCPBarsDataContainer;$/;"	t
QCPBarsGroup	qcustomplot.cpp	/^QCPBarsGroup::QCPBarsGroup(QCustomPlot *parentPlot) :$/;"	f	class:QCPBarsGroup
QCPBarsGroup	qcustomplot.h	/^class QCP_LIB_DECL QCPBarsGroup : public QObject$/;"	c
QCPColorGradient	qcustomplot.cpp	/^QCPColorGradient::QCPColorGradient() :$/;"	f	class:QCPColorGradient
QCPColorGradient	qcustomplot.cpp	/^QCPColorGradient::QCPColorGradient(GradientPreset preset) :$/;"	f	class:QCPColorGradient
QCPColorGradient	qcustomplot.h	/^class QCP_LIB_DECL QCPColorGradient$/;"	c
QCPColorMap	qcustomplot.cpp	/^QCPColorMap::QCPColorMap(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPColorMap
QCPColorMap	qcustomplot.h	/^class QCP_LIB_DECL QCPColorMap : public QCPAbstractPlottable$/;"	c
QCPColorMapData	qcustomplot.cpp	/^QCPColorMapData::QCPColorMapData(const QCPColorMapData &other) :$/;"	f	class:QCPColorMapData
QCPColorMapData	qcustomplot.cpp	/^QCPColorMapData::QCPColorMapData(int keySize, int valueSize, const QCPRange &keyRange, const QCPRange &valueRange) :$/;"	f	class:QCPColorMapData
QCPColorMapData	qcustomplot.h	/^class QCP_LIB_DECL QCPColorMapData$/;"	c
QCPColorScale	qcustomplot.cpp	/^QCPColorScale::QCPColorScale(QCustomPlot *parentPlot) :$/;"	f	class:QCPColorScale
QCPColorScale	qcustomplot.h	/^class QCP_LIB_DECL QCPColorScale : public QCPLayoutElement$/;"	c
QCPColorScaleAxisRectPrivate	qcustomplot.cpp	/^QCPColorScaleAxisRectPrivate::QCPColorScaleAxisRectPrivate(QCPColorScale *parentColorScale) :$/;"	f	class:QCPColorScaleAxisRectPrivate
QCPColorScaleAxisRectPrivate	qcustomplot.h	/^class QCPColorScaleAxisRectPrivate : public QCPAxisRect$/;"	c
QCPCurve	qcustomplot.cpp	/^QCPCurve::QCPCurve(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPCurve
QCPCurve	qcustomplot.h	/^class QCP_LIB_DECL QCPCurve : public QCPAbstractPlottable1D<QCPCurveData>$/;"	c
QCPCurveData	qcustomplot.cpp	/^QCPCurveData::QCPCurveData() :$/;"	f	class:QCPCurveData
QCPCurveData	qcustomplot.cpp	/^QCPCurveData::QCPCurveData(double t, double key, double value) :$/;"	f	class:QCPCurveData
QCPCurveData	qcustomplot.h	/^class QCP_LIB_DECL QCPCurveData$/;"	c
QCPCurveDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPCurveData> QCPCurveDataContainer;$/;"	t
QCPDataContainer	qcustomplot.h	/^QCPDataContainer<DataType>::QCPDataContainer() :$/;"	f	class:QCPDataContainer
QCPDataContainer	qcustomplot.h	/^class QCPDataContainer \/\/ no QCP_LIB_DECL, template class ends up in header (cpp included below)$/;"	c
QCPDataRange	qcustomplot.cpp	/^QCPDataRange::QCPDataRange() :$/;"	f	class:QCPDataRange
QCPDataRange	qcustomplot.cpp	/^QCPDataRange::QCPDataRange(int begin, int end) :$/;"	f	class:QCPDataRange
QCPDataRange	qcustomplot.h	/^class QCP_LIB_DECL QCPDataRange$/;"	c
QCPDataSelection	qcustomplot.cpp	/^QCPDataSelection::QCPDataSelection()$/;"	f	class:QCPDataSelection
QCPDataSelection	qcustomplot.cpp	/^QCPDataSelection::QCPDataSelection(const QCPDataRange &range)$/;"	f	class:QCPDataSelection
QCPDataSelection	qcustomplot.h	/^class QCP_LIB_DECL QCPDataSelection$/;"	c
QCPErrorBars	qcustomplot.cpp	/^QCPErrorBars::QCPErrorBars(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPErrorBars
QCPErrorBars	qcustomplot.h	/^class QCP_LIB_DECL QCPErrorBars : public QCPAbstractPlottable, public QCPPlottableInterface1D$/;"	c
QCPErrorBarsData	qcustomplot.cpp	/^QCPErrorBarsData::QCPErrorBarsData() :$/;"	f	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.cpp	/^QCPErrorBarsData::QCPErrorBarsData(double error) :$/;"	f	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.cpp	/^QCPErrorBarsData::QCPErrorBarsData(double errorMinus, double errorPlus) :$/;"	f	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.h	/^class QCP_LIB_DECL QCPErrorBarsData$/;"	c
QCPErrorBarsDataContainer	qcustomplot.h	/^typedef QVector<QCPErrorBarsData> QCPErrorBarsDataContainer;$/;"	t
QCPFinancial	qcustomplot.cpp	/^QCPFinancial::QCPFinancial(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPFinancial
QCPFinancial	qcustomplot.h	/^class QCP_LIB_DECL QCPFinancial : public QCPAbstractPlottable1D<QCPFinancialData>$/;"	c
QCPFinancialData	qcustomplot.cpp	/^QCPFinancialData::QCPFinancialData() :$/;"	f	class:QCPFinancialData
QCPFinancialData	qcustomplot.cpp	/^QCPFinancialData::QCPFinancialData(double key, double open, double high, double low, double close) :$/;"	f	class:QCPFinancialData
QCPFinancialData	qcustomplot.h	/^class QCP_LIB_DECL QCPFinancialData$/;"	c
QCPFinancialDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPFinancialData> QCPFinancialDataContainer;$/;"	t
QCPGraph	qcustomplot.cpp	/^QCPGraph::QCPGraph(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPGraph
QCPGraph	qcustomplot.h	/^class QCP_LIB_DECL QCPGraph : public QCPAbstractPlottable1D<QCPGraphData>$/;"	c
QCPGraphData	qcustomplot.cpp	/^QCPGraphData::QCPGraphData() :$/;"	f	class:QCPGraphData
QCPGraphData	qcustomplot.cpp	/^QCPGraphData::QCPGraphData(double key, double value) :$/;"	f	class:QCPGraphData
QCPGraphData	qcustomplot.h	/^class QCP_LIB_DECL QCPGraphData$/;"	c
QCPGraphDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPGraphData> QCPGraphDataContainer;$/;"	t
QCPGrid	qcustomplot.cpp	/^QCPGrid::QCPGrid(QCPAxis *parentAxis) :$/;"	f	class:QCPGrid
QCPGrid	qcustomplot.h	/^class QCP_LIB_DECL QCPGrid :public QCPLayerable$/;"	c
QCPItemAnchor	qcustomplot.cpp	/^QCPItemAnchor::QCPItemAnchor(QCustomPlot *parentPlot, QCPAbstractItem *parentItem, const QString &name, int anchorId) :$/;"	f	class:QCPItemAnchor
QCPItemAnchor	qcustomplot.h	/^class QCP_LIB_DECL QCPItemAnchor$/;"	c
QCPItemBracket	qcustomplot.cpp	/^QCPItemBracket::QCPItemBracket(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemBracket
QCPItemBracket	qcustomplot.h	/^class QCP_LIB_DECL QCPItemBracket : public QCPAbstractItem$/;"	c
QCPItemCurve	qcustomplot.cpp	/^QCPItemCurve::QCPItemCurve(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemCurve
QCPItemCurve	qcustomplot.h	/^class QCP_LIB_DECL QCPItemCurve : public QCPAbstractItem$/;"	c
QCPItemEllipse	qcustomplot.cpp	/^QCPItemEllipse::QCPItemEllipse(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemEllipse
QCPItemEllipse	qcustomplot.h	/^class QCP_LIB_DECL QCPItemEllipse : public QCPAbstractItem$/;"	c
QCPItemLine	qcustomplot.cpp	/^QCPItemLine::QCPItemLine(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemLine
QCPItemLine	qcustomplot.h	/^class QCP_LIB_DECL QCPItemLine : public QCPAbstractItem$/;"	c
QCPItemPixmap	qcustomplot.cpp	/^QCPItemPixmap::QCPItemPixmap(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemPixmap
QCPItemPixmap	qcustomplot.h	/^class QCP_LIB_DECL QCPItemPixmap : public QCPAbstractItem$/;"	c
QCPItemPosition	qcustomplot.cpp	/^QCPItemPosition::QCPItemPosition(QCustomPlot *parentPlot, QCPAbstractItem *parentItem, const QString &name) :$/;"	f	class:QCPItemPosition
QCPItemPosition	qcustomplot.h	/^class QCP_LIB_DECL QCPItemPosition : public QCPItemAnchor$/;"	c
QCPItemRect	qcustomplot.cpp	/^QCPItemRect::QCPItemRect(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemRect
QCPItemRect	qcustomplot.h	/^class QCP_LIB_DECL QCPItemRect : public QCPAbstractItem$/;"	c
QCPItemStraightLine	qcustomplot.cpp	/^QCPItemStraightLine::QCPItemStraightLine(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemStraightLine
QCPItemStraightLine	qcustomplot.h	/^class QCP_LIB_DECL QCPItemStraightLine : public QCPAbstractItem$/;"	c
QCPItemText	qcustomplot.cpp	/^QCPItemText::QCPItemText(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemText
QCPItemText	qcustomplot.h	/^class QCP_LIB_DECL QCPItemText : public QCPAbstractItem$/;"	c
QCPItemTracer	qcustomplot.cpp	/^QCPItemTracer::QCPItemTracer(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemTracer
QCPItemTracer	qcustomplot.h	/^class QCP_LIB_DECL QCPItemTracer : public QCPAbstractItem$/;"	c
QCPLayer	qcustomplot.cpp	/^QCPLayer::QCPLayer(QCustomPlot *parentPlot, const QString &layerName) :$/;"	f	class:QCPLayer
QCPLayer	qcustomplot.h	/^class QCP_LIB_DECL QCPLayer : public QObject$/;"	c
QCPLayerable	qcustomplot.cpp	/^QCPLayerable::QCPLayerable(QCustomPlot *plot, QString targetLayer, QCPLayerable *parentLayerable) :$/;"	f	class:QCPLayerable
QCPLayerable	qcustomplot.h	/^class QCP_LIB_DECL QCPLayerable : public QObject$/;"	c
QCPLayout	qcustomplot.cpp	/^QCPLayout::QCPLayout()$/;"	f	class:QCPLayout
QCPLayout	qcustomplot.h	/^class QCP_LIB_DECL QCPLayout : public QCPLayoutElement$/;"	c
QCPLayoutElement	qcustomplot.cpp	/^QCPLayoutElement::QCPLayoutElement(QCustomPlot *parentPlot) :$/;"	f	class:QCPLayoutElement
QCPLayoutElement	qcustomplot.h	/^class QCP_LIB_DECL QCPLayoutElement : public QCPLayerable$/;"	c
QCPLayoutGrid	qcustomplot.cpp	/^QCPLayoutGrid::QCPLayoutGrid() :$/;"	f	class:QCPLayoutGrid
QCPLayoutGrid	qcustomplot.h	/^class QCP_LIB_DECL QCPLayoutGrid : public QCPLayout$/;"	c
QCPLayoutInset	qcustomplot.cpp	/^QCPLayoutInset::QCPLayoutInset()$/;"	f	class:QCPLayoutInset
QCPLayoutInset	qcustomplot.h	/^class QCP_LIB_DECL QCPLayoutInset : public QCPLayout$/;"	c
QCPLegend	qcustomplot.cpp	/^QCPLegend::QCPLegend()$/;"	f	class:QCPLegend
QCPLegend	qcustomplot.h	/^class QCP_LIB_DECL QCPLegend : public QCPLayoutGrid$/;"	c
QCPLineEnding	qcustomplot.cpp	/^QCPLineEnding::QCPLineEnding() :$/;"	f	class:QCPLineEnding
QCPLineEnding	qcustomplot.cpp	/^QCPLineEnding::QCPLineEnding(QCPLineEnding::EndingStyle style, double width, double length, bool inverted) :$/;"	f	class:QCPLineEnding
QCPLineEnding	qcustomplot.h	/^class QCP_LIB_DECL QCPLineEnding$/;"	c
QCPMarginGroup	qcustomplot.cpp	/^QCPMarginGroup::QCPMarginGroup(QCustomPlot *parentPlot) :$/;"	f	class:QCPMarginGroup
QCPMarginGroup	qcustomplot.h	/^class QCP_LIB_DECL QCPMarginGroup : public QObject$/;"	c
QCPPaintBufferGlFbo	qcustomplot.cpp	/^QCPPaintBufferGlFbo::QCPPaintBufferGlFbo(const QSize &size, double devicePixelRatio, QWeakPointer<QOpenGLContext> glContext, QWeakPointer<QOpenGLPaintDevice> glPaintDevice) :$/;"	f	class:QCPPaintBufferGlFbo
QCPPaintBufferGlFbo	qcustomplot.h	/^class QCP_LIB_DECL QCPPaintBufferGlFbo : public QCPAbstractPaintBuffer$/;"	c
QCPPaintBufferGlPbuffer	qcustomplot.cpp	/^QCPPaintBufferGlPbuffer::QCPPaintBufferGlPbuffer(const QSize &size, double devicePixelRatio, int multisamples) :$/;"	f	class:QCPPaintBufferGlPbuffer
QCPPaintBufferGlPbuffer	qcustomplot.h	/^class QCP_LIB_DECL QCPPaintBufferGlPbuffer : public QCPAbstractPaintBuffer$/;"	c
QCPPaintBufferPixmap	qcustomplot.cpp	/^QCPPaintBufferPixmap::QCPPaintBufferPixmap(const QSize &size, double devicePixelRatio) :$/;"	f	class:QCPPaintBufferPixmap
QCPPaintBufferPixmap	qcustomplot.h	/^class QCP_LIB_DECL QCPPaintBufferPixmap : public QCPAbstractPaintBuffer$/;"	c
QCPPainter	qcustomplot.cpp	/^QCPPainter::QCPPainter() :$/;"	f	class:QCPPainter
QCPPainter	qcustomplot.cpp	/^QCPPainter::QCPPainter(QPaintDevice *device) :$/;"	f	class:QCPPainter
QCPPainter	qcustomplot.h	/^class QCP_LIB_DECL QCPPainter : public QPainter$/;"	c
QCPPlottableInterface1D	qcustomplot.h	/^class QCPPlottableInterface1D$/;"	c
QCPPlottableLegendItem	qcustomplot.cpp	/^QCPPlottableLegendItem::QCPPlottableLegendItem(QCPLegend *parent, QCPAbstractPlottable *plottable) :$/;"	f	class:QCPPlottableLegendItem
QCPPlottableLegendItem	qcustomplot.h	/^class QCP_LIB_DECL QCPPlottableLegendItem : public QCPAbstractLegendItem$/;"	c
QCPRange	qcustomplot.cpp	/^QCPRange::QCPRange() :$/;"	f	class:QCPRange
QCPRange	qcustomplot.cpp	/^QCPRange::QCPRange(double lower, double upper) :$/;"	f	class:QCPRange
QCPRange	qcustomplot.h	/^class QCP_LIB_DECL QCPRange$/;"	c
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle() :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(ScatterShape shape, const QColor &color, const QColor &fill, double size) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(ScatterShape shape, const QColor &color, double size) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(ScatterShape shape, const QPen &pen, const QBrush &brush, double size) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(ScatterShape shape, double size) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(const QPainterPath &customPath, const QPen &pen, const QBrush &brush, double size) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(const QPixmap &pixmap) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.h	/^class QCP_LIB_DECL QCPScatterStyle$/;"	c
QCPSelectionDecorator	qcustomplot.cpp	/^QCPSelectionDecorator::QCPSelectionDecorator() :$/;"	f	class:QCPSelectionDecorator
QCPSelectionDecorator	qcustomplot.h	/^class QCP_LIB_DECL QCPSelectionDecorator$/;"	c
QCPSelectionDecoratorBracket	qcustomplot.cpp	/^QCPSelectionDecoratorBracket::QCPSelectionDecoratorBracket() :$/;"	f	class:QCPSelectionDecoratorBracket
QCPSelectionDecoratorBracket	qcustomplot.h	/^class QCP_LIB_DECL QCPSelectionDecoratorBracket : public QCPSelectionDecorator$/;"	c
QCPSelectionRect	qcustomplot.cpp	/^QCPSelectionRect::QCPSelectionRect(QCustomPlot *parentPlot) :$/;"	f	class:QCPSelectionRect
QCPSelectionRect	qcustomplot.h	/^class QCP_LIB_DECL QCPSelectionRect : public QCPLayerable$/;"	c
QCPStatisticalBox	qcustomplot.cpp	/^QCPStatisticalBox::QCPStatisticalBox(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPStatisticalBox
QCPStatisticalBox	qcustomplot.h	/^class QCP_LIB_DECL QCPStatisticalBox : public QCPAbstractPlottable1D<QCPStatisticalBoxData>$/;"	c
QCPStatisticalBoxData	qcustomplot.cpp	/^QCPStatisticalBoxData::QCPStatisticalBoxData() :$/;"	f	class:QCPStatisticalBoxData
QCPStatisticalBoxData	qcustomplot.cpp	/^QCPStatisticalBoxData::QCPStatisticalBoxData(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector<double> &outliers) :$/;"	f	class:QCPStatisticalBoxData
QCPStatisticalBoxData	qcustomplot.h	/^class QCP_LIB_DECL QCPStatisticalBoxData$/;"	c
QCPStatisticalBoxDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPStatisticalBoxData> QCPStatisticalBoxDataContainer;$/;"	t
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot) :$/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot, const QString &text) :$/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot, const QString &text, const QFont &font) :$/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot, const QString &text, const QString &fontFamily, double pointSize) :$/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot, const QString &text, double pointSize) :$/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.h	/^class QCP_LIB_DECL QCPTextElement : public QCPLayoutElement$/;"	c
QCPVector2D	qcustomplot.cpp	/^QCPVector2D::QCPVector2D() :$/;"	f	class:QCPVector2D
QCPVector2D	qcustomplot.cpp	/^QCPVector2D::QCPVector2D(const QPoint &point) :$/;"	f	class:QCPVector2D
QCPVector2D	qcustomplot.cpp	/^QCPVector2D::QCPVector2D(const QPointF &point) :$/;"	f	class:QCPVector2D
QCPVector2D	qcustomplot.cpp	/^QCPVector2D::QCPVector2D(double x, double y) :$/;"	f	class:QCPVector2D
QCPVector2D	qcustomplot.h	/^class QCP_LIB_DECL QCPVector2D$/;"	c
QCP_DEVICEPIXELRATIO_FLOAT	qcustomplot.h	46;"	d
QCP_DEVICEPIXELRATIO_SUPPORTED	qcustomplot.h	44;"	d
QCP_LIB_DECL	qcustomplot.h	123;"	d
QCP_LIB_DECL	qcustomplot.h	125;"	d
QCP_LIB_DECL	qcustomplot.h	127;"	d
QCP_LIB_DECL	qcustomplot.h	129;"	d
QCP_OPENGL_FBO	qcustomplot.h	36;"	d
QCP_OPENGL_OFFSCREENSURFACE	qcustomplot.h	39;"	d
QCP_OPENGL_PBUFFER	qcustomplot.h	34;"	d
QCUSTOMPLOT_H	qcustomplot.h	27;"	d
QCUSTOMPLOT_VERSION	qcustomplot.h	119;"	d
QCUSTOMPLOT_VERSION_STR	qcustomplot.h	118;"	d
QCustomPlot	qcustomplot.cpp	/^QCustomPlot::QCustomPlot(QWidget *parent) :$/;"	f	class:QCustomPlot
QCustomPlot	qcustomplot.h	/^class QCP_LIB_DECL QCustomPlot : public QWidget$/;"	c
QINSTALL	Makefile	/^QINSTALL      = \/usr\/lib\/qt5\/bin\/qmake -install qinstall$/;"	m
QINSTALL_PROGRAM	Makefile	/^QINSTALL_PROGRAM = \/usr\/lib\/qt5\/bin\/qmake -install qinstall -exe$/;"	m
QMAKE	Makefile	/^QMAKE         = \/usr\/lib\/qt5\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = realtimeplotting$/;"	m
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	m	class:QCPLegend
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE;$/;"	m	class:QCPBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE;$/;"	m	class:QCPFinancial
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE;$/;"	m	class:QCPStatisticalBox
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPLayoutElement* elementAt(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPLayoutElement* elementAt(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutInset
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPLayoutElement* takeAt(int index) Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPLayoutElement* takeAt(int index) Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutInset
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPPainter *startPainting() Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlFbo
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPPainter *startPainting() Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlPbuffer
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPPainter *startPainting() Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferPixmap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange dataValueRange(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange dataValueRange(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE;$/;"	m	class:QCPBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE;$/;"	m	class:QCPColorMap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE;$/;"	m	class:QCPCurve
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE;$/;"	m	class:QCPFinancial
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE;$/;"	m	class:QCPGraph
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE;$/;"	m	class:QCPStatisticalBox
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &inKeyRange=QCPRange()) const Q_DECL_OVERRIDE;$/;"	m	class:QCPBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &inKeyRange=QCPRange()) const Q_DECL_OVERRIDE;$/;"	m	class:QCPColorMap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &inKeyRange=QCPRange()) const Q_DECL_OVERRIDE;$/;"	m	class:QCPCurve
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &inKeyRange=QCPRange()) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &inKeyRange=QCPRange()) const Q_DECL_OVERRIDE;$/;"	m	class:QCPFinancial
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &inKeyRange=QCPRange()) const Q_DECL_OVERRIDE;$/;"	m	class:QCPGraph
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &inKeyRange=QCPRange()) const Q_DECL_OVERRIDE;$/;"	m	class:QCPStatisticalBox
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QList<QCPLayoutElement*> elements(bool recursive) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QList<QCPLayoutElement*> elements(bool recursive) const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayout
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QList<QCPLayoutElement*> elements(bool recursive) const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemBracket
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemEllipse
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemPixmap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemText
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF dataPixelPosition(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF dataPixelPosition(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF dataPixelPosition(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QPointF pixelPosition() const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemPosition
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QRect clipRect() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QRect clipRect() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QRect clipRect() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QSize maximumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QSize maximumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QSize minimumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QSize minimumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	m	class:QCPPlottableLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QSize minimumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QSize minimumSizeHint() const Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QSize sizeHint() const Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerDateTime
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerPi
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerText
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerTime
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QVector<double> createTickVector(double tickStep, const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerDateTime
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QVector<double> createTickVector(double tickStep, const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerLog
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual QVector<double> createTickVector(double tickStep, const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerText
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual bool sortKeyIsMainKey() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual bool sortKeyIsMainKey() const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual bool take(QCPLayoutElement* element) Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual bool take(QCPLayoutElement* element) Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutInset
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double dataMainKey(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double dataMainKey(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double dataMainValue(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double dataMainValue(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double dataSortKey(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double dataSortKey(int index) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerDateTime
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerFixed
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerLog
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerPi
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerText
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerTime
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE = 0; \/\/ actually introduced in QCPLayerable as non-pure, but we want to force reimplementation for plottables$/;"	m	class:QCPAbstractPlottable
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE = 0;$/;"	m	class:QCPAbstractItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPColorMap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPCurve
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPFinancial
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPGraph
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemBracket
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemCurve
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemEllipse
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemLine
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemPixmap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemStraightLine
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemText
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPItemTracer
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutInset
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPLegend
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPStatisticalBox
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int calculateAutoMargin(QCP::MarginSide side) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int dataCount() const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int dataCount() const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int elementCount() const Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutInset
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int findBegin(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int findBegin(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int findEnd(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable1D
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int findEnd(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerDateTime
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerLog
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerPi
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerText
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisTickerTime
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPColorScale
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPLegend
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPSelectionRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPLegend
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void donePainting() Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlFbo
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE = 0;$/;"	m	class:QCPAbstractItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE = 0;$/;"	m	class:QCPAbstractLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE = 0;$/;"	m	class:QCPAbstractPlottable
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPColorMap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPColorScaleAxisRectPrivate
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPCurve
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPFinancial
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPGraph
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemBracket
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemCurve
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemEllipse
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemLine
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemPixmap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemStraightLine
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemText
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPItemTracer
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPLegend
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPPlottableLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPSelectionRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPStatisticalBox
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlFbo
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlPbuffer
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferPixmap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void drawDecoration(QCPPainter *painter, QCPDataSelection selection) Q_DECL_OVERRIDE;$/;"	m	class:QCPSelectionDecoratorBracket
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	m	class:QCPBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	m	class:QCPColorMap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	m	class:QCPCurve
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	m	class:QCPErrorBars
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	m	class:QCPFinancial
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	m	class:QCPGraph
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	m	class:QCPStatisticalBox
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void layoutChanged() Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseDoubleClickEvent(QMouseEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseDoubleClickEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	m	class:QCPColorScale
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	m	class:QCPColorScale
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	m	class:QCPColorScale
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void paintEvent(QPaintEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void parentPlotInitialized(QCustomPlot *parentPlot) Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void parentPlotInitialized(QCustomPlot *parentPlot) Q_DECL_OVERRIDE;$/;"	m	class:QCPLegend
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void reallocateBuffer() Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlFbo
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void reallocateBuffer() Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlPbuffer
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void reallocateBuffer() Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferPixmap
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void resizeEvent(QResizeEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractLegendItem
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPLegend
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	m	class:QCPTextElement
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void simplify() Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void update(UpdatePhase phase) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void update(UpdatePhase phase) Q_DECL_OVERRIDE;$/;"	m	class:QCPColorScale
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void update(UpdatePhase phase) Q_DECL_OVERRIDE;$/;"	m	class:QCPLayout
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void updateLayout() Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutGrid
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void updateLayout() Q_DECL_OVERRIDE;$/;"	m	class:QCPLayoutInset
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxis
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCPAxisRect
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCPColorScale
Q_DECL_OVERRIDE	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event) Q_DECL_OVERRIDE;$/;"	m	class:QCustomPlot
Q_DECL_OVERRIDE	qcustomplot.h	/^  void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	m	class:QCPAbstractPlottable
Q_DECL_OVERRIDE	qcustomplot.h	/^  void clear(const QColor &color) Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlFbo
Q_DECL_OVERRIDE	qcustomplot.h	/^  void clear(const QColor &color) Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferGlPbuffer
Q_DECL_OVERRIDE	qcustomplot.h	/^  void clear(const QColor &color) Q_DECL_OVERRIDE;$/;"	m	class:QCPPaintBufferPixmap
Q_DECL_OVERRIDE	qcustomplot.h	134;"	d
RANLIB	Makefile	/^RANLIB        = $/;"	m
RefreshPriority	qcustomplot.h	/^  enum RefreshPriority { rpImmediateRefresh \/\/\/< Replots immediately and repaints the widget immediately by calling QWidget::repaint() after the replot$/;"	g	class:QCustomPlot
ResolutionUnit	qcustomplot.h	/^enum ResolutionUnit { ruDotsPerMeter       \/\/\/< Resolution is given in dots per meter (dpm)$/;"	g	namespace:QCP
SED	Makefile	/^SED           = sed$/;"	m
SOURCES	Makefile	/^SOURCES       = main.cpp \\$/;"	m
STRIP	Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
ScaleStrategy	qcustomplot.h	/^  enum ScaleStrategy { ssNone      \/\/\/< Modifications are not allowed, the specified tick step is absolutely fixed. This might cause a high tick density and overlapping labels if the axis range is zoomed out.$/;"	g	class:QCPAxisTickerFixed
ScaleType	qcustomplot.h	/^  enum ScaleType { stLinear       \/\/\/< Linear scaling$/;"	g	class:QCPAxis
ScatterProperty	qcustomplot.h	/^  enum ScatterProperty { spNone  = 0x00  \/\/\/< <tt>0x00<\/tt> None$/;"	g	class:QCPScatterStyle
ScatterShape	qcustomplot.h	/^  enum ScatterShape { ssNone       \/\/\/< no scatter symbols are drawn (e.g. in QCPGraph, data only represented with lines)$/;"	g	class:QCPScatterStyle
SelectablePart	qcustomplot.h	/^  enum SelectablePart { spNone        = 0      \/\/\/< None of the selectable parts$/;"	g	class:QCPAxis
SelectablePart	qcustomplot.h	/^  enum SelectablePart { spNone        = 0x000 \/\/\/< <tt>0x000<\/tt> None$/;"	g	class:QCPLegend
SelectionRectMode	qcustomplot.h	/^enum SelectionRectMode { srmNone    \/\/\/< The selection rect is disabled, and all mouse events are forwarded to the underlying objects, e.g. for axis range dragging$/;"	g	namespace:QCP
SelectionType	qcustomplot.h	/^enum SelectionType { stNone                \/\/\/< The plottable is not selectable$/;"	g	namespace:QCP
SignDomain	qcustomplot.h	/^enum SignDomain { sdNegative  \/\/\/< The negative sign domain, i.e. numbers smaller than zero$/;"	g	namespace:QCP
SizeConstraintRect	qcustomplot.h	/^  enum SizeConstraintRect { scrInnerRect \/\/\/< Minimum\/Maximum size constraints apply to inner rect$/;"	g	class:QCPLayoutElement
SpacingType	qcustomplot.h	/^  enum SpacingType { stAbsolute       \/\/\/< Bar spacing is in absolute pixels$/;"	g	class:QCPBarsGroup
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = realtimeplotting$/;"	m
TickLabelData	qcustomplot.h	/^  struct TickLabelData$/;"	s	class:QCPAxisPainterPrivate
TickStepStrategy	qcustomplot.h	/^  enum TickStepStrategy$/;"	g	class:QCPAxisTicker
TimeUnit	qcustomplot.h	/^  enum TimeUnit { tuMilliseconds \/\/\/< Milliseconds, one thousandth of a second (%%z in \\ref setTimeFormat)$/;"	g	class:QCPAxisTickerTime
TracerStyle	qcustomplot.h	/^  enum TracerStyle { tsNone        \/\/\/< The tracer is not visible$/;"	g	class:QCPItemTracer
Ui	mainwindow.h	/^namespace Ui {$/;"	n
UpdatePhase	qcustomplot.h	/^  enum UpdatePhase { upPreparation \/\/\/< Phase used for any type of preparation that needs to be done before margin calculation and layout$/;"	g	class:QCPLayoutElement
WidthType	qcustomplot.h	/^  enum WidthType { wtAbsolute       \/\/\/< Bar width is in absolute pixels$/;"	g	class:QCPBars
WidthType	qcustomplot.h	/^  enum WidthType { wtAbsolute       \/\/\/< width is in absolute pixels$/;"	g	class:QCPFinancial
abbreviateDecimalPowers	qcustomplot.h	/^  bool abbreviateDecimalPowers;$/;"	m	class:QCPAxisPainterPrivate
adaptiveSampling	qcustomplot.h	/^  bool adaptiveSampling() const { return mAdaptiveSampling; }$/;"	f	class:QCPGraph
add	qcustomplot.h	/^void QCPDataContainer<DataType>::add(const DataType &data)$/;"	f	class:QCPDataContainer
add	qcustomplot.h	/^void QCPDataContainer<DataType>::add(const QCPDataContainer<DataType> &data)$/;"	f	class:QCPDataContainer
add	qcustomplot.h	/^void QCPDataContainer<DataType>::add(const QVector<DataType> &data, bool alreadySorted)$/;"	f	class:QCPDataContainer
addAxes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::addAxes(QCPAxis::AxisTypes types)$/;"	f	class:QCPAxisRect
addAxis	qcustomplot.cpp	/^QCPAxis *QCPAxisRect::addAxis(QCPAxis::AxisType type, QCPAxis *axis)$/;"	f	class:QCPAxisRect
addChild	qcustomplot.cpp	/^void QCPLayer::addChild(QCPLayerable *layerable, bool prepend)$/;"	f	class:QCPLayer
addChild	qcustomplot.cpp	/^void QCPMarginGroup::addChild(QCP::MarginSide side, QCPLayoutElement *element)$/;"	f	class:QCPMarginGroup
addChildX	qcustomplot.cpp	/^void QCPItemAnchor::addChildX(QCPItemPosition *pos)$/;"	f	class:QCPItemAnchor
addChildY	qcustomplot.cpp	/^void QCPItemAnchor::addChildY(QCPItemPosition *pos)$/;"	f	class:QCPItemAnchor
addData	qcustomplot.cpp	/^void QCPBars::addData(const QVector<double> &keys, const QVector<double> &values, bool alreadySorted)$/;"	f	class:QCPBars
addData	qcustomplot.cpp	/^void QCPBars::addData(double key, double value)$/;"	f	class:QCPBars
addData	qcustomplot.cpp	/^void QCPCurve::addData(const QVector<double> &keys, const QVector<double> &values)$/;"	f	class:QCPCurve
addData	qcustomplot.cpp	/^void QCPCurve::addData(const QVector<double> &t, const QVector<double> &keys, const QVector<double> &values, bool alreadySorted)$/;"	f	class:QCPCurve
addData	qcustomplot.cpp	/^void QCPCurve::addData(double key, double value)$/;"	f	class:QCPCurve
addData	qcustomplot.cpp	/^void QCPCurve::addData(double t, double key, double value)$/;"	f	class:QCPCurve
addData	qcustomplot.cpp	/^void QCPErrorBars::addData(const QVector<double> &error)$/;"	f	class:QCPErrorBars
addData	qcustomplot.cpp	/^void QCPErrorBars::addData(const QVector<double> &errorMinus, const QVector<double> &errorPlus)$/;"	f	class:QCPErrorBars
addData	qcustomplot.cpp	/^void QCPErrorBars::addData(double error)$/;"	f	class:QCPErrorBars
addData	qcustomplot.cpp	/^void QCPErrorBars::addData(double errorMinus, double errorPlus)$/;"	f	class:QCPErrorBars
addData	qcustomplot.cpp	/^void QCPFinancial::addData(const QVector<double> &keys, const QVector<double> &open, const QVector<double> &high, const QVector<double> &low, const QVector<double> &close, bool alreadySorted)$/;"	f	class:QCPFinancial
addData	qcustomplot.cpp	/^void QCPFinancial::addData(double key, double open, double high, double low, double close)$/;"	f	class:QCPFinancial
addData	qcustomplot.cpp	/^void QCPGraph::addData(const QVector<double> &keys, const QVector<double> &values, bool alreadySorted)$/;"	f	class:QCPGraph
addData	qcustomplot.cpp	/^void QCPGraph::addData(double key, double value)$/;"	f	class:QCPGraph
addData	qcustomplot.cpp	/^void QCPStatisticalBox::addData(const QVector<double> &keys, const QVector<double> &minimum, const QVector<double> &lowerQuartile, const QVector<double> &median, const QVector<double> &upperQuartile, const QVector<double> &maximum, bool alreadySorted)$/;"	f	class:QCPStatisticalBox
addData	qcustomplot.cpp	/^void QCPStatisticalBox::addData(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector<double> &outliers)$/;"	f	class:QCPStatisticalBox
addDataRange	qcustomplot.cpp	/^void QCPDataSelection::addDataRange(const QCPDataRange &dataRange, bool simplify)$/;"	f	class:QCPDataSelection
addElement	qcustomplot.cpp	/^bool QCPLayoutGrid::addElement(QCPLayoutElement *element)$/;"	f	class:QCPLayoutGrid
addElement	qcustomplot.cpp	/^bool QCPLayoutGrid::addElement(int row, int column, QCPLayoutElement *element)$/;"	f	class:QCPLayoutGrid
addElement	qcustomplot.cpp	/^void QCPLayoutInset::addElement(QCPLayoutElement *element, Qt::Alignment alignment)$/;"	f	class:QCPLayoutInset
addElement	qcustomplot.cpp	/^void QCPLayoutInset::addElement(QCPLayoutElement *element, const QRectF &rect)$/;"	f	class:QCPLayoutInset
addGraph	qcustomplot.cpp	/^QCPGraph *QCustomPlot::addGraph(QCPAxis *keyAxis, QCPAxis *valueAxis)$/;"	f	class:QCustomPlot
addItem	qcustomplot.cpp	/^bool QCPLegend::addItem(QCPAbstractLegendItem *item)$/;"	f	class:QCPLegend
addLayer	qcustomplot.cpp	/^bool QCustomPlot::addLayer(const QString &name, QCPLayer *otherLayer, QCustomPlot::LayerInsertMode insertMode)$/;"	f	class:QCustomPlot
addPoint	mainwindow.cpp	/^void MainWindow::addPoint(double x, double y)$/;"	f	class:MainWindow
addTick	qcustomplot.cpp	/^void QCPAxisTickerText::addTick(double position, const QString &label)$/;"	f	class:QCPAxisTickerText
addTicks	qcustomplot.cpp	/^void QCPAxisTickerText::addTicks(const QMap<double, QString> &ticks)$/;"	f	class:QCPAxisTickerText
addTicks	qcustomplot.cpp	/^void QCPAxisTickerText::addTicks(const QVector<double> &positions, const QVector<QString> &labels)$/;"	f	class:QCPAxisTickerText
addToLegend	qcustomplot.cpp	/^bool QCPAbstractPlottable::addToLegend()$/;"	f	class:QCPAbstractPlottable
addToLegend	qcustomplot.cpp	/^bool QCPAbstractPlottable::addToLegend(QCPLegend *legend)$/;"	f	class:QCPAbstractPlottable
adjusted	qcustomplot.h	/^  QCPDataRange adjusted(int changeBegin, int changeEnd) const { return QCPDataRange(mBegin+changeBegin, mEnd+changeEnd); }$/;"	f	class:QCPDataRange
adoptElement	qcustomplot.cpp	/^void QCPLayout::adoptElement(QCPLayoutElement *el)$/;"	f	class:QCPLayout
aeAll	qcustomplot.h	/^                          ,aeAll           = 0xFFFF \/\/\/< <tt>0xFFFF<\/tt> All elements$/;"	e	enum:QCP::AntialiasedElement
aeAxes	qcustomplot.h	/^enum AntialiasedElement { aeAxes           = 0x0001 \/\/\/< <tt>0x0001<\/tt> Axis base line and tick marks$/;"	e	enum:QCP::AntialiasedElement
aeFills	qcustomplot.h	/^                          ,aeFills         = 0x0100 \/\/\/< <tt>0x0100<\/tt> Borders of fills (e.g. under or between graphs)$/;"	e	enum:QCP::AntialiasedElement
aeGrid	qcustomplot.h	/^                          ,aeGrid          = 0x0002 \/\/\/< <tt>0x0002<\/tt> Grid lines$/;"	e	enum:QCP::AntialiasedElement
aeItems	qcustomplot.h	/^                          ,aeItems         = 0x0040 \/\/\/< <tt>0x0040<\/tt> Main lines of items$/;"	e	enum:QCP::AntialiasedElement
aeLegend	qcustomplot.h	/^                          ,aeLegend        = 0x0008 \/\/\/< <tt>0x0008<\/tt> Legend box$/;"	e	enum:QCP::AntialiasedElement
aeLegendItems	qcustomplot.h	/^                          ,aeLegendItems   = 0x0010 \/\/\/< <tt>0x0010<\/tt> Legend items$/;"	e	enum:QCP::AntialiasedElement
aeNone	qcustomplot.h	/^                          ,aeNone          = 0x0000 \/\/\/< <tt>0x0000<\/tt> No elements$/;"	e	enum:QCP::AntialiasedElement
aeOther	qcustomplot.h	/^                          ,aeOther         = 0x8000 \/\/\/< <tt>0x8000<\/tt> Other elements that don't fit into any of the existing categories$/;"	e	enum:QCP::AntialiasedElement
aePlottables	qcustomplot.h	/^                          ,aePlottables    = 0x0020 \/\/\/< <tt>0x0020<\/tt> Main lines of plottables$/;"	e	enum:QCP::AntialiasedElement
aeScatters	qcustomplot.h	/^                          ,aeScatters      = 0x0080 \/\/\/< <tt>0x0080<\/tt> Scatter symbols of plottables (excluding scatter symbols of type ssPixmap)$/;"	e	enum:QCP::AntialiasedElement
aeSubGrid	qcustomplot.h	/^                          ,aeSubGrid       = 0x0004 \/\/\/< <tt>0x0004<\/tt> Sub grid lines$/;"	e	enum:QCP::AntialiasedElement
aeZeroLine	qcustomplot.h	/^                          ,aeZeroLine      = 0x0200 \/\/\/< <tt>0x0200<\/tt> Zero-lines, see \\ref QCPGrid::setZeroLinePen$/;"	e	enum:QCP::AntialiasedElement
aiBottom	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiBottom	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiBottom	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemText::AnchorIndex
aiBottom	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
aiBottomLeft	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiBottomLeft	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiBottomLeft	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemText::AnchorIndex
aiBottomLeftRim	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
aiBottomRight	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemText::AnchorIndex
aiBottomRightRim	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
aiCenter	qcustomplot.h	/^  enum AnchorIndex {aiCenter};$/;"	e	enum:QCPItemBracket::AnchorIndex
aiCenter	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
aiLeft	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiLeft	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiLeft	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemText::AnchorIndex
aiLeft	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
aiRight	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiRight	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiRight	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemText::AnchorIndex
aiRight	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
aiTop	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiTop	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiTop	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemText::AnchorIndex
aiTop	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
aiTopLeft	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemText::AnchorIndex
aiTopLeftRim	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
aiTopRight	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiTopRight	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiTopRight	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemText::AnchorIndex
aiTopRightRim	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiBottomLeftRim, aiLeft, aiCenter};$/;"	e	enum:QCPItemEllipse::AnchorIndex
alpha	qcustomplot.cpp	/^unsigned char QCPColorMapData::alpha(int keyIndex, int valueIndex)$/;"	f	class:QCPColorMapData
anchor	qcustomplot.cpp	/^QCPItemAnchor *QCPAbstractItem::anchor(const QString &name) const$/;"	f	class:QCPAbstractItem
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPAbstractItem::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPAbstractItem
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemBracket::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemBracket
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemEllipse::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemEllipse
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemPixmap::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemPixmap
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemRect::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemRect
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemText::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemText
anchors	qcustomplot.h	/^  QList<QCPItemAnchor*> anchors() const { return mAnchors; }$/;"	f	class:QCPAbstractItem
antialiased	qcustomplot.h	/^  bool antialiased() const { return mAntialiased; }$/;"	f	class:QCPLayerable
antialiasedElements	qcustomplot.h	/^  QCP::AntialiasedElements antialiasedElements() const { return mAntialiasedElements; }$/;"	f	class:QCustomPlot
antialiasedFill	qcustomplot.h	/^  bool antialiasedFill() const { return mAntialiasedFill; }$/;"	f	class:QCPAbstractPlottable
antialiasedScatters	qcustomplot.h	/^  bool antialiasedScatters() const { return mAntialiasedScatters; }$/;"	f	class:QCPAbstractPlottable
antialiasedSubGrid	qcustomplot.h	/^  bool antialiasedSubGrid() const { return mAntialiasedSubGrid; }$/;"	f	class:QCPGrid
antialiasedZeroLine	qcustomplot.h	/^  bool antialiasedZeroLine() const { return mAntialiasedZeroLine; }$/;"	f	class:QCPGrid
antialiasing	qcustomplot.h	/^  bool antialiasing() const { return testRenderHint(QPainter::Antialiasing); }$/;"	f	class:QCPPainter
append	qcustomplot.cpp	/^void QCPBarsGroup::append(QCPBars *bars)$/;"	f	class:QCPBarsGroup
applyAntialiasingHint	qcustomplot.cpp	/^void QCPLayerable::applyAntialiasingHint(QCPPainter *painter, bool localAntialiased, QCP::AntialiasedElement overrideElement) const$/;"	f	class:QCPLayerable
applyBrush	qcustomplot.cpp	/^void QCPSelectionDecorator::applyBrush(QCPPainter *painter) const$/;"	f	class:QCPSelectionDecorator
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractItem::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractItem
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractLegendItem::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractLegendItem
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractPlottable::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractPlottable
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAxis::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAxis
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAxisRect::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAxisRect
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPColorScale::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPColorScale
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPGrid::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPGrid
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPLegend::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPLegend
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPSelectionRect::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPSelectionRect
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPTextElement::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPTextElement
applyFillAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractPlottable::applyFillAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractPlottable
applyPen	qcustomplot.cpp	/^void QCPSelectionDecorator::applyPen(QCPPainter *painter) const$/;"	f	class:QCPSelectionDecorator
applyScattersAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractPlottable::applyScattersAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractPlottable
applyTo	qcustomplot.cpp	/^void QCPScatterStyle::applyTo(QCPPainter *painter, const QPen &defaultPen) const$/;"	f	class:QCPScatterStyle
aspectRatioMode	qcustomplot.h	/^  Qt::AspectRatioMode aspectRatioMode() const { return mAspectRatioMode; }$/;"	f	class:QCPItemPixmap
at	qcustomplot.h	/^  const_iterator at(int index) const { return constBegin()+qBound(0, index, size()); }$/;"	f	class:QCPDataContainer
atBottom	qcustomplot.h	/^                  ,atBottom = 0x08  \/\/\/< <tt>0x08<\/tt> Axis is horizontal and on the bottom side of the axis rect$/;"	e	enum:QCPAxis::AxisType
atLeft	qcustomplot.h	/^  enum AxisType { atLeft    = 0x01  \/\/\/< <tt>0x01<\/tt> Axis is vertical and on the left side of the axis rect$/;"	e	enum:QCPAxis::AxisType
atRight	qcustomplot.h	/^                  ,atRight  = 0x02  \/\/\/< <tt>0x02<\/tt> Axis is vertical and on the right side of the axis rect$/;"	e	enum:QCPAxis::AxisType
atTop	qcustomplot.h	/^                  ,atTop    = 0x04  \/\/\/< <tt>0x04<\/tt> Axis is horizontal and on the top side of the axis rect$/;"	e	enum:QCPAxis::AxisType
autoAddPlottableToLegend	qcustomplot.h	/^  bool autoAddPlottableToLegend() const { return mAutoAddPlottableToLegend; }$/;"	f	class:QCustomPlot
autoMargins	qcustomplot.h	/^  QCP::MarginSides autoMargins() const { return mAutoMargins; }$/;"	f	class:QCPLayoutElement
autoSqueeze	qcustomplot.h	/^  bool autoSqueeze() const { return mAutoSqueeze; }$/;"	f	class:QCPDataContainer
axes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::axes() const$/;"	f	class:QCPAxisRect
axes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::axes(QCPAxis::AxisTypes types) const$/;"	f	class:QCPAxisRect
axis	qcustomplot.cpp	/^QCPAxis *QCPAxisRect::axis(QCPAxis::AxisType type, int index) const$/;"	f	class:QCPAxisRect
axis	qcustomplot.h	/^  QCPAxis *axis() const { return mColorAxis.data(); }$/;"	f	class:QCPColorScale
axisCount	qcustomplot.cpp	/^int QCPAxisRect::axisCount(QCPAxis::AxisType type) const$/;"	f	class:QCPAxisRect
axisRect	qcustomplot.cpp	/^QCPAxisRect *QCPItemPosition::axisRect() const$/;"	f	class:QCPItemPosition
axisRect	qcustomplot.cpp	/^QCPAxisRect *QCustomPlot::axisRect(int index) const$/;"	f	class:QCustomPlot
axisRect	qcustomplot.h	/^  QCPAxisRect *axisRect() const { return mAxisRect; }$/;"	f	class:QCPAxis
axisRect	qcustomplot.h	/^  QRect axisRect, viewportRect;$/;"	m	class:QCPAxisPainterPrivate
axisRectAt	qcustomplot.cpp	/^QCPAxisRect *QCustomPlot::axisRectAt(const QPointF &pos) const$/;"	f	class:QCustomPlot
axisRectCount	qcustomplot.cpp	/^int QCustomPlot::axisRectCount() const$/;"	f	class:QCustomPlot
axisRects	qcustomplot.cpp	/^QList<QCPAxisRect*> QCustomPlot::axisRects() const$/;"	f	class:QCustomPlot
axisRemoved	qcustomplot.cpp	/^void QCustomPlot::axisRemoved(QCPAxis *axis)$/;"	f	class:QCustomPlot
axisSelectableChanged	qcustomplot.cpp	/^void QCPColorScaleAxisRectPrivate::axisSelectableChanged(QCPAxis::SelectableParts selectableParts)$/;"	f	class:QCPColorScaleAxisRectPrivate
axisSelectionBox	qcustomplot.h	/^  QRect axisSelectionBox() const { return mAxisSelectionBox; }$/;"	f	class:QCPAxisPainterPrivate
axisSelectionChanged	qcustomplot.cpp	/^void QCPColorScaleAxisRectPrivate::axisSelectionChanged(QCPAxis::SelectableParts selectedParts)$/;"	f	class:QCPColorScaleAxisRectPrivate
axisType	qcustomplot.h	/^  AxisType axisType() const { return mAxisType; }$/;"	f	class:QCPAxis
background	qcustomplot.h	/^  QPixmap background() const { return mBackgroundPixmap; }$/;"	f	class:QCPAxisRect
background	qcustomplot.h	/^  QPixmap background() const { return mBackgroundPixmap; }$/;"	f	class:QCustomPlot
backgroundBrush	qcustomplot.h	/^  QBrush backgroundBrush() const { return mBackgroundBrush; }$/;"	f	class:QCPAxisRect
backgroundScaled	qcustomplot.h	/^  bool backgroundScaled() const { return mBackgroundScaled; }$/;"	f	class:QCPAxisRect
backgroundScaled	qcustomplot.h	/^  bool backgroundScaled() const { return mBackgroundScaled; }$/;"	f	class:QCustomPlot
backgroundScaledMode	qcustomplot.h	/^  Qt::AspectRatioMode backgroundScaledMode() const { return mBackgroundScaledMode; }$/;"	f	class:QCPAxisRect
backgroundScaledMode	qcustomplot.h	/^  Qt::AspectRatioMode backgroundScaledMode() const { return mBackgroundScaledMode; }$/;"	f	class:QCustomPlot
barAbove	qcustomplot.h	/^  QCPBars *barAbove() const { return mBarAbove.data(); }$/;"	f	class:QCPBars
barBelow	qcustomplot.h	/^  QCPBars *barBelow() const { return mBarBelow.data(); }$/;"	f	class:QCPBars
barWidth	qcustomplot.h	/^  int barWidth () const { return mBarWidth; }$/;"	f	class:QCPColorScale
bars	qcustomplot.cpp	/^QCPBars *QCPBarsGroup::bars(int index) const$/;"	f	class:QCPBarsGroup
bars	qcustomplot.h	/^  QList<QCPBars*> bars() const { return mBars; }$/;"	f	class:QCPBarsGroup
barsGroup	qcustomplot.h	/^  QCPBarsGroup *barsGroup() const { return mBarsGroup; }$/;"	f	class:QCPBars
baseBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
baseFont	qcustomplot.h	/^    QFont baseFont, expFont;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
basePart	qcustomplot.h	/^    QString basePart, expPart, suffixPart;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
basePen	qcustomplot.h	/^  QPen basePen() const { return mBasePen; }$/;"	f	class:QCPAxis
basePen	qcustomplot.h	/^  QPen basePen;$/;"	m	class:QCPAxisPainterPrivate
baseValue	qcustomplot.h	/^  double baseValue() const { return mBaseValue; }$/;"	f	class:QCPBars
begin	qcustomplot.cpp	/^bool QCPPainter::begin(QPaintDevice *device)$/;"	f	class:QCPPainter
begin	qcustomplot.h	/^  int begin() const { return mBegin; }$/;"	f	class:QCPDataRange
begin	qcustomplot.h	/^  iterator begin() { return mData.begin()+mPreallocSize; }$/;"	f	class:QCPDataContainer
borderPen	qcustomplot.h	/^  QPen borderPen() const { return mBorderPen; }$/;"	f	class:QCPLegend
bottom	qcustomplot.h	/^  QCPItemAnchor * const bottom;$/;"	m	class:QCPItemEllipse
bottom	qcustomplot.h	/^  QCPItemAnchor * const bottom;$/;"	m	class:QCPItemPixmap
bottom	qcustomplot.h	/^  QCPItemAnchor * const bottom;$/;"	m	class:QCPItemRect
bottom	qcustomplot.h	/^  QCPItemAnchor * const bottom;$/;"	m	class:QCPItemText
bottom	qcustomplot.h	/^  int bottom() const { return mRect.bottom(); }$/;"	f	class:QCPAxisRect
bottomLeft	qcustomplot.h	/^  QCPItemAnchor * const bottomLeft;$/;"	m	class:QCPItemPixmap
bottomLeft	qcustomplot.h	/^  QCPItemAnchor * const bottomLeft;$/;"	m	class:QCPItemRect
bottomLeft	qcustomplot.h	/^  QCPItemAnchor * const bottomLeft;$/;"	m	class:QCPItemText
bottomLeft	qcustomplot.h	/^  QPoint bottomLeft() const { return mRect.bottomLeft(); }$/;"	f	class:QCPAxisRect
bottomLeftRim	qcustomplot.h	/^  QCPItemAnchor * const bottomLeftRim;$/;"	m	class:QCPItemEllipse
bottomRight	qcustomplot.h	/^  QCPItemAnchor * const bottomRight;$/;"	m	class:QCPItemText
bottomRight	qcustomplot.h	/^  QCPItemPosition * const bottomRight;$/;"	m	class:QCPItemEllipse
bottomRight	qcustomplot.h	/^  QCPItemPosition * const bottomRight;$/;"	m	class:QCPItemPixmap
bottomRight	qcustomplot.h	/^  QCPItemPosition * const bottomRight;$/;"	m	class:QCPItemRect
bottomRight	qcustomplot.h	/^  QPoint bottomRight() const { return mRect.bottomRight(); }$/;"	f	class:QCPAxisRect
bottomRightRim	qcustomplot.h	/^  QCPItemAnchor * const bottomRightRim;$/;"	m	class:QCPItemEllipse
bounded	qcustomplot.cpp	/^QCPDataRange QCPDataRange::bounded(const QCPDataRange &other) const$/;"	f	class:QCPDataRange
bounded	qcustomplot.cpp	/^QCPRange QCPRange::bounded(double lowerBound, double upperBound) const$/;"	f	class:QCPRange
boundingDistance	qcustomplot.cpp	/^double QCPLineEnding::boundingDistance() const$/;"	f	class:QCPLineEnding
bracketBrush	qcustomplot.h	/^  QBrush bracketBrush() const { return mBracketBrush; }$/;"	f	class:QCPSelectionDecoratorBracket
bracketHeight	qcustomplot.h	/^  int bracketHeight() const { return mBracketHeight; }$/;"	f	class:QCPSelectionDecoratorBracket
bracketPen	qcustomplot.h	/^  QPen bracketPen() const { return mBracketPen; }$/;"	f	class:QCPSelectionDecoratorBracket
bracketStyle	qcustomplot.h	/^  BracketStyle bracketStyle() const { return mBracketStyle; }$/;"	f	class:QCPSelectionDecoratorBracket
bracketWidth	qcustomplot.h	/^  int bracketWidth() const { return mBracketWidth; }$/;"	f	class:QCPSelectionDecoratorBracket
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPAbstractPlottable
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPItemEllipse
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPItemRect
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPItemText
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPItemTracer
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPLegend
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPScatterStyle
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPSelectionDecorator
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPSelectionRect
brushNegative	qcustomplot.h	/^  QBrush brushNegative() const { return mBrushNegative; }$/;"	f	class:QCPFinancial
brushPositive	qcustomplot.h	/^  QBrush brushPositive() const { return mBrushPositive; }$/;"	f	class:QCPFinancial
bsCalligraphic	qcustomplot.h	/^                      ,bsCalligraphic \/\/\/< A curly brace with varying stroke width giving a calligraphic impression$/;"	e	enum:QCPItemBracket::BracketStyle
bsCurly	qcustomplot.h	/^                      ,bsCurly  \/\/\/< A curly brace$/;"	e	enum:QCPItemBracket::BracketStyle
bsEllipse	qcustomplot.h	/^                      ,bsEllipse       \/\/\/< An ellipse is drawn. The size of the ellipse is given by the bracket width\/height properties.$/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bsHalfEllipse	qcustomplot.h	/^                      ,bsHalfEllipse   \/\/\/< A half ellipse is drawn. The size of the ellipse is given by the bracket width\/height properties.$/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bsPlus	qcustomplot.h	/^                      ,bsPlus         \/\/\/< A plus is drawn.$/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bsRound	qcustomplot.h	/^                      ,bsRound  \/\/\/< A brace with round edges$/;"	e	enum:QCPItemBracket::BracketStyle
bsSquare	qcustomplot.h	/^  enum BracketStyle { bsSquare  \/\/\/< A brace with angled edges$/;"	e	enum:QCPItemBracket::BracketStyle
bsSquareBracket	qcustomplot.h	/^  enum BracketStyle { bsSquareBracket \/\/\/< A square bracket is drawn.$/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bsUserStyle	qcustomplot.h	/^                      ,bsUserStyle    \/\/\/< Start custom bracket styles at this index when subclassing and reimplementing \\ref drawBracket.$/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bufferDevicePixelRatio	qcustomplot.h	/^  double bufferDevicePixelRatio() const { return mBufferDevicePixelRatio; }$/;"	f	class:QCustomPlot
c_point	mainwindow.h	/^    QPoint c_point;$/;"	m	class:MainWindow
calculateAutoMargin	qcustomplot.cpp	/^int QCPAxisRect::calculateAutoMargin(QCP::MarginSide side)$/;"	f	class:QCPAxisRect
calculateAutoMargin	qcustomplot.cpp	/^int QCPLayoutElement::calculateAutoMargin(QCP::MarginSide side)$/;"	f	class:QCPLayoutElement
calculateMargin	qcustomplot.cpp	/^int QCPAxis::calculateMargin()$/;"	f	class:QCPAxis
cancel	qcustomplot.cpp	/^void QCPSelectionRect::cancel()$/;"	f	class:QCPSelectionRect
candlestickSelectTest	qcustomplot.cpp	/^double QCPFinancial::candlestickSelectTest(const QPointF &pos, const QCPFinancialDataContainer::const_iterator &begin, const QCPFinancialDataContainer::const_iterator &end, QCPFinancialDataContainer::const_iterator &closestDataPoint) const$/;"	f	class:QCPFinancial
cell	qcustomplot.cpp	/^double QCPColorMapData::cell(int keyIndex, int valueIndex)$/;"	f	class:QCPColorMapData
cellToCoord	qcustomplot.cpp	/^void QCPColorMapData::cellToCoord(int keyIndex, int valueIndex, double *key, double *value) const$/;"	f	class:QCPColorMapData
center	qcustomplot.h	/^  QCPItemAnchor * const center;$/;"	m	class:QCPItemBracket
center	qcustomplot.h	/^  QCPItemAnchor * const center;$/;"	m	class:QCPItemEllipse
center	qcustomplot.h	/^  QPoint center() const { return mRect.center(); }$/;"	f	class:QCPAxisRect
center	qcustomplot.h	/^  double center() const { return (upper+lower)*0.5; }$/;"	f	class:QCPRange
channelFillGraph	qcustomplot.h	/^  QCPGraph *channelFillGraph() const { return mChannelFillGraph.data(); }$/;"	f	class:QCPGraph
chartStyle	qcustomplot.h	/^  ChartStyle chartStyle() const { return mChartStyle; }$/;"	f	class:QCPFinancial
check_vector_x	mainwindow.h	/^    std::vector<double> check_vector_x;$/;"	m	class:MainWindow
check_vector_y	mainwindow.h	/^    std::vector<double> check_vector_y;$/;"	m	class:MainWindow
children	qcustomplot.h	/^  QList<QCPLayerable*> children() const { return mChildren; }$/;"	f	class:QCPLayer
ciHSV	qcustomplot.h	/^                            ,ciHSV \/\/\/< Color channels hue, saturation and value are linearly interpolated (The hue is interpolated over the shortest angle distance)$/;"	e	enum:QCPColorGradient::ColorInterpolation
ciRGB	qcustomplot.h	/^  enum ColorInterpolation { ciRGB  \/\/\/< Color channels red, green and blue are linearly interpolated$/;"	e	enum:QCPColorGradient::ColorInterpolation
cleanMantissa	qcustomplot.cpp	/^double QCPAxisTicker::cleanMantissa(double input) const$/;"	f	class:QCPAxisTicker
clear	qcustomplot.cpp	/^void QCPAxisTickerText::clear()$/;"	f	class:QCPAxisTickerText
clear	qcustomplot.cpp	/^void QCPBarsGroup::clear()$/;"	f	class:QCPBarsGroup
clear	qcustomplot.cpp	/^void QCPColorMapData::clear()$/;"	f	class:QCPColorMapData
clear	qcustomplot.cpp	/^void QCPDataSelection::clear()$/;"	f	class:QCPDataSelection
clear	qcustomplot.cpp	/^void QCPLayout::clear()$/;"	f	class:QCPLayout
clear	qcustomplot.cpp	/^void QCPMarginGroup::clear()$/;"	f	class:QCPMarginGroup
clear	qcustomplot.cpp	/^void QCPPaintBufferGlFbo::clear(const QColor &color)$/;"	f	class:QCPPaintBufferGlFbo
clear	qcustomplot.cpp	/^void QCPPaintBufferGlPbuffer::clear(const QColor &color)$/;"	f	class:QCPPaintBufferGlPbuffer
clear	qcustomplot.cpp	/^void QCPPaintBufferPixmap::clear(const QColor &color)$/;"	f	class:QCPPaintBufferPixmap
clear	qcustomplot.h	/^void QCPDataContainer<DataType>::clear()$/;"	f	class:QCPDataContainer
clearAlpha	qcustomplot.cpp	/^void QCPColorMapData::clearAlpha()$/;"	f	class:QCPColorMapData
clearCache	qcustomplot.cpp	/^void QCPAxisPainterPrivate::clearCache()$/;"	f	class:QCPAxisPainterPrivate
clearColorStops	qcustomplot.cpp	/^void QCPColorGradient::clearColorStops()$/;"	f	class:QCPColorGradient
clearData	mainwindow.cpp	/^void MainWindow::clearData()$/;"	f	class:MainWindow
clearGraphs	qcustomplot.cpp	/^int QCustomPlot::clearGraphs()$/;"	f	class:QCustomPlot
clearItems	qcustomplot.cpp	/^int QCustomPlot::clearItems()$/;"	f	class:QCustomPlot
clearItems	qcustomplot.cpp	/^void QCPLegend::clearItems()$/;"	f	class:QCPLegend
clearPlottables	qcustomplot.cpp	/^int QCustomPlot::clearPlottables()$/;"	f	class:QCustomPlot
clickedGraph	mainwindow.cpp	/^void MainWindow::clickedGraph(QMouseEvent *event)$/;"	f	class:MainWindow
clickedGraphRelease	mainwindow.cpp	/^void MainWindow::clickedGraphRelease(QMouseEvent *event)$/;"	f	class:MainWindow
clipAxisRect	qcustomplot.cpp	/^QCPAxisRect *QCPAbstractItem::clipAxisRect() const$/;"	f	class:QCPAbstractItem
clipRect	qcustomplot.cpp	/^QRect QCPAbstractItem::clipRect() const$/;"	f	class:QCPAbstractItem
clipRect	qcustomplot.cpp	/^QRect QCPAbstractLegendItem::clipRect() const$/;"	f	class:QCPAbstractLegendItem
clipRect	qcustomplot.cpp	/^QRect QCPAbstractPlottable::clipRect() const$/;"	f	class:QCPAbstractPlottable
clipRect	qcustomplot.cpp	/^QRect QCPLayerable::clipRect() const$/;"	f	class:QCPLayerable
clipToAxisRect	qcustomplot.h	/^  bool clipToAxisRect() const { return mClipToAxisRect; }$/;"	f	class:QCPAbstractItem
close	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData
color	qcustomplot.cpp	/^QRgb QCPColorGradient::color(double position, const QCPRange &range, bool logarithmic)$/;"	f	class:QCPColorGradient
color	qcustomplot.h	/^  QColor color() const { return mColor; }$/;"	f	class:QCPItemText
colorInterpolation	qcustomplot.h	/^  ColorInterpolation colorInterpolation() const { return mColorInterpolation; }$/;"	f	class:QCPColorGradient
colorMaps	qcustomplot.cpp	/^QList<QCPColorMap*> QCPColorScale::colorMaps() const$/;"	f	class:QCPColorScale
colorScale	qcustomplot.h	/^  QCPColorScale *colorScale() const { return mColorScale.data(); }$/;"	f	class:QCPColorMap
colorStops	qcustomplot.h	/^  QMap<double, QColor> colorStops() const { return mColorStops; }$/;"	f	class:QCPColorGradient
colorize	qcustomplot.cpp	/^void QCPColorGradient::colorize(const double *data, const QCPRange &range, QRgb *scanLine, int n, int dataIndexFactor, bool logarithmic)$/;"	f	class:QCPColorGradient
colorize	qcustomplot.cpp	/^void QCPColorGradient::colorize(const double *data, const unsigned char *alpha, const QCPRange &range, QRgb *scanLine, int n, int dataIndexFactor, bool logarithmic)$/;"	f	class:QCPColorGradient
columnCount	qcustomplot.h	/^  int columnCount() const { return mElements.size() > 0 ? mElements.first().size() : 0; }$/;"	f	class:QCPLayoutGrid
columnSpacing	qcustomplot.h	/^  int columnSpacing() const { return mColumnSpacing; }$/;"	f	class:QCPLayoutGrid
columnStretchFactors	qcustomplot.h	/^  QList<double> columnStretchFactors() const { return mColumnStretchFactors; }$/;"	f	class:QCPLayoutGrid
commonMargin	qcustomplot.cpp	/^int QCPMarginGroup::commonMargin(QCP::MarginSide side) const$/;"	f	class:QCPMarginGroup
connectBars	qcustomplot.cpp	/^void QCPBars::connectBars(QCPBars *lower, QCPBars *upper)$/;"	f	class:QCPBars
constBegin	qcustomplot.h	/^  const_iterator constBegin() const { return mData.constBegin()+mPreallocSize; }$/;"	f	class:QCPDataContainer
constEnd	qcustomplot.h	/^  const_iterator constEnd() const { return mData.constEnd(); }$/;"	f	class:QCPDataContainer
const_iterator	qcustomplot.h	/^  typedef typename QVector<DataType>::const_iterator const_iterator;$/;"	t	class:QCPDataContainer
contains	qcustomplot.cpp	/^bool QCPDataRange::contains(const QCPDataRange &other) const$/;"	f	class:QCPDataRange
contains	qcustomplot.cpp	/^bool QCPDataSelection::contains(const QCPDataSelection &other) const$/;"	f	class:QCPDataSelection
contains	qcustomplot.h	/^  bool contains(QCPBars *bars) const { return mBars.contains(bars); }$/;"	f	class:QCPBarsGroup
contains	qcustomplot.h	/^  bool contains(double value) const { return value >= lower && value <= upper; }$/;"	f	class:QCPRange
coordToCell	qcustomplot.cpp	/^void QCPColorMapData::coordToCell(double key, double value, int *keyIndex, int *valueIndex) const$/;"	f	class:QCPColorMapData
coordToPixel	qcustomplot.cpp	/^double QCPAxis::coordToPixel(double value) const$/;"	f	class:QCPAxis
coords	qcustomplot.h	/^  QPointF coords() const { return QPointF(mKey, mValue); }$/;"	f	class:QCPItemPosition
coordsToPixels	qcustomplot.cpp	/^const QPointF QCPAbstractPlottable::coordsToPixels(double key, double value) const$/;"	f	class:QCPAbstractPlottable
coordsToPixels	qcustomplot.cpp	/^void QCPAbstractPlottable::coordsToPixels(double key, double value, double &x, double &y) const$/;"	f	class:QCPAbstractPlottable
copyFrom	qcustomplot.cpp	/^void QCPSelectionDecorator::copyFrom(const QCPSelectionDecorator *other)$/;"	f	class:QCPSelectionDecorator
createAlpha	qcustomplot.cpp	/^bool QCPColorMapData::createAlpha(bool initializeOpaque)$/;"	f	class:QCPColorMapData
createAnchor	qcustomplot.cpp	/^QCPItemAnchor *QCPAbstractItem::createAnchor(const QString &name, int anchorId)$/;"	f	class:QCPAbstractItem
createLabelVector	qcustomplot.cpp	/^QVector<QString> QCPAxisTicker::createLabelVector(const QVector<double> &ticks, const QLocale &locale, QChar formatChar, int precision)$/;"	f	class:QCPAxisTicker
createPaintBuffer	qcustomplot.cpp	/^QCPAbstractPaintBuffer *QCustomPlot::createPaintBuffer()$/;"	f	class:QCustomPlot
createPosition	qcustomplot.cpp	/^QCPItemPosition *QCPAbstractItem::createPosition(const QString &name)$/;"	f	class:QCPAbstractItem
createSubTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTicker::createSubTickVector(int subTickCount, const QVector<double> &ticks)$/;"	f	class:QCPAxisTicker
createTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTicker::createTickVector(double tickStep, const QCPRange &range)$/;"	f	class:QCPAxisTicker
createTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTickerDateTime::createTickVector(double tickStep, const QCPRange &range)$/;"	f	class:QCPAxisTickerDateTime
createTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTickerLog::createTickVector(double tickStep, const QCPRange &range)$/;"	f	class:QCPAxisTickerLog
createTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTickerText::createTickVector(double tickStep, const QCPRange &range)$/;"	f	class:QCPAxisTickerText
csCandlestick	qcustomplot.h	/^                   ,csCandlestick  \/\/\/< Candlestick representation$/;"	e	enum:QCPFinancial::ChartStyle
csOhlc	qcustomplot.h	/^  enum ChartStyle { csOhlc         \/\/\/< Open-High-Low-Close bar representation$/;"	e	enum:QCPFinancial::ChartStyle
currentLayer	qcustomplot.cpp	/^QCPLayer *QCustomPlot::currentLayer() const$/;"	f	class:QCustomPlot
customPath	qcustomplot.h	/^  QPainterPath customPath() const { return mCustomPath; }$/;"	f	class:QCPScatterStyle
data	qcustomplot.cpp	/^double QCPColorMapData::data(double key, double value)$/;"	f	class:QCPColorMapData
data	qcustomplot.h	/^  QCPColorMapData *data() const { return mMapData; }$/;"	f	class:QCPColorMap
data	qcustomplot.h	/^  QSharedPointer<QCPBarsDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPBars
data	qcustomplot.h	/^  QSharedPointer<QCPCurveDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPCurve
data	qcustomplot.h	/^  QSharedPointer<QCPErrorBarsDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPErrorBars
data	qcustomplot.h	/^  QSharedPointer<QCPFinancialDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPFinancial
data	qcustomplot.h	/^  QSharedPointer<QCPGraphDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPGraph
data	qcustomplot.h	/^  QSharedPointer<QCPStatisticalBoxDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPStatisticalBox
dataBounds	qcustomplot.h	/^  QCPRange dataBounds() const { return mDataBounds; }$/;"	f	class:QCPColorMapData
dataCount	qcustomplot.cpp	/^int QCPErrorBars::dataCount() const$/;"	f	class:QCPErrorBars
dataCount	qcustomplot.h	/^int QCPAbstractPlottable1D<DataType>::dataCount() const$/;"	f	class:QCPAbstractPlottable1D
dataMainKey	qcustomplot.cpp	/^double QCPErrorBars::dataMainKey(int index) const$/;"	f	class:QCPErrorBars
dataMainKey	qcustomplot.h	/^double QCPAbstractPlottable1D<DataType>::dataMainKey(int index) const$/;"	f	class:QCPAbstractPlottable1D
dataMainValue	qcustomplot.cpp	/^double QCPErrorBars::dataMainValue(int index) const$/;"	f	class:QCPErrorBars
dataMainValue	qcustomplot.h	/^double QCPAbstractPlottable1D<DataType>::dataMainValue(int index) const$/;"	f	class:QCPAbstractPlottable1D
dataPixelPosition	qcustomplot.cpp	/^QPointF QCPBars::dataPixelPosition(int index) const$/;"	f	class:QCPBars
dataPixelPosition	qcustomplot.cpp	/^QPointF QCPErrorBars::dataPixelPosition(int index) const$/;"	f	class:QCPErrorBars
dataPixelPosition	qcustomplot.h	/^QPointF QCPAbstractPlottable1D<DataType>::dataPixelPosition(int index) const$/;"	f	class:QCPAbstractPlottable1D
dataPlottable	qcustomplot.h	/^  QCPAbstractPlottable *dataPlottable() const { return mDataPlottable.data(); }$/;"	f	class:QCPErrorBars
dataPointCount	qcustomplot.cpp	/^int QCPDataSelection::dataPointCount() const$/;"	f	class:QCPDataSelection
dataRange	qcustomplot.cpp	/^QCPDataRange QCPDataSelection::dataRange(int index) const$/;"	f	class:QCPDataSelection
dataRange	qcustomplot.h	/^  QCPDataRange dataRange() const { return QCPDataRange(0, size()); }$/;"	f	class:QCPDataContainer
dataRange	qcustomplot.h	/^  QCPRange dataRange() const { return mDataRange; }$/;"	f	class:QCPColorMap
dataRange	qcustomplot.h	/^  QCPRange dataRange() const { return mDataRange; }$/;"	f	class:QCPColorScale
dataRangeCount	qcustomplot.h	/^  int dataRangeCount() const { return mDataRanges.size(); }$/;"	f	class:QCPDataSelection
dataRanges	qcustomplot.h	/^  QList<QCPDataRange> dataRanges() const { return mDataRanges; }$/;"	f	class:QCPDataSelection
dataScaleType	qcustomplot.h	/^  QCPAxis::ScaleType dataScaleType() const { return mDataScaleType; }$/;"	f	class:QCPColorMap
dataScaleType	qcustomplot.h	/^  QCPAxis::ScaleType dataScaleType() const { return mDataScaleType; }$/;"	f	class:QCPColorScale
dataSortKey	qcustomplot.cpp	/^double QCPErrorBars::dataSortKey(int index) const$/;"	f	class:QCPErrorBars
dataSortKey	qcustomplot.h	/^double QCPAbstractPlottable1D<DataType>::dataSortKey(int index) const$/;"	f	class:QCPAbstractPlottable1D
dataToImpulseLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToImpulseLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph
dataToLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph
dataToStepCenterLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToStepCenterLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph
dataToStepLeftLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToStepLeftLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph
dataToStepRightLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToStepRightLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph
dataValueRange	qcustomplot.cpp	/^QCPRange QCPErrorBars::dataValueRange(int index) const$/;"	f	class:QCPErrorBars
dataValueRange	qcustomplot.h	/^QCPRange QCPAbstractPlottable1D<DataType>::dataValueRange(int index) const$/;"	f	class:QCPAbstractPlottable1D
dateTimeFormat	qcustomplot.h	/^  QString dateTimeFormat() const { return mDateTimeFormat; }$/;"	f	class:QCPAxisTickerDateTime
dateTimeSpec	qcustomplot.h	/^  Qt::TimeSpec dateTimeSpec() const { return mDateTimeSpec; }$/;"	f	class:QCPAxisTickerDateTime
dateTimeToKey	qcustomplot.cpp	/^double QCPAxisTickerDateTime::dateTimeToKey(const QDate date)$/;"	f	class:QCPAxisTickerDateTime
dateTimeToKey	qcustomplot.cpp	/^double QCPAxisTickerDateTime::dateTimeToKey(const QDateTime dateTime)$/;"	f	class:QCPAxisTickerDateTime
deselectAll	qcustomplot.cpp	/^void QCustomPlot::deselectAll()$/;"	f	class:QCustomPlot
deselectEvent	qcustomplot.cpp	/^void QCPAbstractItem::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPAbstractItem
deselectEvent	qcustomplot.cpp	/^void QCPAbstractLegendItem::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPAbstractLegendItem
deselectEvent	qcustomplot.cpp	/^void QCPAbstractPlottable::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPAbstractPlottable
deselectEvent	qcustomplot.cpp	/^void QCPAxis::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPAxis
deselectEvent	qcustomplot.cpp	/^void QCPLayerable::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPLayerable
deselectEvent	qcustomplot.cpp	/^void QCPLegend::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPLegend
deselectEvent	qcustomplot.cpp	/^void QCPTextElement::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPTextElement
devicePixelRatio	qcustomplot.h	/^  double devicePixelRatio() const { return mDevicePixelRatio; }$/;"	f	class:QCPAbstractPaintBuffer
distanceSquaredToLine	qcustomplot.cpp	/^double QCPVector2D::distanceSquaredToLine(const QCPVector2D &start, const QCPVector2D &end) const$/;"	f	class:QCPVector2D
distanceSquaredToLine	qcustomplot.cpp	/^double QCPVector2D::distanceSquaredToLine(const QLineF &line) const$/;"	f	class:QCPVector2D
distanceToStraightLine	qcustomplot.cpp	/^double QCPVector2D::distanceToStraightLine(const QCPVector2D &base, const QCPVector2D &direction) const$/;"	f	class:QCPVector2D
donePainting	qcustomplot.cpp	/^void QCPPaintBufferGlFbo::donePainting()$/;"	f	class:QCPPaintBufferGlFbo
donePainting	qcustomplot.h	/^  virtual void donePainting() {}$/;"	f	class:QCPAbstractPaintBuffer
dot	qcustomplot.h	/^  double dot(const QCPVector2D &vec) const { return mX*vec.mX+mY*vec.mY; }$/;"	f	class:QCPVector2D
draw	qcustomplot.cpp	/^void QCPAxis::draw(QCPPainter *painter)$/;"	f	class:QCPAxis
draw	qcustomplot.cpp	/^void QCPAxisPainterPrivate::draw(QCPPainter *painter)$/;"	f	class:QCPAxisPainterPrivate
draw	qcustomplot.cpp	/^void QCPAxisRect::draw(QCPPainter *painter)$/;"	f	class:QCPAxisRect
draw	qcustomplot.cpp	/^void QCPBars::draw(QCPPainter *painter)$/;"	f	class:QCPBars
draw	qcustomplot.cpp	/^void QCPColorMap::draw(QCPPainter *painter)$/;"	f	class:QCPColorMap
draw	qcustomplot.cpp	/^void QCPColorScaleAxisRectPrivate::draw(QCPPainter *painter)$/;"	f	class:QCPColorScaleAxisRectPrivate
draw	qcustomplot.cpp	/^void QCPCurve::draw(QCPPainter *painter)$/;"	f	class:QCPCurve
draw	qcustomplot.cpp	/^void QCPErrorBars::draw(QCPPainter *painter)$/;"	f	class:QCPErrorBars
draw	qcustomplot.cpp	/^void QCPFinancial::draw(QCPPainter *painter)$/;"	f	class:QCPFinancial
draw	qcustomplot.cpp	/^void QCPGraph::draw(QCPPainter *painter)$/;"	f	class:QCPGraph
draw	qcustomplot.cpp	/^void QCPGrid::draw(QCPPainter *painter)$/;"	f	class:QCPGrid
draw	qcustomplot.cpp	/^void QCPItemBracket::draw(QCPPainter *painter)$/;"	f	class:QCPItemBracket
draw	qcustomplot.cpp	/^void QCPItemCurve::draw(QCPPainter *painter)$/;"	f	class:QCPItemCurve
draw	qcustomplot.cpp	/^void QCPItemEllipse::draw(QCPPainter *painter)$/;"	f	class:QCPItemEllipse
draw	qcustomplot.cpp	/^void QCPItemLine::draw(QCPPainter *painter)$/;"	f	class:QCPItemLine
draw	qcustomplot.cpp	/^void QCPItemPixmap::draw(QCPPainter *painter)$/;"	f	class:QCPItemPixmap
draw	qcustomplot.cpp	/^void QCPItemRect::draw(QCPPainter *painter)$/;"	f	class:QCPItemRect
draw	qcustomplot.cpp	/^void QCPItemStraightLine::draw(QCPPainter *painter)$/;"	f	class:QCPItemStraightLine
draw	qcustomplot.cpp	/^void QCPItemText::draw(QCPPainter *painter)$/;"	f	class:QCPItemText
draw	qcustomplot.cpp	/^void QCPItemTracer::draw(QCPPainter *painter)$/;"	f	class:QCPItemTracer
draw	qcustomplot.cpp	/^void QCPLayer::draw(QCPPainter *painter)$/;"	f	class:QCPLayer
draw	qcustomplot.cpp	/^void QCPLegend::draw(QCPPainter *painter)$/;"	f	class:QCPLegend
draw	qcustomplot.cpp	/^void QCPLineEnding::draw(QCPPainter *painter, const QCPVector2D &pos, const QCPVector2D &dir) const$/;"	f	class:QCPLineEnding
draw	qcustomplot.cpp	/^void QCPLineEnding::draw(QCPPainter *painter, const QCPVector2D &pos, double angle) const$/;"	f	class:QCPLineEnding
draw	qcustomplot.cpp	/^void QCPPaintBufferGlFbo::draw(QCPPainter *painter) const$/;"	f	class:QCPPaintBufferGlFbo
draw	qcustomplot.cpp	/^void QCPPaintBufferGlPbuffer::draw(QCPPainter *painter) const$/;"	f	class:QCPPaintBufferGlPbuffer
draw	qcustomplot.cpp	/^void QCPPaintBufferPixmap::draw(QCPPainter *painter) const$/;"	f	class:QCPPaintBufferPixmap
draw	qcustomplot.cpp	/^void QCPPlottableLegendItem::draw(QCPPainter *painter)$/;"	f	class:QCPPlottableLegendItem
draw	qcustomplot.cpp	/^void QCPSelectionRect::draw(QCPPainter *painter)$/;"	f	class:QCPSelectionRect
draw	qcustomplot.cpp	/^void QCPStatisticalBox::draw(QCPPainter *painter)$/;"	f	class:QCPStatisticalBox
draw	qcustomplot.cpp	/^void QCPTextElement::draw(QCPPainter *painter)$/;"	f	class:QCPTextElement
draw	qcustomplot.cpp	/^void QCustomPlot::draw(QCPPainter *painter)$/;"	f	class:QCustomPlot
drawBackground	qcustomplot.cpp	/^void QCPAxisRect::drawBackground(QCPPainter *painter)$/;"	f	class:QCPAxisRect
drawBackground	qcustomplot.cpp	/^void QCustomPlot::drawBackground(QCPPainter *painter)$/;"	f	class:QCustomPlot
drawBracket	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::drawBracket(QCPPainter *painter, int direction) const$/;"	f	class:QCPSelectionDecoratorBracket
drawCandlestickPlot	qcustomplot.cpp	/^void QCPFinancial::drawCandlestickPlot(QCPPainter *painter, const QCPFinancialDataContainer::const_iterator &begin, const QCPFinancialDataContainer::const_iterator &end, bool isSelected)$/;"	f	class:QCPFinancial
drawCurveLine	qcustomplot.cpp	/^void QCPCurve::drawCurveLine(QCPPainter *painter, const QVector<QPointF> &lines) const$/;"	f	class:QCPCurve
drawDecoration	qcustomplot.cpp	/^void QCPSelectionDecorator::drawDecoration(QCPPainter *painter, QCPDataSelection selection)$/;"	f	class:QCPSelectionDecorator
drawDecoration	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::drawDecoration(QCPPainter *painter, QCPDataSelection selection)$/;"	f	class:QCPSelectionDecoratorBracket
drawFill	qcustomplot.cpp	/^void QCPGraph::drawFill(QCPPainter *painter, QVector<QPointF> *lines) const$/;"	f	class:QCPGraph
drawGridLines	qcustomplot.cpp	/^void QCPGrid::drawGridLines(QCPPainter *painter) const$/;"	f	class:QCPGrid
drawImpulsePlot	qcustomplot.cpp	/^void QCPGraph::drawImpulsePlot(QCPPainter *painter, const QVector<QPointF> &lines) const$/;"	f	class:QCPGraph
drawLegendIcon	qcustomplot.cpp	/^void QCPBars::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPBars
drawLegendIcon	qcustomplot.cpp	/^void QCPColorMap::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPColorMap
drawLegendIcon	qcustomplot.cpp	/^void QCPCurve::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPCurve
drawLegendIcon	qcustomplot.cpp	/^void QCPErrorBars::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPErrorBars
drawLegendIcon	qcustomplot.cpp	/^void QCPFinancial::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPFinancial
drawLegendIcon	qcustomplot.cpp	/^void QCPGraph::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPGraph
drawLegendIcon	qcustomplot.cpp	/^void QCPStatisticalBox::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPStatisticalBox
drawLine	qcustomplot.cpp	/^void QCPPainter::drawLine(const QLineF &line)$/;"	f	class:QCPPainter
drawLine	qcustomplot.h	/^  void drawLine(const QPointF &p1, const QPointF &p2) {drawLine(QLineF(p1, p2));}$/;"	f	class:QCPPainter
drawLinePlot	qcustomplot.cpp	/^void QCPGraph::drawLinePlot(QCPPainter *painter, const QVector<QPointF> &lines) const$/;"	f	class:QCPGraph
drawOhlcPlot	qcustomplot.cpp	/^void QCPFinancial::drawOhlcPlot(QCPPainter *painter, const QCPFinancialDataContainer::const_iterator &begin, const QCPFinancialDataContainer::const_iterator &end, bool isSelected)$/;"	f	class:QCPFinancial
drawPolyline	qcustomplot.h	/^void QCPAbstractPlottable1D<DataType>::drawPolyline(QCPPainter *painter, const QVector<QPointF> &lineData) const$/;"	f	class:QCPAbstractPlottable1D
drawScatterPlot	qcustomplot.cpp	/^void QCPCurve::drawScatterPlot(QCPPainter *painter, const QVector<QPointF> &points, const QCPScatterStyle &style) const$/;"	f	class:QCPCurve
drawScatterPlot	qcustomplot.cpp	/^void QCPGraph::drawScatterPlot(QCPPainter *painter, const QVector<QPointF> &scatters, const QCPScatterStyle &style) const$/;"	f	class:QCPGraph
drawShape	qcustomplot.cpp	/^void QCPScatterStyle::drawShape(QCPPainter *painter, const QPointF &pos) const$/;"	f	class:QCPScatterStyle
drawShape	qcustomplot.cpp	/^void QCPScatterStyle::drawShape(QCPPainter *painter, double x, double y) const$/;"	f	class:QCPScatterStyle
drawStatisticalBox	qcustomplot.cpp	/^void QCPStatisticalBox::drawStatisticalBox(QCPPainter *painter, QCPStatisticalBoxDataContainer::const_iterator it, const QCPScatterStyle &outlierStyle) const$/;"	f	class:QCPStatisticalBox
drawSubGridLines	qcustomplot.cpp	/^void QCPGrid::drawSubGridLines(QCPPainter *painter) const$/;"	f	class:QCPGrid
drawTickLabel	qcustomplot.cpp	/^void QCPAxisPainterPrivate::drawTickLabel(QCPPainter *painter, double x, double y, const TickLabelData &labelData) const$/;"	f	class:QCPAxisPainterPrivate
drawToPaintBuffer	qcustomplot.cpp	/^void QCPLayer::drawToPaintBuffer()$/;"	f	class:QCPLayer
drawing	mainwindow.h	/^    int drawing = 0;$/;"	m	class:MainWindow
dsNone	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	e	enum:QCPAxisTickerDateTime::DateStrategy
dsUniformDayInMonth	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	e	enum:QCPAxisTickerDateTime::DateStrategy
dsUniformTimeInDay	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	e	enum:QCPAxisTickerDateTime::DateStrategy
element	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutGrid::element(int row, int column) const$/;"	f	class:QCPLayoutGrid
elementAt	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutGrid::elementAt(int index) const$/;"	f	class:QCPLayoutGrid
elementAt	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutInset::elementAt(int index) const$/;"	f	class:QCPLayoutInset
elementCount	qcustomplot.cpp	/^int QCPLayoutInset::elementCount() const$/;"	f	class:QCPLayoutInset
elements	qcustomplot.cpp	/^QList<QCPLayoutElement*> QCPAxisRect::elements(bool recursive) const$/;"	f	class:QCPAxisRect
elements	qcustomplot.cpp	/^QList<QCPLayoutElement*> QCPLayout::elements(bool recursive) const$/;"	f	class:QCPLayout
elements	qcustomplot.cpp	/^QList<QCPLayoutElement*> QCPLayoutElement::elements(bool recursive) const$/;"	f	class:QCPLayoutElement
elements	qcustomplot.cpp	/^QList<QCPLayoutElement*> QCPLayoutGrid::elements(bool recursive) const$/;"	f	class:QCPLayoutGrid
elements	qcustomplot.h	/^  QList<QCPLayoutElement*> elements(QCP::MarginSide side) const { return mChildren.value(side); }$/;"	f	class:QCPMarginGroup
end	qcustomplot.h	/^  QCPItemPosition * const end;$/;"	m	class:QCPItemCurve
end	qcustomplot.h	/^  QCPItemPosition * const end;$/;"	m	class:QCPItemLine
end	qcustomplot.h	/^  int end() const { return mEnd; }$/;"	f	class:QCPDataRange
end	qcustomplot.h	/^  iterator end() { return mData.end(); }$/;"	f	class:QCPDataContainer
endDir	qcustomplot.h	/^  QCPItemPosition * const endDir;$/;"	m	class:QCPItemCurve
endSelection	qcustomplot.cpp	/^void QCPSelectionRect::endSelection(QMouseEvent *event)$/;"	f	class:QCPSelectionRect
enforceType	qcustomplot.cpp	/^void QCPDataSelection::enforceType(QCP::SelectionType type)$/;"	f	class:QCPDataSelection
epAllowCosmetic	qcustomplot.h	/^                 ,epAllowCosmetic \/\/\/< Cosmetic pens are exported normally (e.g. in PDF exports, cosmetic pens always appear as 1 pixel on screen, independent of viewer zoom level)$/;"	e	enum:QCP::ExportPen
epNoCosmetic	qcustomplot.h	/^enum ExportPen { epNoCosmetic     \/\/\/< Cosmetic pens are converted to pens with pixel width 1 when exporting$/;"	e	enum:QCP::ExportPen
errorBarVisible	qcustomplot.cpp	/^bool QCPErrorBars::errorBarVisible(int index) const$/;"	f	class:QCPErrorBars
errorMinus	qcustomplot.h	/^  double errorMinus, errorPlus;$/;"	m	class:QCPErrorBarsData
errorPlus	qcustomplot.h	/^  double errorMinus, errorPlus;$/;"	m	class:QCPErrorBarsData
errorType	qcustomplot.h	/^  ErrorType errorType() const { return mErrorType; }$/;"	f	class:QCPErrorBars
esBar	qcustomplot.h	/^                     ,esBar          \/\/\/< A bar perpendicular to the line$/;"	e	enum:QCPLineEnding::EndingStyle
esDiamond	qcustomplot.h	/^                     ,esDiamond      \/\/\/< A filled diamond (45 degrees rotated square)$/;"	e	enum:QCPLineEnding::EndingStyle
esDisc	qcustomplot.h	/^                     ,esDisc         \/\/\/< A filled circle$/;"	e	enum:QCPLineEnding::EndingStyle
esFlatArrow	qcustomplot.h	/^                     ,esFlatArrow    \/\/\/< A filled arrow head with a straight\/flat back (a triangle)$/;"	e	enum:QCPLineEnding::EndingStyle
esHalfBar	qcustomplot.h	/^                     ,esHalfBar      \/\/\/< A bar perpendicular to the line, pointing out to only one side (to which side can be changed with \\ref setInverted)$/;"	e	enum:QCPLineEnding::EndingStyle
esLineArrow	qcustomplot.h	/^                     ,esLineArrow    \/\/\/< A non-filled arrow head with open back$/;"	e	enum:QCPLineEnding::EndingStyle
esNone	qcustomplot.h	/^  enum EndingStyle { esNone          \/\/\/< No ending decoration$/;"	e	enum:QCPLineEnding::EndingStyle
esSkewedBar	qcustomplot.h	/^                     ,esSkewedBar    \/\/\/< A bar that is skewed (skew controllable via \\ref setLength)$/;"	e	enum:QCPLineEnding::EndingStyle
esSpikeArrow	qcustomplot.h	/^                     ,esSpikeArrow   \/\/\/< A filled arrow head with an indented back$/;"	e	enum:QCPLineEnding::EndingStyle
esSquare	qcustomplot.h	/^                     ,esSquare       \/\/\/< A filled square$/;"	e	enum:QCPLineEnding::EndingStyle
etKeyError	qcustomplot.h	/^  enum ErrorType { etKeyError    \/\/\/< The errors are for the key dimension (bars appear parallel to the key axis)$/;"	e	enum:QCPErrorBars::ErrorType
etValueError	qcustomplot.h	/^                   ,etValueError \/\/\/< The errors are for the value dimension (bars appear parallel to the value axis)$/;"	e	enum:QCPErrorBars::ErrorType
expBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
expFont	qcustomplot.h	/^    QFont baseFont, expFont;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
expPart	qcustomplot.h	/^    QString basePart, expPart, suffixPart;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
expand	qcustomplot.cpp	/^void QCPRange::expand(const QCPRange &otherRange)$/;"	f	class:QCPRange
expand	qcustomplot.cpp	/^void QCPRange::expand(double includeCoord)$/;"	f	class:QCPRange
expandTo	qcustomplot.cpp	/^void QCPLayoutGrid::expandTo(int newRowCount, int newColumnCount)$/;"	f	class:QCPLayoutGrid
expanded	qcustomplot.cpp	/^QCPDataRange QCPDataRange::expanded(const QCPDataRange &other) const$/;"	f	class:QCPDataRange
expanded	qcustomplot.cpp	/^QCPRange QCPRange::expanded(const QCPRange &otherRange) const$/;"	f	class:QCPRange
expanded	qcustomplot.cpp	/^QCPRange QCPRange::expanded(double includeCoord) const$/;"	f	class:QCPRange
fieldWidth	qcustomplot.h	/^  int fieldWidth(TimeUnit unit) const { return mFieldWidth.value(unit); }$/;"	f	class:QCPAxisTickerTime
fill	qcustomplot.cpp	/^void QCPColorMapData::fill(double z)$/;"	f	class:QCPColorMapData
fillAlpha	qcustomplot.cpp	/^void QCPColorMapData::fillAlpha(unsigned char alpha)$/;"	f	class:QCPColorMapData
fillOrder	qcustomplot.h	/^  FillOrder fillOrder() const { return mFillOrder; }$/;"	f	class:QCPLayoutGrid
findBegin	qcustomplot.cpp	/^int QCPErrorBars::findBegin(double sortKey, bool expandedRange) const$/;"	f	class:QCPErrorBars
findBegin	qcustomplot.h	/^int QCPAbstractPlottable1D<DataType>::findBegin(double sortKey, bool expandedRange) const$/;"	f	class:QCPAbstractPlottable1D
findBegin	qcustomplot.h	/^typename QCPDataContainer<DataType>::const_iterator QCPDataContainer<DataType>::findBegin(double sortKey, bool expandedRange) const$/;"	f	class:QCPDataContainer
findEnd	qcustomplot.cpp	/^int QCPErrorBars::findEnd(double sortKey, bool expandedRange) const$/;"	f	class:QCPErrorBars
findEnd	qcustomplot.h	/^int QCPAbstractPlottable1D<DataType>::findEnd(double sortKey, bool expandedRange) const$/;"	f	class:QCPAbstractPlottable1D
findEnd	qcustomplot.h	/^typename QCPDataContainer<DataType>::const_iterator QCPDataContainer<DataType>::findEnd(double sortKey, bool expandedRange) const$/;"	f	class:QCPDataContainer
findIndexAboveX	qcustomplot.cpp	/^int QCPGraph::findIndexAboveX(const QVector<QPointF> *data, double x) const$/;"	f	class:QCPGraph
findIndexAboveY	qcustomplot.cpp	/^int QCPGraph::findIndexAboveY(const QVector<QPointF> *data, double y) const$/;"	f	class:QCPGraph
findIndexBelowX	qcustomplot.cpp	/^int QCPGraph::findIndexBelowX(const QVector<QPointF> *data, double x) const$/;"	f	class:QCPGraph
findIndexBelowY	qcustomplot.cpp	/^int QCPGraph::findIndexBelowY(const QVector<QPointF> *data, double y) const$/;"	f	class:QCPGraph
foColumnsFirst	qcustomplot.h	/^                  ,foColumnsFirst \/\/\/< Columns are filled first, and a new element is wrapped to the next row if the column count would exceed \\ref setWrap.$/;"	e	enum:QCPLayoutGrid::FillOrder
foRowsFirst	qcustomplot.h	/^  enum FillOrder { foRowsFirst    \/\/\/< Rows are filled first, and a new element is wrapped to the next column if the row count would exceed \\ref setWrap.$/;"	e	enum:QCPLayoutGrid::FillOrder
font	qcustomplot.h	/^  QFont font() const { return mFont; }$/;"	f	class:QCPAbstractLegendItem
font	qcustomplot.h	/^  QFont font() const { return mFont; }$/;"	f	class:QCPItemText
font	qcustomplot.h	/^  QFont font() const { return mFont; }$/;"	f	class:QCPLegend
font	qcustomplot.h	/^  QFont font() const { return mFont; }$/;"	f	class:QCPTextElement
fractionStyle	qcustomplot.h	/^  FractionStyle fractionStyle() const { return mFractionStyle; }$/;"	f	class:QCPAxisTickerPi
fractionToString	qcustomplot.cpp	/^QString QCPAxisTickerPi::fractionToString(int numerator, int denominator) const$/;"	f	class:QCPAxisTickerPi
freeOpenGl	qcustomplot.cpp	/^void QCustomPlot::freeOpenGl()$/;"	f	class:QCustomPlot
fromSortKey	qcustomplot.h	/^  inline static QCPBarsData fromSortKey(double sortKey) { return QCPBarsData(sortKey, 0); }$/;"	f	class:QCPBarsData
fromSortKey	qcustomplot.h	/^  inline static QCPCurveData fromSortKey(double sortKey) { return QCPCurveData(sortKey, 0, 0); }$/;"	f	class:QCPCurveData
fromSortKey	qcustomplot.h	/^  inline static QCPFinancialData fromSortKey(double sortKey) { return QCPFinancialData(sortKey, 0, 0, 0, 0); }$/;"	f	class:QCPFinancialData
fromSortKey	qcustomplot.h	/^  inline static QCPGraphData fromSortKey(double sortKey) { return QCPGraphData(sortKey, 0); }$/;"	f	class:QCPGraphData
fromSortKey	qcustomplot.h	/^  inline static QCPStatisticalBoxData fromSortKey(double sortKey) { return QCPStatisticalBoxData(sortKey, 0, 0, 0, 0, 0); }$/;"	f	class:QCPStatisticalBoxData
fsAsciiFractions	qcustomplot.h	/^                       ,fsAsciiFractions   \/\/\/< Fractions are written as rationals using ASCII characters only, e.g. "1\/4" or "1\/8"$/;"	e	enum:QCPAxisTickerPi::FractionStyle
fsFloatingPoint	qcustomplot.h	/^  enum FractionStyle { fsFloatingPoint     \/\/\/< Fractions are displayed as regular decimal floating point numbers, e.g. "0.25" or "0.125".$/;"	e	enum:QCPAxisTickerPi::FractionStyle
fsUnicodeFractions	qcustomplot.h	/^                       ,fsUnicodeFractions \/\/\/< Fractions are written using sub- and superscript UTF-8 digits and the fraction symbol.$/;"	e	enum:QCPAxisTickerPi::FractionStyle
generate	qcustomplot.cpp	/^void QCPAxisTicker::generate(const QCPRange &range, const QLocale &locale, QChar formatChar, int precision, QVector<double> &ticks, QVector<double> *subTicks, QVector<QString> *tickLabels)$/;"	f	class:QCPAxisTicker
generateLabelParameterHash	qcustomplot.cpp	/^QByteArray QCPAxisPainterPrivate::generateLabelParameterHash() const$/;"	f	class:QCPAxisPainterPrivate
getBarRect	qcustomplot.cpp	/^QRectF QCPBars::getBarRect(double key, double value) const$/;"	f	class:QCPBars
getBasePen	qcustomplot.cpp	/^QPen QCPAxis::getBasePen() const$/;"	f	class:QCPAxis
getBorderPen	qcustomplot.cpp	/^QPen QCPLegend::getBorderPen() const$/;"	f	class:QCPLegend
getBrush	qcustomplot.cpp	/^QBrush QCPLegend::getBrush() const$/;"	f	class:QCPLegend
getChannelFillPolygon	qcustomplot.cpp	/^const QPolygonF QCPGraph::getChannelFillPolygon(const QVector<QPointF> *thisData, QCPDataRange thisSegment, const QVector<QPointF> *otherData, QCPDataRange otherSegment) const$/;"	f	class:QCPGraph
getCurveLines	qcustomplot.cpp	/^void QCPCurve::getCurveLines(QVector<QPointF> *lines, const QCPDataRange &dataRange, double penWidth) const$/;"	f	class:QCPCurve
getDataSegments	qcustomplot.cpp	/^void QCPErrorBars::getDataSegments(QList<QCPDataRange> &selectedSegments, QList<QCPDataRange> &unselectedSegments) const$/;"	f	class:QCPErrorBars
getDataSegments	qcustomplot.h	/^void QCPAbstractPlottable1D<DataType>::getDataSegments(QList<QCPDataRange> &selectedSegments, QList<QCPDataRange> &unselectedSegments) const$/;"	f	class:QCPAbstractPlottable1D
getErrorBarLines	qcustomplot.cpp	/^void QCPErrorBars::getErrorBarLines(QCPErrorBarsDataContainer::const_iterator it, QVector<QLineF> &backbones, QVector<QLineF> &whiskers) const$/;"	f	class:QCPErrorBars
getFillBasePoint	qcustomplot.cpp	/^QPointF QCPGraph::getFillBasePoint(QPointF matchingDataPoint) const$/;"	f	class:QCPGraph
getFillPolygon	qcustomplot.cpp	/^const QPolygonF QCPGraph::getFillPolygon(const QVector<QPointF> *lineData, QCPDataRange segment) const$/;"	f	class:QCPGraph
getFinalMaximumOuterSize	qcustomplot.cpp	/^QSize QCPLayout::getFinalMaximumOuterSize(const QCPLayoutElement *el)$/;"	f	class:QCPLayout
getFinalMinimumOuterSize	qcustomplot.cpp	/^QSize QCPLayout::getFinalMinimumOuterSize(const QCPLayoutElement *el)$/;"	f	class:QCPLayout
getFinalRect	qcustomplot.cpp	/^QRect QCPItemPixmap::getFinalRect(bool *flippedHorz, bool *flippedVert) const$/;"	f	class:QCPItemPixmap
getFinalScatterStyle	qcustomplot.cpp	/^QCPScatterStyle QCPSelectionDecorator::getFinalScatterStyle(const QCPScatterStyle &unselectedStyle) const$/;"	f	class:QCPSelectionDecorator
getFont	qcustomplot.cpp	/^QFont QCPPlottableLegendItem::getFont() const$/;"	f	class:QCPPlottableLegendItem
getIconBorderPen	qcustomplot.cpp	/^QPen QCPPlottableLegendItem::getIconBorderPen() const$/;"	f	class:QCPPlottableLegendItem
getKeyRange	qcustomplot.cpp	/^QCPRange QCPBars::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPBars
getKeyRange	qcustomplot.cpp	/^QCPRange QCPColorMap::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPColorMap
getKeyRange	qcustomplot.cpp	/^QCPRange QCPCurve::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPCurve
getKeyRange	qcustomplot.cpp	/^QCPRange QCPErrorBars::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPErrorBars
getKeyRange	qcustomplot.cpp	/^QCPRange QCPFinancial::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPFinancial
getKeyRange	qcustomplot.cpp	/^QCPRange QCPGraph::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPGraph
getKeyRange	qcustomplot.cpp	/^QCPRange QCPStatisticalBox::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPStatisticalBox
getLabelColor	qcustomplot.cpp	/^QColor QCPAxis::getLabelColor() const$/;"	f	class:QCPAxis
getLabelFont	qcustomplot.cpp	/^QFont QCPAxis::getLabelFont() const$/;"	f	class:QCPAxis
getLines	qcustomplot.cpp	/^void QCPGraph::getLines(QVector<QPointF> *lines, const QCPDataRange &dataRange) const$/;"	f	class:QCPGraph
getMantissa	qcustomplot.cpp	/^double QCPAxisTicker::getMantissa(double input, double *magnitude) const$/;"	f	class:QCPAxisTicker
getMarginValue	qcustomplot.h	/^inline int getMarginValue(const QMargins &margins, QCP::MarginSide side)$/;"	f	namespace:QCP
getMaxTickLabelSize	qcustomplot.cpp	/^void QCPAxisPainterPrivate::getMaxTickLabelSize(const QFont &font, const QString &text,  QSize *tickLabelsSize) const$/;"	f	class:QCPAxisPainterPrivate
getMaximumRowColSizes	qcustomplot.cpp	/^void QCPLayoutGrid::getMaximumRowColSizes(QVector<int> *maxColWidths, QVector<int> *maxRowHeights) const$/;"	f	class:QCPLayoutGrid
getMinimumRowColSizes	qcustomplot.cpp	/^void QCPLayoutGrid::getMinimumRowColSizes(QVector<int> *minColWidths, QVector<int> *minRowHeights) const$/;"	f	class:QCPLayoutGrid
getNonNanSegments	qcustomplot.cpp	/^QVector<QCPDataRange> QCPGraph::getNonNanSegments(const QVector<QPointF> *lineData, Qt::Orientation keyOrientation) const$/;"	f	class:QCPGraph
getOptimizedCornerPoints	qcustomplot.cpp	/^QVector<QPointF> QCPCurve::getOptimizedCornerPoints(int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const$/;"	f	class:QCPCurve
getOptimizedLineData	qcustomplot.cpp	/^void QCPGraph::getOptimizedLineData(QVector<QCPGraphData> *lineData, const QCPGraphDataContainer::const_iterator &begin, const QCPGraphDataContainer::const_iterator &end) const$/;"	f	class:QCPGraph
getOptimizedPoint	qcustomplot.cpp	/^QPointF QCPCurve::getOptimizedPoint(int otherRegion, double otherKey, double otherValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const$/;"	f	class:QCPCurve
getOptimizedScatterData	qcustomplot.cpp	/^void QCPGraph::getOptimizedScatterData(QVector<QCPGraphData> *scatterData, QCPGraphDataContainer::const_iterator begin, QCPGraphDataContainer::const_iterator end) const$/;"	f	class:QCPGraph
getOverlappingSegments	qcustomplot.cpp	/^QVector<QPair<QCPDataRange, QCPDataRange> > QCPGraph::getOverlappingSegments(QVector<QCPDataRange> thisSegments, const QVector<QPointF> *thisData, QVector<QCPDataRange> otherSegments, const QVector<QPointF> *otherData) const$/;"	f	class:QCPGraph
getPartAt	qcustomplot.cpp	/^QCPAxis::SelectablePart QCPAxis::getPartAt(const QPointF &pos) const$/;"	f	class:QCPAxis
getPixelCoordinates	qcustomplot.cpp	/^QPointF QCPSelectionDecoratorBracket::getPixelCoordinates(const QCPPlottableInterface1D *interface1d, int dataIndex) const$/;"	f	class:QCPSelectionDecoratorBracket
getPixelSpacing	qcustomplot.cpp	/^double QCPBarsGroup::getPixelSpacing(const QCPBars *bars, double keyCoord)$/;"	f	class:QCPBarsGroup
getPixelWidth	qcustomplot.cpp	/^double QCPFinancial::getPixelWidth(double key, double keyPixel) const$/;"	f	class:QCPFinancial
getPixelWidth	qcustomplot.cpp	/^void QCPBars::getPixelWidth(double key, double &lower, double &upper) const$/;"	f	class:QCPBars
getQuartileBox	qcustomplot.cpp	/^QRectF QCPStatisticalBox::getQuartileBox(QCPStatisticalBoxDataContainer::const_iterator it) const$/;"	f	class:QCPStatisticalBox
getRectClippedLine	qcustomplot.cpp	/^QLineF QCPItemLine::getRectClippedLine(const QCPVector2D &start, const QCPVector2D &end, const QRect &rect) const$/;"	f	class:QCPItemLine
getRectClippedStraightLine	qcustomplot.cpp	/^QLineF QCPItemStraightLine::getRectClippedStraightLine(const QCPVector2D &base, const QCPVector2D &vec, const QRect &rect) const$/;"	f	class:QCPItemStraightLine
getRegion	qcustomplot.cpp	/^int QCPCurve::getRegion(double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const$/;"	f	class:QCPCurve
getScatters	qcustomplot.cpp	/^void QCPCurve::getScatters(QVector<QPointF> *scatters, const QCPDataRange &dataRange, double scatterWidth) const$/;"	f	class:QCPCurve
getScatters	qcustomplot.cpp	/^void QCPGraph::getScatters(QVector<QPointF> *scatters, const QCPDataRange &dataRange) const$/;"	f	class:QCPGraph
getSectionSizes	qcustomplot.cpp	/^QVector<int> QCPLayout::getSectionSizes(QVector<int> maxSizes, QVector<int> minSizes, QVector<double> stretchFactors, int totalSize) const$/;"	f	class:QCPLayout
getStackedBaseValue	qcustomplot.cpp	/^double QCPBars::getStackedBaseValue(double key, bool positive) const$/;"	f	class:QCPBars
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTicker::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTicker
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerDateTime::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerDateTime
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerLog::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerLog
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerPi::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerPi
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerText::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerText
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerTime::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerTime
getSubTickPen	qcustomplot.cpp	/^QPen QCPAxis::getSubTickPen() const$/;"	f	class:QCPAxis
getTangentAngle	qcustomplot.cpp	/^double QCPSelectionDecoratorBracket::getTangentAngle(const QCPPlottableInterface1D *interface1d, int dataIndex, int direction) const$/;"	f	class:QCPSelectionDecoratorBracket
getTextColor	qcustomplot.cpp	/^QColor QCPPlottableLegendItem::getTextColor() const$/;"	f	class:QCPPlottableLegendItem
getTextDrawPoint	qcustomplot.cpp	/^QPointF QCPItemText::getTextDrawPoint(const QPointF &pos, const QRectF &rect, Qt::Alignment positionAlignment) const$/;"	f	class:QCPItemText
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTicker::getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision)$/;"	f	class:QCPAxisTicker
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTickerDateTime::getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision)$/;"	f	class:QCPAxisTickerDateTime
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTickerPi::getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision)$/;"	f	class:QCPAxisTickerPi
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTickerText::getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision)$/;"	f	class:QCPAxisTickerText
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTickerTime::getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precision)$/;"	f	class:QCPAxisTickerTime
getTickLabelColor	qcustomplot.cpp	/^QColor QCPAxis::getTickLabelColor() const$/;"	f	class:QCPAxis
getTickLabelData	qcustomplot.cpp	/^QCPAxisPainterPrivate::TickLabelData QCPAxisPainterPrivate::getTickLabelData(const QFont &font, const QString &text) const$/;"	f	class:QCPAxisPainterPrivate
getTickLabelDrawOffset	qcustomplot.cpp	/^QPointF QCPAxisPainterPrivate::getTickLabelDrawOffset(const TickLabelData &labelData) const$/;"	f	class:QCPAxisPainterPrivate
getTickLabelFont	qcustomplot.cpp	/^QFont QCPAxis::getTickLabelFont() const$/;"	f	class:QCPAxis
getTickPen	qcustomplot.cpp	/^QPen QCPAxis::getTickPen() const$/;"	f	class:QCPAxis
getTickStep	qcustomplot.cpp	/^double QCPAxisTicker::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTicker
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerDateTime::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerDateTime
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerFixed::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerFixed
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerLog::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerLog
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerPi::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerPi
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerText::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerText
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerTime::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerTime
getTraverse	qcustomplot.cpp	/^bool QCPCurve::getTraverse(double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, QPointF &crossA, QPointF &crossB) const$/;"	f	class:QCPCurve
getTraverseCornerPoints	qcustomplot.cpp	/^void QCPCurve::getTraverseCornerPoints(int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, QVector<QPointF> &beforeTraverse, QVector<QPointF> &afterTraverse) const$/;"	f	class:QCPCurve
getValueRange	qcustomplot.cpp	/^QCPRange QCPBars::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange &inKeyRange) const$/;"	f	class:QCPBars
getValueRange	qcustomplot.cpp	/^QCPRange QCPColorMap::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange &inKeyRange) const$/;"	f	class:QCPColorMap
getValueRange	qcustomplot.cpp	/^QCPRange QCPCurve::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange &inKeyRange) const$/;"	f	class:QCPCurve
getValueRange	qcustomplot.cpp	/^QCPRange QCPErrorBars::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange &inKeyRange) const$/;"	f	class:QCPErrorBars
getValueRange	qcustomplot.cpp	/^QCPRange QCPFinancial::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange &inKeyRange) const$/;"	f	class:QCPFinancial
getValueRange	qcustomplot.cpp	/^QCPRange QCPGraph::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange &inKeyRange) const$/;"	f	class:QCPGraph
getValueRange	qcustomplot.cpp	/^QCPRange QCPStatisticalBox::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange &inKeyRange) const$/;"	f	class:QCPStatisticalBox
getVisibleDataBounds	qcustomplot.cpp	/^void QCPBars::getVisibleDataBounds(QCPBarsDataContainer::const_iterator &begin, QCPBarsDataContainer::const_iterator &end) const$/;"	f	class:QCPBars
getVisibleDataBounds	qcustomplot.cpp	/^void QCPErrorBars::getVisibleDataBounds(QCPErrorBarsDataContainer::const_iterator &begin, QCPErrorBarsDataContainer::const_iterator &end, const QCPDataRange &rangeRestriction) const$/;"	f	class:QCPErrorBars
getVisibleDataBounds	qcustomplot.cpp	/^void QCPFinancial::getVisibleDataBounds(QCPFinancialDataContainer::const_iterator &begin, QCPFinancialDataContainer::const_iterator &end) const$/;"	f	class:QCPFinancial
getVisibleDataBounds	qcustomplot.cpp	/^void QCPGraph::getVisibleDataBounds(QCPGraphDataContainer::const_iterator &begin, QCPGraphDataContainer::const_iterator &end, const QCPDataRange &rangeRestriction) const$/;"	f	class:QCPGraph
getVisibleDataBounds	qcustomplot.cpp	/^void QCPStatisticalBox::getVisibleDataBounds(QCPStatisticalBoxDataContainer::const_iterator &begin, QCPStatisticalBoxDataContainer::const_iterator &end) const$/;"	f	class:QCPStatisticalBox
getWhiskerBackboneLines	qcustomplot.cpp	/^QVector<QLineF> QCPStatisticalBox::getWhiskerBackboneLines(QCPStatisticalBoxDataContainer::const_iterator it) const$/;"	f	class:QCPStatisticalBox
getWhiskerBarLines	qcustomplot.cpp	/^QVector<QLineF> QCPStatisticalBox::getWhiskerBarLines(QCPStatisticalBoxDataContainer::const_iterator it) const$/;"	f	class:QCPStatisticalBox
gpCandy	qcustomplot.h	/^                        ,gpCandy     \/\/\/< Blue over pink to white$/;"	e	enum:QCPColorGradient::GradientPreset
gpCold	qcustomplot.h	/^                        ,gpCold      \/\/\/< Continuous lightness from black over icey colors to white (suited for non-biased data representation)$/;"	e	enum:QCPColorGradient::GradientPreset
gpGeography	qcustomplot.h	/^                        ,gpGeography \/\/\/< Colors suitable to represent different elevations on geographical maps$/;"	e	enum:QCPColorGradient::GradientPreset
gpGrayscale	qcustomplot.h	/^  enum GradientPreset { gpGrayscale  \/\/\/< Continuous lightness from black to white (suited for non-biased data representation)$/;"	e	enum:QCPColorGradient::GradientPreset
gpHot	qcustomplot.h	/^                        ,gpHot       \/\/\/< Continuous lightness from black over firey colors to white (suited for non-biased data representation)$/;"	e	enum:QCPColorGradient::GradientPreset
gpHues	qcustomplot.h	/^                        ,gpHues      \/\/\/< Full hue cycle, with highest and lowest color red (suitable for periodic data, such as angles and phases, see \\ref setPeriodic)$/;"	e	enum:QCPColorGradient::GradientPreset
gpIon	qcustomplot.h	/^                        ,gpIon       \/\/\/< Half hue spectrum from black over purple to blue and finally green (creates banding illusion but allows more precise magnitude estimates)$/;"	e	enum:QCPColorGradient::GradientPreset
gpJet	qcustomplot.h	/^                        ,gpJet       \/\/\/< Hue variation similar to a spectrum, often used in numerical visualization (creates banding illusion but allows more precise magnitude estimates)$/;"	e	enum:QCPColorGradient::GradientPreset
gpNight	qcustomplot.h	/^                        ,gpNight     \/\/\/< Continuous lightness from black over weak blueish colors to white (suited for non-biased data representation)$/;"	e	enum:QCPColorGradient::GradientPreset
gpPolar	qcustomplot.h	/^                        ,gpPolar     \/\/\/< Colors suitable to emphasize polarity around the center, with blue for negative, black in the middle and red for positive values$/;"	e	enum:QCPColorGradient::GradientPreset
gpSpectrum	qcustomplot.h	/^                        ,gpSpectrum  \/\/\/< An approximation of the visible light spectrum (creates banding illusion but allows more precise magnitude estimates)$/;"	e	enum:QCPColorGradient::GradientPreset
gpThermal	qcustomplot.h	/^                        ,gpThermal   \/\/\/< Colors suitable for thermal imaging, ranging from dark blue over purple to orange, yellow and white$/;"	e	enum:QCPColorGradient::GradientPreset
gradient	qcustomplot.h	/^  QCPColorGradient gradient() const { return mGradient; }$/;"	f	class:QCPColorMap
gradient	qcustomplot.h	/^  QCPColorGradient gradient() const { return mGradient; }$/;"	f	class:QCPColorScale
graph	qcustomplot.cpp	/^QCPGraph *QCustomPlot::graph() const$/;"	f	class:QCustomPlot
graph	qcustomplot.cpp	/^QCPGraph *QCustomPlot::graph(int index) const$/;"	f	class:QCustomPlot
graph	qcustomplot.h	/^  QCPGraph *graph() const { return mGraph; }$/;"	f	class:QCPItemTracer
graphCount	qcustomplot.cpp	/^int QCustomPlot::graphCount() const$/;"	f	class:QCustomPlot
graphKey	qcustomplot.h	/^  double graphKey() const { return mGraphKey; }$/;"	f	class:QCPItemTracer
graphs	qcustomplot.cpp	/^QList<QCPGraph*> QCPAxis::graphs() const$/;"	f	class:QCPAxis
graphs	qcustomplot.cpp	/^QList<QCPGraph*> QCPAxisRect::graphs() const$/;"	f	class:QCPAxisRect
grid	qcustomplot.h	/^  QCPGrid *grid() const { return mGrid; }$/;"	f	class:QCPAxis
hasAnchor	qcustomplot.cpp	/^bool QCPAbstractItem::hasAnchor(const QString &name) const$/;"	f	class:QCPAbstractItem
hasElement	qcustomplot.cpp	/^bool QCPLayoutGrid::hasElement(int row, int column)$/;"	f	class:QCPLayoutGrid
hasInvalidatedPaintBuffers	qcustomplot.cpp	/^bool QCustomPlot::hasInvalidatedPaintBuffers()$/;"	f	class:QCustomPlot
hasItem	qcustomplot.cpp	/^bool QCPLegend::hasItem(QCPAbstractLegendItem *item) const$/;"	f	class:QCPLegend
hasItem	qcustomplot.cpp	/^bool QCustomPlot::hasItem(QCPAbstractItem *item) const$/;"	f	class:QCustomPlot
hasItemWithPlottable	qcustomplot.cpp	/^bool QCPLegend::hasItemWithPlottable(const QCPAbstractPlottable *plottable) const$/;"	f	class:QCPLegend
hasPlottable	qcustomplot.cpp	/^bool QCustomPlot::hasPlottable(QCPAbstractPlottable *plottable) const$/;"	f	class:QCustomPlot
head	qcustomplot.h	/^  QCPLineEnding head() const { return mHead; }$/;"	f	class:QCPItemCurve
head	qcustomplot.h	/^  QCPLineEnding head() const { return mHead; }$/;"	f	class:QCPItemLine
height	qcustomplot.h	/^  int height() const { return mRect.height(); }$/;"	f	class:QCPAxisRect
high	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData
iMultiSelect	qcustomplot.h	/^                   ,iMultiSelect      = 0x004 \/\/\/< <tt>0x004<\/tt> The user can select multiple objects by holding the modifier set by \\ref QCustomPlot::setMultiSelectModifier while clicking$/;"	e	enum:QCP::Interaction
iRangeDrag	qcustomplot.h	/^enum Interaction { iRangeDrag         = 0x001 \/\/\/< <tt>0x001<\/tt> Axis ranges are draggable (see \\ref QCPAxisRect::setRangeDrag, \\ref QCPAxisRect::setRangeDragAxes)$/;"	e	enum:QCP::Interaction
iRangeZoom	qcustomplot.h	/^                   ,iRangeZoom        = 0x002 \/\/\/< <tt>0x002<\/tt> Axis ranges are zoomable with the mouse wheel (see \\ref QCPAxisRect::setRangeZoom, \\ref QCPAxisRect::setRangeZoomAxes)$/;"	e	enum:QCP::Interaction
iSelectAxes	qcustomplot.h	/^                   ,iSelectAxes       = 0x010 \/\/\/< <tt>0x010<\/tt> Axes are selectable (or parts of them, see QCPAxis::setSelectableParts)$/;"	e	enum:QCP::Interaction
iSelectItems	qcustomplot.h	/^                   ,iSelectItems      = 0x040 \/\/\/< <tt>0x040<\/tt> Items are selectable (Rectangles, Arrows, Textitems, etc. see \\ref QCPAbstractItem)$/;"	e	enum:QCP::Interaction
iSelectLegend	qcustomplot.h	/^                   ,iSelectLegend     = 0x020 \/\/\/< <tt>0x020<\/tt> Legends are selectable (or their child items, see QCPLegend::setSelectableParts)$/;"	e	enum:QCP::Interaction
iSelectOther	qcustomplot.h	/^                   ,iSelectOther      = 0x080 \/\/\/< <tt>0x080<\/tt> All other objects are selectable (e.g. your own derived layerables, other layout elements,...)$/;"	e	enum:QCP::Interaction
iSelectPlottables	qcustomplot.h	/^                   ,iSelectPlottables = 0x008 \/\/\/< <tt>0x008<\/tt> Plottables are selectable (e.g. graphs, curves, bars,... see QCPAbstractPlottable)$/;"	e	enum:QCP::Interaction
iconBorderPen	qcustomplot.h	/^  QPen iconBorderPen() const { return mIconBorderPen; }$/;"	f	class:QCPLegend
iconSize	qcustomplot.h	/^  QSize iconSize() const { return mIconSize; }$/;"	f	class:QCPLegend
iconTextPadding	qcustomplot.h	/^  int iconTextPadding() const { return mIconTextPadding; }$/;"	f	class:QCPLegend
index	qcustomplot.h	/^  int index() const { return mIndex; }$/;"	f	class:QCPLayer
indexToRowCol	qcustomplot.cpp	/^void QCPLayoutGrid::indexToRowCol(int index, int &row, int &column) const$/;"	f	class:QCPLayoutGrid
initializeParentPlot	qcustomplot.cpp	/^void QCPLayerable::initializeParentPlot(QCustomPlot *parentPlot)$/;"	f	class:QCPLayerable
insert	qcustomplot.cpp	/^void QCPBarsGroup::insert(int i, QCPBars *bars)$/;"	f	class:QCPBarsGroup
insertColumn	qcustomplot.cpp	/^void QCPLayoutGrid::insertColumn(int newIndex)$/;"	f	class:QCPLayoutGrid
insertRow	qcustomplot.cpp	/^void QCPLayoutGrid::insertRow(int newIndex)$/;"	f	class:QCPLayoutGrid
insetAlignment	qcustomplot.cpp	/^Qt::Alignment QCPLayoutInset::insetAlignment(int index) const$/;"	f	class:QCPLayoutInset
insetLayout	qcustomplot.h	/^  QCPLayoutInset *insetLayout() const { return mInsetLayout; }$/;"	f	class:QCPAxisRect
insetPlacement	qcustomplot.cpp	/^QCPLayoutInset::InsetPlacement QCPLayoutInset::insetPlacement(int index) const$/;"	f	class:QCPLayoutInset
insetRect	qcustomplot.cpp	/^QRectF QCPLayoutInset::insetRect(int index) const$/;"	f	class:QCPLayoutInset
interactions	qcustomplot.h	/^  const QCP::Interactions interactions() const { return mInteractions; }$/;"	f	class:QCustomPlot
interface1D	qcustomplot.h	/^  virtual QCPPlottableInterface1D *interface1D() { return 0; }$/;"	f	class:QCPAbstractPlottable
interpolate	qcustomplot.h	/^  bool interpolate() const { return mInterpolate; }$/;"	f	class:QCPColorMap
interpolating	qcustomplot.h	/^  bool interpolating() const { return mInterpolating; }$/;"	f	class:QCPItemTracer
intersection	qcustomplot.cpp	/^QCPDataRange QCPDataRange::intersection(const QCPDataRange &other) const$/;"	f	class:QCPDataRange
intersection	qcustomplot.cpp	/^QCPDataSelection QCPDataSelection::intersection(const QCPDataRange &other) const$/;"	f	class:QCPDataSelection
intersection	qcustomplot.cpp	/^QCPDataSelection QCPDataSelection::intersection(const QCPDataSelection &other) const$/;"	f	class:QCPDataSelection
intersects	qcustomplot.cpp	/^bool QCPDataRange::intersects(const QCPDataRange &other) const$/;"	f	class:QCPDataRange
invalidated	qcustomplot.h	/^  bool invalidated() const { return mInvalidated; }$/;"	f	class:QCPAbstractPaintBuffer
inverse	qcustomplot.cpp	/^QCPDataSelection QCPDataSelection::inverse(const QCPDataRange &outerRange) const$/;"	f	class:QCPDataSelection
inverted	qcustomplot.cpp	/^QCPColorGradient QCPColorGradient::inverted() const$/;"	f	class:QCPColorGradient
inverted	qcustomplot.h	/^  bool inverted() const { return mInverted; }$/;"	f	class:QCPLineEnding
ipBorderAligned	qcustomplot.h	/^                        ,ipBorderAligned  \/\/\/< The element is aligned to one of the layout sides, see \\ref setInsetAlignment$/;"	e	enum:QCPLayoutInset::InsetPlacement
ipFree	qcustomplot.h	/^  enum InsetPlacement { ipFree            \/\/\/< The element may be positioned\/sized arbitrarily, see \\ref setInsetRect$/;"	e	enum:QCPLayoutInset::InsetPlacement
isActive	qcustomplot.h	/^  bool isActive() const { return mActive; }$/;"	f	class:QCPSelectionRect
isEmpty	qcustomplot.cpp	/^bool QCPMarginGroup::isEmpty() const$/;"	f	class:QCPMarginGroup
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return length() == 0; }$/;"	f	class:QCPDataRange
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return mBars.isEmpty(); }$/;"	f	class:QCPBarsGroup
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return mDataRanges.isEmpty(); }$/;"	f	class:QCPDataSelection
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return mIsEmpty; }$/;"	f	class:QCPColorMapData
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return size() == 0; }$/;"	f	class:QCPDataContainer
isInvalidData	qcustomplot.h	/^inline bool isInvalidData(double value)$/;"	f	namespace:QCP
isInvalidData	qcustomplot.h	/^inline bool isInvalidData(double value1, double value2)$/;"	f	namespace:QCP
isNone	qcustomplot.h	/^  bool isNone() const { return mShape == ssNone; }$/;"	f	class:QCPScatterStyle
isNull	qcustomplot.h	/^  bool isNull() const { return qIsNull(mX) && qIsNull(mY); }$/;"	f	class:QCPVector2D
isPenDefined	qcustomplot.h	/^  bool isPenDefined() const { return mPenDefined; }$/;"	f	class:QCPScatterStyle
isValid	qcustomplot.h	/^  bool isValid() const { return (mEnd >= mBegin) && (mBegin >= 0); }$/;"	f	class:QCPDataRange
item	qcustomplot.cpp	/^QCPAbstractItem *QCustomPlot::item() const$/;"	f	class:QCustomPlot
item	qcustomplot.cpp	/^QCPAbstractItem *QCustomPlot::item(int index) const$/;"	f	class:QCustomPlot
item	qcustomplot.cpp	/^QCPAbstractLegendItem *QCPLegend::item(int index) const$/;"	f	class:QCPLegend
itemAt	qcustomplot.cpp	/^QCPAbstractItem *QCustomPlot::itemAt(const QPointF &pos, bool onlySelectable) const$/;"	f	class:QCustomPlot
itemCount	qcustomplot.cpp	/^int QCPLegend::itemCount() const$/;"	f	class:QCPLegend
itemCount	qcustomplot.cpp	/^int QCustomPlot::itemCount() const$/;"	f	class:QCustomPlot
itemWithPlottable	qcustomplot.cpp	/^QCPPlottableLegendItem *QCPLegend::itemWithPlottable(const QCPAbstractPlottable *plottable) const$/;"	f	class:QCPLegend
items	qcustomplot.cpp	/^QList<QCPAbstractItem *> QCPAxisRect::items() const$/;"	f	class:QCPAxisRect
items	qcustomplot.cpp	/^QList<QCPAbstractItem*> QCPAxis::items() const$/;"	f	class:QCPAxis
iterator	qcustomplot.h	/^  typedef typename QVector<DataType>::iterator iterator;$/;"	t	class:QCPDataContainer
key	qcustomplot.h	/^  double key() const { return mKey; }$/;"	f	class:QCPItemPosition
key	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData
key	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData
key	qcustomplot.h	/^  double key, value;$/;"	m	class:QCPBarsData
key	qcustomplot.h	/^  double key, value;$/;"	m	class:QCPGraphData
key	qcustomplot.h	/^  double t, key, value;$/;"	m	class:QCPCurveData
keyAxis	qcustomplot.h	/^  QCPAxis *keyAxis() const { return mKeyAxis.data(); }$/;"	f	class:QCPAbstractPlottable
keyAxis	qcustomplot.h	/^  QCPAxis *keyAxis() const { return mKeyAxis.data(); }$/;"	f	class:QCPItemPosition
keyPixelOffset	qcustomplot.cpp	/^double QCPBarsGroup::keyPixelOffset(const QCPBars *bars, double keyCoord)$/;"	f	class:QCPBarsGroup
keyPressEvent	qcustomplot.cpp	/^void QCPSelectionRect::keyPressEvent(QKeyEvent *event)$/;"	f	class:QCPSelectionRect
keyRange	qcustomplot.h	/^  QCPRange keyRange() const { return mKeyRange; }$/;"	f	class:QCPColorMapData
keyRange	qcustomplot.h	/^QCPRange QCPDataContainer<DataType>::keyRange(bool &foundRange, QCP::SignDomain signDomain)$/;"	f	class:QCPDataContainer
keySize	qcustomplot.h	/^  int keySize() const { return mKeySize; }$/;"	f	class:QCPColorMapData
keyToDateTime	qcustomplot.cpp	/^QDateTime QCPAxisTickerDateTime::keyToDateTime(double key)$/;"	f	class:QCPAxisTickerDateTime
label	qcustomplot.cpp	/^QString QCPColorScale::label() const$/;"	f	class:QCPColorScale
label	qcustomplot.h	/^  QString label() const { return mLabel; }$/;"	f	class:QCPAxis
label	qcustomplot.h	/^  QString label;$/;"	m	class:QCPAxisPainterPrivate
labelColor	qcustomplot.h	/^  QColor labelColor() const { return mLabelColor; }$/;"	f	class:QCPAxis
labelColor	qcustomplot.h	/^  QColor labelColor;$/;"	m	class:QCPAxisPainterPrivate
labelFont	qcustomplot.h	/^  QFont labelFont() const { return mLabelFont; }$/;"	f	class:QCPAxis
labelFont	qcustomplot.h	/^  QFont labelFont;$/;"	m	class:QCPAxisPainterPrivate
labelPadding	qcustomplot.cpp	/^int QCPAxis::labelPadding() const$/;"	f	class:QCPAxis
labelPadding	qcustomplot.h	/^  int labelPadding; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
labelSelectionBox	qcustomplot.h	/^  QRect labelSelectionBox() const { return mLabelSelectionBox; }$/;"	f	class:QCPAxisPainterPrivate
layer	qcustomplot.cpp	/^QCPLayer *QCustomPlot::layer(const QString &name) const$/;"	f	class:QCustomPlot
layer	qcustomplot.cpp	/^QCPLayer *QCustomPlot::layer(int index) const$/;"	f	class:QCustomPlot
layer	qcustomplot.h	/^  QCPLayer *layer() const { return mLayer; }$/;"	f	class:QCPLayerable
layerCount	qcustomplot.cpp	/^int QCustomPlot::layerCount() const$/;"	f	class:QCustomPlot
layerableAt	qcustomplot.cpp	/^QCPLayerable *QCustomPlot::layerableAt(const QPointF &pos, bool onlySelectable, QVariant *selectionDetails) const$/;"	f	class:QCustomPlot
layerableListAt	qcustomplot.cpp	/^QList<QCPLayerable*> QCustomPlot::layerableListAt(const QPointF &pos, bool onlySelectable, QList<QVariant> *selectionDetails) const$/;"	f	class:QCustomPlot
layout	qcustomplot.h	/^  QCPLayout *layout() const { return mParentLayout; }$/;"	f	class:QCPLayoutElement
layoutChanged	qcustomplot.cpp	/^void QCPAxisRect::layoutChanged()$/;"	f	class:QCPAxisRect
layoutChanged	qcustomplot.cpp	/^void QCPLayoutElement::layoutChanged()$/;"	f	class:QCPLayoutElement
layoutElementAt	qcustomplot.cpp	/^QCPLayoutElement *QCustomPlot::layoutElementAt(const QPointF &pos) const$/;"	f	class:QCustomPlot
left	qcustomplot.h	/^  QCPItemAnchor * const left;$/;"	m	class:QCPItemEllipse
left	qcustomplot.h	/^  QCPItemAnchor * const left;$/;"	m	class:QCPItemPixmap
left	qcustomplot.h	/^  QCPItemAnchor * const left;$/;"	m	class:QCPItemRect
left	qcustomplot.h	/^  QCPItemAnchor * const left;$/;"	m	class:QCPItemText
left	qcustomplot.h	/^  QCPItemPosition * const left;$/;"	m	class:QCPItemBracket
left	qcustomplot.h	/^  int left() const { return mRect.left(); }$/;"	f	class:QCPAxisRect
legend	qcustomplot.h	/^  QCPLegend *legend;$/;"	m	class:QCustomPlot
legendRemoved	qcustomplot.cpp	/^void QCustomPlot::legendRemoved(QCPLegend *legend)$/;"	f	class:QCustomPlot
length	qcustomplot.h	/^  double length() const { return mLength; }$/;"	f	class:QCPItemBracket
length	qcustomplot.h	/^  double length() const { return mLength; }$/;"	f	class:QCPLineEnding
length	qcustomplot.h	/^  double length() const { return qSqrt(mX*mX+mY*mY); }$/;"	f	class:QCPVector2D
length	qcustomplot.h	/^  int length() const { return size(); }$/;"	f	class:QCPDataRange
lengthSquared	qcustomplot.h	/^  double lengthSquared() const { return mX*mX+mY*mY; }$/;"	f	class:QCPVector2D
lessThanDataRangeBegin	qcustomplot.h	/^  inline static bool lessThanDataRangeBegin(const QCPDataRange &a, const QCPDataRange &b) { return a.begin() < b.begin(); }$/;"	f	class:QCPDataSelection
levelCount	qcustomplot.h	/^  int levelCount() const { return mLevelCount; }$/;"	f	class:QCPColorGradient
limAbove	qcustomplot.h	/^                         ,limAbove \/\/\/< Layer is inserted above other layer$/;"	e	enum:QCustomPlot::LayerInsertMode
limBelow	qcustomplot.h	/^  enum LayerInsertMode { limBelow  \/\/\/< Layer is inserted below other layer$/;"	e	enum:QCustomPlot::LayerInsertMode
limitIteratorsToDataRange	qcustomplot.h	/^void QCPDataContainer<DataType>::limitIteratorsToDataRange(const_iterator &begin, const_iterator &end, const QCPDataRange &dataRange) const$/;"	f	class:QCPDataContainer
lineStyle	qcustomplot.h	/^  LineStyle lineStyle() const { return mLineStyle; }$/;"	f	class:QCPCurve
lineStyle	qcustomplot.h	/^  LineStyle lineStyle() const { return mLineStyle; }$/;"	f	class:QCPGraph
linear_t	mainwindow.h	/^    QVector<double> linear_t, linear_y;$/;"	m	class:MainWindow
linear_y	mainwindow.h	/^    QVector<double> linear_t, linear_y;$/;"	m	class:MainWindow
lmBuffered	qcustomplot.h	/^                   ,lmBuffered \/\/\/< Layer has its own paint buffer and may be replotted individually (see \\ref replot).$/;"	e	enum:QCPLayer::LayerMode
lmLogical	qcustomplot.h	/^  enum LayerMode { lmLogical   \/\/\/< Layer is used only for rendering order, and shares paint buffer with all other adjacent logical layers.$/;"	e	enum:QCPLayer::LayerMode
loadPreset	qcustomplot.cpp	/^void QCPColorGradient::loadPreset(GradientPreset preset)$/;"	f	class:QCPColorGradient
logBase	qcustomplot.h	/^  double logBase() const { return mLogBase; }$/;"	f	class:QCPAxisTickerLog
low	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData
lower	qcustomplot.h	/^  double lower, upper;$/;"	m	class:QCPRange
lowerEnding	qcustomplot.cpp	/^QCPLineEnding QCPAxis::lowerEnding() const$/;"	f	class:QCPAxis
lowerEnding	qcustomplot.h	/^  QCPLineEnding lowerEnding, upperEnding; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
lowerQuartile	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData
lsImpulse	qcustomplot.h	/^                   ,lsImpulse    \/\/\/< each data point is represented by a line parallel to the value axis, which reaches from the data point to the zero-value-line$/;"	e	enum:QCPGraph::LineStyle
lsInside	qcustomplot.h	/^  enum LabelSide { lsInside    \/\/\/< Tick labels will be displayed inside the axis rect and clipped to the inner axis rect$/;"	e	enum:QCPAxis::LabelSide
lsLine	qcustomplot.h	/^                   ,lsLine       \/\/\/< data points are connected by a straight line$/;"	e	enum:QCPGraph::LineStyle
lsLine	qcustomplot.h	/^                   ,lsLine \/\/\/< Data points are connected with a straight line$/;"	e	enum:QCPCurve::LineStyle
lsNone	qcustomplot.h	/^  enum LineStyle { lsNone        \/\/\/< data points are not connected with any lines (e.g. data only represented$/;"	e	enum:QCPGraph::LineStyle
lsNone	qcustomplot.h	/^  enum LineStyle { lsNone  \/\/\/< No line is drawn between data points (e.g. only scatters)$/;"	e	enum:QCPCurve::LineStyle
lsOutside	qcustomplot.h	/^                   ,lsOutside  \/\/\/< Tick labels will be displayed outside the axis rect$/;"	e	enum:QCPAxis::LabelSide
lsStepCenter	qcustomplot.h	/^                   ,lsStepCenter \/\/\/< line is drawn as steps where the step is in between two data points$/;"	e	enum:QCPGraph::LineStyle
lsStepLeft	qcustomplot.h	/^                   ,lsStepLeft   \/\/\/< line is drawn as steps where the step height is the value of the left data point$/;"	e	enum:QCPGraph::LineStyle
lsStepRight	qcustomplot.h	/^                   ,lsStepRight  \/\/\/< line is drawn as steps where the step height is the value of the right data point$/;"	e	enum:QCPGraph::LineStyle
mAADragBackup	qcustomplot.h	/^  QCP::AntialiasedElements mAADragBackup, mNotAADragBackup;$/;"	m	class:QCPAxis
mAADragBackup	qcustomplot.h	/^  QCP::AntialiasedElements mAADragBackup, mNotAADragBackup;$/;"	m	class:QCPAxisRect
mActive	qcustomplot.h	/^  bool mActive;$/;"	m	class:QCPSelectionRect
mAdaptiveSampling	qcustomplot.h	/^  bool mAdaptiveSampling;$/;"	m	class:QCPGraph
mAlpha	qcustomplot.h	/^  unsigned char *mAlpha;$/;"	m	class:QCPColorMapData
mAnchorId	qcustomplot.h	/^  int mAnchorId;$/;"	m	class:QCPItemAnchor
mAnchors	qcustomplot.h	/^  QList<QCPItemAnchor*> mAnchors;$/;"	m	class:QCPAbstractItem
mAntialiased	qcustomplot.h	/^  bool mAntialiased;$/;"	m	class:QCPLayerable
mAntialiasedElements	qcustomplot.h	/^  QCP::AntialiasedElements mAntialiasedElements, mNotAntialiasedElements;$/;"	m	class:QCustomPlot
mAntialiasedFill	qcustomplot.h	/^  bool mAntialiasedFill, mAntialiasedScatters;$/;"	m	class:QCPAbstractPlottable
mAntialiasedScatters	qcustomplot.h	/^  bool mAntialiasedFill, mAntialiasedScatters;$/;"	m	class:QCPAbstractPlottable
mAntialiasedSubGrid	qcustomplot.h	/^  bool mAntialiasedSubGrid, mAntialiasedZeroLine;$/;"	m	class:QCPGrid
mAntialiasedZeroLine	qcustomplot.h	/^  bool mAntialiasedSubGrid, mAntialiasedZeroLine;$/;"	m	class:QCPGrid
mAntialiasingStack	qcustomplot.h	/^  QStack<bool> mAntialiasingStack;$/;"	m	class:QCPPainter
mAspectRatioMode	qcustomplot.h	/^  Qt::AspectRatioMode mAspectRatioMode;$/;"	m	class:QCPItemPixmap
mAutoAddPlottableToLegend	qcustomplot.h	/^  bool mAutoAddPlottableToLegend;$/;"	m	class:QCustomPlot
mAutoMargins	qcustomplot.h	/^  QCP::MarginSides mAutoMargins;$/;"	m	class:QCPLayoutElement
mAutoSqueeze	qcustomplot.h	/^  bool mAutoSqueeze;$/;"	m	class:QCPDataContainer
mAxes	qcustomplot.h	/^  QHash<QCPAxis::AxisType, QList<QCPAxis*> > mAxes;$/;"	m	class:QCPAxisRect
mAxisPainter	qcustomplot.h	/^  QCPAxisPainterPrivate *mAxisPainter;$/;"	m	class:QCPAxis
mAxisRect	qcustomplot.h	/^  QCPAxisRect *mAxisRect;$/;"	m	class:QCPAxis
mAxisRect	qcustomplot.h	/^  QPointer<QCPAxisRect> mAxisRect;$/;"	m	class:QCPItemPosition
mAxisRect	qcustomplot.h	/^  QPointer<QCPColorScaleAxisRectPrivate> mAxisRect;$/;"	m	class:QCPColorScale
mAxisSelectionBox	qcustomplot.h	/^  QRect mAxisSelectionBox, mTickLabelsSelectionBox, mLabelSelectionBox;$/;"	m	class:QCPAxisPainterPrivate
mAxisType	qcustomplot.h	/^  AxisType mAxisType;$/;"	m	class:QCPAxis
mBackgroundBrush	qcustomplot.h	/^  QBrush mBackgroundBrush;$/;"	m	class:QCPAxisRect
mBackgroundBrush	qcustomplot.h	/^  QBrush mBackgroundBrush;$/;"	m	class:QCustomPlot
mBackgroundPixmap	qcustomplot.h	/^  QPixmap mBackgroundPixmap;$/;"	m	class:QCPAxisRect
mBackgroundPixmap	qcustomplot.h	/^  QPixmap mBackgroundPixmap;$/;"	m	class:QCustomPlot
mBackgroundScaled	qcustomplot.h	/^  bool mBackgroundScaled;$/;"	m	class:QCPAxisRect
mBackgroundScaled	qcustomplot.h	/^  bool mBackgroundScaled;$/;"	m	class:QCustomPlot
mBackgroundScaledMode	qcustomplot.h	/^  Qt::AspectRatioMode mBackgroundScaledMode;$/;"	m	class:QCPAxisRect
mBackgroundScaledMode	qcustomplot.h	/^  Qt::AspectRatioMode mBackgroundScaledMode;$/;"	m	class:QCustomPlot
mBarAbove	qcustomplot.h	/^  QPointer<QCPBars> mBarBelow, mBarAbove;$/;"	m	class:QCPBars
mBarBelow	qcustomplot.h	/^  QPointer<QCPBars> mBarBelow, mBarAbove;$/;"	m	class:QCPBars
mBarWidth	qcustomplot.h	/^  int mBarWidth;$/;"	m	class:QCPColorScale
mBars	qcustomplot.h	/^  QList<QCPBars*> mBars;$/;"	m	class:QCPBarsGroup
mBarsGroup	qcustomplot.h	/^  QCPBarsGroup *mBarsGroup;$/;"	m	class:QCPBars
mBasePen	qcustomplot.h	/^  QPen mBasePen, mSelectedBasePen;$/;"	m	class:QCPAxis
mBaseValue	qcustomplot.h	/^  double mBaseValue;$/;"	m	class:QCPBars
mBegin	qcustomplot.h	/^  int mBegin, mEnd;$/;"	m	class:QCPDataRange
mBiggestUnit	qcustomplot.h	/^  TimeUnit mSmallestUnit, mBiggestUnit;$/;"	m	class:QCPAxisTickerTime
mBorderPen	qcustomplot.h	/^  QPen mBorderPen, mIconBorderPen;$/;"	m	class:QCPLegend
mBracketBrush	qcustomplot.h	/^  QBrush mBracketBrush;$/;"	m	class:QCPSelectionDecoratorBracket
mBracketHeight	qcustomplot.h	/^  int mBracketHeight;$/;"	m	class:QCPSelectionDecoratorBracket
mBracketPen	qcustomplot.h	/^  QPen mBracketPen;$/;"	m	class:QCPSelectionDecoratorBracket
mBracketStyle	qcustomplot.h	/^  BracketStyle mBracketStyle;$/;"	m	class:QCPSelectionDecoratorBracket
mBracketWidth	qcustomplot.h	/^  int mBracketWidth;$/;"	m	class:QCPSelectionDecoratorBracket
mBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemEllipse
mBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemRect
mBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemText
mBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemTracer
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPAbstractPlottable
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPLegend
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPScatterStyle
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPSelectionDecorator
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPSelectionRect
mBrushNegative	qcustomplot.h	/^  QBrush mBrushPositive, mBrushNegative;$/;"	m	class:QCPFinancial
mBrushPositive	qcustomplot.h	/^  QBrush mBrushPositive, mBrushNegative;$/;"	m	class:QCPFinancial
mBuffer	qcustomplot.h	/^  QPixmap mBuffer;$/;"	m	class:QCPPaintBufferPixmap
mBufferDevicePixelRatio	qcustomplot.h	/^  double mBufferDevicePixelRatio;$/;"	m	class:QCustomPlot
mCachedMargin	qcustomplot.h	/^  int mCachedMargin;$/;"	m	class:QCPAxis
mCachedMarginValid	qcustomplot.h	/^  bool mCachedMarginValid;$/;"	m	class:QCPAxis
mChannelFillGraph	qcustomplot.h	/^  QPointer<QCPGraph> mChannelFillGraph;$/;"	m	class:QCPGraph
mChartStyle	qcustomplot.h	/^  ChartStyle mChartStyle;$/;"	m	class:QCPFinancial
mChildren	qcustomplot.h	/^  QHash<QCP::MarginSide, QList<QCPLayoutElement*> > mChildren;$/;"	m	class:QCPMarginGroup
mChildren	qcustomplot.h	/^  QList<QCPLayerable*> mChildren;$/;"	m	class:QCPLayer
mChildrenX	qcustomplot.h	/^  QSet<QCPItemPosition*> mChildrenX, mChildrenY;$/;"	m	class:QCPItemAnchor
mChildrenY	qcustomplot.h	/^  QSet<QCPItemPosition*> mChildrenX, mChildrenY;$/;"	m	class:QCPItemAnchor
mClipAxisRect	qcustomplot.h	/^  QPointer<QCPAxisRect> mClipAxisRect;$/;"	m	class:QCPAbstractItem
mClipToAxisRect	qcustomplot.h	/^  bool mClipToAxisRect;$/;"	m	class:QCPAbstractItem
mColor	qcustomplot.h	/^  QColor mColor, mSelectedColor;$/;"	m	class:QCPItemText
mColorAxis	qcustomplot.h	/^  QPointer<QCPAxis> mColorAxis;$/;"	m	class:QCPColorScale
mColorBuffer	qcustomplot.h	/^  QVector<QRgb> mColorBuffer; \/\/ have colors premultiplied with alpha (for usage with QImage::Format_ARGB32_Premultiplied)$/;"	m	class:QCPColorGradient
mColorBufferInvalidated	qcustomplot.h	/^  bool mColorBufferInvalidated;$/;"	m	class:QCPColorGradient
mColorInterpolation	qcustomplot.h	/^  ColorInterpolation mColorInterpolation;$/;"	m	class:QCPColorGradient
mColorScale	qcustomplot.h	/^  QPointer<QCPColorScale> mColorScale;$/;"	m	class:QCPColorMap
mColorStops	qcustomplot.h	/^  QMap<double, QColor> mColorStops;$/;"	m	class:QCPColorGradient
mColumnSpacing	qcustomplot.h	/^  int mColumnSpacing, mRowSpacing;$/;"	m	class:QCPLayoutGrid
mColumnStretchFactors	qcustomplot.h	/^  QList<double> mColumnStretchFactors;$/;"	m	class:QCPLayoutGrid
mCurrentLayer	qcustomplot.h	/^  QCPLayer *mCurrentLayer;$/;"	m	class:QCustomPlot
mCustomPath	qcustomplot.h	/^  QPainterPath mCustomPath;$/;"	m	class:QCPScatterStyle
mData	qcustomplot.h	/^  QVector<DataType> mData;$/;"	m	class:QCPDataContainer
mData	qcustomplot.h	/^  double *mData;$/;"	m	class:QCPColorMapData
mDataBounds	qcustomplot.h	/^  QCPRange mDataBounds;$/;"	m	class:QCPColorMapData
mDataContainer	qcustomplot.h	/^  QSharedPointer<QCPDataContainer<DataType> > mDataContainer;$/;"	m	class:QCPAbstractPlottable1D
mDataContainer	qcustomplot.h	/^  QSharedPointer<QCPErrorBarsDataContainer> mDataContainer;$/;"	m	class:QCPErrorBars
mDataModified	qcustomplot.h	/^  bool mDataModified;$/;"	m	class:QCPColorMapData
mDataPlottable	qcustomplot.h	/^  QPointer<QCPAbstractPlottable> mDataPlottable;$/;"	m	class:QCPErrorBars
mDataRange	qcustomplot.h	/^  QCPRange mDataRange;$/;"	m	class:QCPColorMap
mDataRange	qcustomplot.h	/^  QCPRange mDataRange;$/;"	m	class:QCPColorScale
mDataRanges	qcustomplot.h	/^  QList<QCPDataRange> mDataRanges;$/;"	m	class:QCPDataSelection
mDataScaleType	qcustomplot.h	/^  QCPAxis::ScaleType mDataScaleType;$/;"	m	class:QCPColorMap
mDataScaleType	qcustomplot.h	/^  QCPAxis::ScaleType mDataScaleType;$/;"	m	class:QCPColorScale
mDateStrategy	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	m	class:QCPAxisTickerDateTime	typeref:enum:QCPAxisTickerDateTime::DateStrategy
mDateTimeFormat	qcustomplot.h	/^  QString mDateTimeFormat;$/;"	m	class:QCPAxisTickerDateTime
mDateTimeSpec	qcustomplot.h	/^  Qt::TimeSpec mDateTimeSpec;$/;"	m	class:QCPAxisTickerDateTime
mDevicePixelRatio	qcustomplot.h	/^  double mDevicePixelRatio;$/;"	m	class:QCPAbstractPaintBuffer
mDragStartHorzRange	qcustomplot.h	/^  QList<QCPRange> mDragStartHorzRange, mDragStartVertRange;$/;"	m	class:QCPAxisRect
mDragStartRange	qcustomplot.h	/^  QCPRange mDragStartRange;$/;"	m	class:QCPAxis
mDragStartVertRange	qcustomplot.h	/^  QList<QCPRange> mDragStartHorzRange, mDragStartVertRange;$/;"	m	class:QCPAxisRect
mDragging	qcustomplot.h	/^  bool mDragging;$/;"	m	class:QCPAxis
mDragging	qcustomplot.h	/^  bool mDragging;$/;"	m	class:QCPAxisRect
mElements	qcustomplot.h	/^  QList<QCPLayoutElement*> mElements;$/;"	m	class:QCPLayoutInset
mElements	qcustomplot.h	/^  QList<QList<QCPLayoutElement*> > mElements;$/;"	m	class:QCPLayoutGrid
mEnd	qcustomplot.h	/^  int mBegin, mEnd;$/;"	m	class:QCPDataRange
mErrorType	qcustomplot.h	/^  ErrorType mErrorType;$/;"	m	class:QCPErrorBars
mFieldWidth	qcustomplot.h	/^  QHash<TimeUnit, int> mFieldWidth;$/;"	m	class:QCPAxisTickerTime
mFillOrder	qcustomplot.h	/^  FillOrder mFillOrder;$/;"	m	class:QCPLayoutGrid
mFont	qcustomplot.h	/^  QFont mFont, mSelectedFont;$/;"	m	class:QCPItemText
mFont	qcustomplot.h	/^  QFont mFont;$/;"	m	class:QCPAbstractLegendItem
mFont	qcustomplot.h	/^  QFont mFont;$/;"	m	class:QCPLegend
mFont	qcustomplot.h	/^  QFont mFont;$/;"	m	class:QCPTextElement
mFormatPattern	qcustomplot.h	/^  QHash<TimeUnit, QString> mFormatPattern;$/;"	m	class:QCPAxisTickerTime
mFractionStyle	qcustomplot.h	/^  FractionStyle mFractionStyle;$/;"	m	class:QCPAxisTickerPi
mGlContext	qcustomplot.h	/^  QSharedPointer<QOpenGLContext> mGlContext;$/;"	m	class:QCustomPlot
mGlContext	qcustomplot.h	/^  QWeakPointer<QOpenGLContext> mGlContext;$/;"	m	class:QCPPaintBufferGlFbo
mGlFrameBuffer	qcustomplot.h	/^  QOpenGLFramebufferObject *mGlFrameBuffer;$/;"	m	class:QCPPaintBufferGlFbo
mGlPBuffer	qcustomplot.h	/^  QGLPixelBuffer *mGlPBuffer;$/;"	m	class:QCPPaintBufferGlPbuffer
mGlPaintDevice	qcustomplot.h	/^  QSharedPointer<QOpenGLPaintDevice> mGlPaintDevice;$/;"	m	class:QCustomPlot
mGlPaintDevice	qcustomplot.h	/^  QWeakPointer<QOpenGLPaintDevice> mGlPaintDevice;$/;"	m	class:QCPPaintBufferGlFbo
mGlSurface	qcustomplot.h	/^  QSharedPointer<QSurface> mGlSurface;$/;"	m	class:QCustomPlot
mGradient	qcustomplot.h	/^  QCPColorGradient mGradient;$/;"	m	class:QCPColorMap
mGradient	qcustomplot.h	/^  QCPColorGradient mGradient;$/;"	m	class:QCPColorScale
mGradientImage	qcustomplot.h	/^  QImage mGradientImage;$/;"	m	class:QCPColorScaleAxisRectPrivate
mGradientImageInvalidated	qcustomplot.h	/^  bool mGradientImageInvalidated;$/;"	m	class:QCPColorScaleAxisRectPrivate
mGraph	qcustomplot.h	/^  QCPGraph *mGraph;$/;"	m	class:QCPItemTracer
mGraphKey	qcustomplot.h	/^  double mGraphKey;$/;"	m	class:QCPItemTracer
mGraphs	qcustomplot.h	/^  QList<QCPGraph*> mGraphs; \/\/ extra list of plottables also in mPlottables that are of type QCPGraph$/;"	m	class:QCustomPlot
mGrid	qcustomplot.h	/^  QCPGrid *mGrid;$/;"	m	class:QCPAxis
mHead	qcustomplot.h	/^  QCPLineEnding mHead, mTail;$/;"	m	class:QCPItemCurve
mHead	qcustomplot.h	/^  QCPLineEnding mHead, mTail;$/;"	m	class:QCPItemLine
mIconBorderPen	qcustomplot.h	/^  QPen mBorderPen, mIconBorderPen;$/;"	m	class:QCPLegend
mIconSize	qcustomplot.h	/^  QSize mIconSize;$/;"	m	class:QCPLegend
mIconTextPadding	qcustomplot.h	/^  int mIconTextPadding;$/;"	m	class:QCPLegend
mIndex	qcustomplot.h	/^  int mIndex;$/;"	m	class:QCPLayer
mInsetAlignment	qcustomplot.h	/^  QList<Qt::Alignment> mInsetAlignment;$/;"	m	class:QCPLayoutInset
mInsetLayout	qcustomplot.h	/^  QCPLayoutInset *mInsetLayout;$/;"	m	class:QCPAxisRect
mInsetPlacement	qcustomplot.h	/^  QList<InsetPlacement> mInsetPlacement;$/;"	m	class:QCPLayoutInset
mInsetRect	qcustomplot.h	/^  QList<QRectF> mInsetRect;$/;"	m	class:QCPLayoutInset
mInteractions	qcustomplot.h	/^  QCP::Interactions mInteractions;$/;"	m	class:QCustomPlot
mInterpolate	qcustomplot.h	/^  bool mInterpolate;$/;"	m	class:QCPColorMap
mInterpolating	qcustomplot.h	/^  bool mInterpolating;$/;"	m	class:QCPItemTracer
mInvalidated	qcustomplot.h	/^  bool mInvalidated;$/;"	m	class:QCPAbstractPaintBuffer
mInverted	qcustomplot.h	/^  bool mInverted;$/;"	m	class:QCPLineEnding
mIsAntialiasing	qcustomplot.h	/^  bool mIsAntialiasing;$/;"	m	class:QCPPainter
mIsEmpty	qcustomplot.h	/^  bool mIsEmpty;$/;"	m	class:QCPColorMapData
mItems	qcustomplot.h	/^  QList<QCPAbstractItem*> mItems;$/;"	m	class:QCustomPlot
mKey	qcustomplot.h	/^  double mKey, mValue;$/;"	m	class:QCPItemPosition
mKeyAxis	qcustomplot.h	/^  QPointer<QCPAxis> mKeyAxis, mValueAxis;$/;"	m	class:QCPAbstractPlottable
mKeyAxis	qcustomplot.h	/^  QPointer<QCPAxis> mKeyAxis, mValueAxis;$/;"	m	class:QCPItemPosition
mKeyRange	qcustomplot.h	/^  QCPRange mKeyRange, mValueRange;$/;"	m	class:QCPColorMapData
mKeySize	qcustomplot.h	/^  int mKeySize, mValueSize;$/;"	m	class:QCPColorMapData
mLabel	qcustomplot.h	/^  QString mLabel;$/;"	m	class:QCPAxis
mLabelCache	qcustomplot.h	/^  QCache<QString, CachedLabel> mLabelCache;$/;"	m	class:QCPAxisPainterPrivate
mLabelColor	qcustomplot.h	/^  QColor mLabelColor, mSelectedLabelColor;$/;"	m	class:QCPAxis
mLabelFont	qcustomplot.h	/^  QFont mLabelFont, mSelectedLabelFont;$/;"	m	class:QCPAxis
mLabelParameterHash	qcustomplot.h	/^  QByteArray mLabelParameterHash; \/\/ to determine whether mLabelCache needs to be cleared due to changed parameters$/;"	m	class:QCPAxisPainterPrivate
mLabelSelectionBox	qcustomplot.h	/^  QRect mAxisSelectionBox, mTickLabelsSelectionBox, mLabelSelectionBox;$/;"	m	class:QCPAxisPainterPrivate
mLayer	qcustomplot.h	/^  QCPLayer *mLayer;$/;"	m	class:QCPLayerable
mLayers	qcustomplot.h	/^  QList<QCPLayer*> mLayers;$/;"	m	class:QCustomPlot
mLegendIcon	qcustomplot.h	/^  QPixmap mLegendIcon;$/;"	m	class:QCPColorMap
mLength	qcustomplot.h	/^  double mLength;$/;"	m	class:QCPItemBracket
mLength	qcustomplot.h	/^  double mWidth, mLength;$/;"	m	class:QCPLineEnding
mLevelCount	qcustomplot.h	/^  int mLevelCount;$/;"	m	class:QCPColorGradient
mLineStyle	qcustomplot.h	/^  LineStyle mLineStyle;$/;"	m	class:QCPCurve
mLineStyle	qcustomplot.h	/^  LineStyle mLineStyle;$/;"	m	class:QCPGraph
mLogBase	qcustomplot.h	/^  double mLogBase;$/;"	m	class:QCPAxisTickerLog
mLogBaseLnInv	qcustomplot.h	/^  double mLogBaseLnInv;$/;"	m	class:QCPAxisTickerLog
mMapData	qcustomplot.h	/^  QCPColorMapData *mMapData;$/;"	m	class:QCPColorMap
mMapImage	qcustomplot.h	/^  QImage mMapImage, mUndersampledMapImage;$/;"	m	class:QCPColorMap
mMapImageInvalidated	qcustomplot.h	/^  bool mMapImageInvalidated;$/;"	m	class:QCPColorMap
mMarginGroups	qcustomplot.h	/^  QHash<QCP::MarginSide, QCPMarginGroup*> mMarginGroups;$/;"	m	class:QCPLayoutElement
mMargins	qcustomplot.h	/^  QMargins mMargins, mMinimumMargins;$/;"	m	class:QCPLayoutElement
mMaximumSize	qcustomplot.h	/^  QSize mMinimumSize, mMaximumSize;$/;"	m	class:QCPLayoutElement
mMedianPen	qcustomplot.h	/^  QPen mMedianPen;$/;"	m	class:QCPStatisticalBox
mMinimumMargins	qcustomplot.h	/^  QMargins mMargins, mMinimumMargins;$/;"	m	class:QCPLayoutElement
mMinimumSize	qcustomplot.h	/^  QSize mMinimumSize, mMaximumSize;$/;"	m	class:QCPLayoutElement
mMode	qcustomplot.h	/^  LayerMode mMode;$/;"	m	class:QCPLayer
mModes	qcustomplot.h	/^  PainterModes mModes;$/;"	m	class:QCPPainter
mMouseEventLayerable	qcustomplot.h	/^  QPointer<QCPLayerable> mMouseEventLayerable;$/;"	m	class:QCustomPlot
mMouseEventLayerableDetails	qcustomplot.h	/^  QVariant mMouseEventLayerableDetails;$/;"	m	class:QCustomPlot
mMouseHasMoved	qcustomplot.h	/^  bool mMouseHasMoved;$/;"	m	class:QCustomPlot
mMousePressPos	qcustomplot.h	/^  QPoint mMousePressPos;$/;"	m	class:QCustomPlot
mMouseSignalLayerable	qcustomplot.h	/^  QPointer<QCPLayerable> mMouseSignalLayerable;$/;"	m	class:QCustomPlot
mMouseSignalLayerableDetails	qcustomplot.h	/^  QVariant mMouseSignalLayerableDetails;$/;"	m	class:QCustomPlot
mMultiSelectModifier	qcustomplot.h	/^  Qt::KeyboardModifier mMultiSelectModifier;$/;"	m	class:QCustomPlot
mMultisamples	qcustomplot.h	/^  int mMultisamples;$/;"	m	class:QCPPaintBufferGlPbuffer
mName	qcustomplot.h	/^  QString mName;$/;"	m	class:QCPAbstractPlottable
mName	qcustomplot.h	/^  QString mName;$/;"	m	class:QCPItemAnchor
mName	qcustomplot.h	/^  QString mName;$/;"	m	class:QCPLayer
mNoAntialiasingOnDrag	qcustomplot.h	/^  bool mNoAntialiasingOnDrag;$/;"	m	class:QCustomPlot
mNotAADragBackup	qcustomplot.h	/^  QCP::AntialiasedElements mAADragBackup, mNotAADragBackup;$/;"	m	class:QCPAxis
mNotAADragBackup	qcustomplot.h	/^  QCP::AntialiasedElements mAADragBackup, mNotAADragBackup;$/;"	m	class:QCPAxisRect
mNotAntialiasedElements	qcustomplot.h	/^  QCP::AntialiasedElements mAntialiasedElements, mNotAntialiasedElements;$/;"	m	class:QCustomPlot
mNumberBeautifulPowers	qcustomplot.h	/^  bool mNumberBeautifulPowers;$/;"	m	class:QCPAxis
mNumberFormatChar	qcustomplot.h	/^  QLatin1Char mNumberFormatChar;$/;"	m	class:QCPAxis
mNumberPrecision	qcustomplot.h	/^  int mNumberPrecision;$/;"	m	class:QCPAxis
mOpenGl	qcustomplot.h	/^  bool mOpenGl;$/;"	m	class:QCustomPlot
mOpenGlAntialiasedElementsBackup	qcustomplot.h	/^  QCP::AntialiasedElements mOpenGlAntialiasedElementsBackup;$/;"	m	class:QCustomPlot
mOpenGlCacheLabelsBackup	qcustomplot.h	/^  bool mOpenGlCacheLabelsBackup;$/;"	m	class:QCustomPlot
mOpenGlMultisamples	qcustomplot.h	/^  int mOpenGlMultisamples;$/;"	m	class:QCustomPlot
mOrientation	qcustomplot.h	/^  Qt::Orientation mOrientation;$/;"	m	class:QCPAxis
mOuterRect	qcustomplot.h	/^  QRect mRect, mOuterRect;$/;"	m	class:QCPLayoutElement
mOutlierStyle	qcustomplot.h	/^  QCPScatterStyle mOutlierStyle;$/;"	m	class:QCPStatisticalBox
mPadding	qcustomplot.h	/^  QMargins mPadding;$/;"	m	class:QCPItemText
mPadding	qcustomplot.h	/^  int mPadding;$/;"	m	class:QCPAxis
mPaintBuffer	qcustomplot.h	/^  QWeakPointer<QCPAbstractPaintBuffer> mPaintBuffer;$/;"	m	class:QCPLayer
mPaintBuffers	qcustomplot.h	/^  QList<QSharedPointer<QCPAbstractPaintBuffer> > mPaintBuffers;$/;"	m	class:QCustomPlot
mParentAnchorX	qcustomplot.h	/^  QCPItemAnchor *mParentAnchorX, *mParentAnchorY;$/;"	m	class:QCPItemPosition
mParentAnchorY	qcustomplot.h	/^  QCPItemAnchor *mParentAnchorX, *mParentAnchorY;$/;"	m	class:QCPItemPosition
mParentAxis	qcustomplot.h	/^  QCPAxis *mParentAxis;$/;"	m	class:QCPGrid
mParentColorScale	qcustomplot.h	/^  QCPColorScale *mParentColorScale;$/;"	m	class:QCPColorScaleAxisRectPrivate
mParentItem	qcustomplot.h	/^  QCPAbstractItem *mParentItem;$/;"	m	class:QCPItemAnchor
mParentLayerable	qcustomplot.h	/^  QPointer<QCPLayerable> mParentLayerable;$/;"	m	class:QCPLayerable
mParentLayout	qcustomplot.h	/^  QCPLayout *mParentLayout;$/;"	m	class:QCPLayoutElement
mParentLegend	qcustomplot.h	/^  QCPLegend *mParentLegend;$/;"	m	class:QCPAbstractLegendItem
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPAxisPainterPrivate
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPBarsGroup
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPItemAnchor
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPLayer
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPLayerable
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPMarginGroup
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemBracket
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemCurve
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemEllipse
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemLine
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemPixmap
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemRect
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemStraightLine
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemText
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemTracer
mPen	qcustomplot.h	/^  QPen mPen, mSubGridPen, mZeroLinePen;$/;"	m	class:QCPGrid
mPen	qcustomplot.h	/^  QPen mPen;$/;"	m	class:QCPAbstractPlottable
mPen	qcustomplot.h	/^  QPen mPen;$/;"	m	class:QCPScatterStyle
mPen	qcustomplot.h	/^  QPen mPen;$/;"	m	class:QCPSelectionDecorator
mPen	qcustomplot.h	/^  QPen mPen;$/;"	m	class:QCPSelectionRect
mPenDefined	qcustomplot.h	/^  bool mPenDefined;$/;"	m	class:QCPScatterStyle
mPenNegative	qcustomplot.h	/^  QPen mPenPositive, mPenNegative;$/;"	m	class:QCPFinancial
mPenPositive	qcustomplot.h	/^  QPen mPenPositive, mPenNegative;$/;"	m	class:QCPFinancial
mPeriodic	qcustomplot.h	/^  bool mPeriodic;$/;"	m	class:QCPColorGradient
mPeriodicity	qcustomplot.h	/^  int mPeriodicity;$/;"	m	class:QCPAxisTickerPi
mPiSymbol	qcustomplot.h	/^  QString mPiSymbol;$/;"	m	class:QCPAxisTickerPi
mPiTickStep	qcustomplot.h	/^  double mPiTickStep; \/\/ size of one tick step in units of mPiValue$/;"	m	class:QCPAxisTickerPi
mPiValue	qcustomplot.h	/^  double mPiValue;$/;"	m	class:QCPAxisTickerPi
mPixmap	qcustomplot.h	/^  QPixmap mPixmap;$/;"	m	class:QCPItemPixmap
mPixmap	qcustomplot.h	/^  QPixmap mPixmap;$/;"	m	class:QCPScatterStyle
mPlotLayout	qcustomplot.h	/^  QCPLayoutGrid *mPlotLayout;$/;"	m	class:QCustomPlot
mPlottable	qcustomplot.h	/^  QCPAbstractPlottable *mPlottable;$/;"	m	class:QCPPlottableLegendItem
mPlottable	qcustomplot.h	/^  QCPAbstractPlottable *mPlottable;$/;"	m	class:QCPSelectionDecorator
mPlottables	qcustomplot.h	/^  QList<QCPAbstractPlottable*> mPlottables;$/;"	m	class:QCustomPlot
mPlottingHints	qcustomplot.h	/^  QCP::PlottingHints mPlottingHints;$/;"	m	class:QCustomPlot
mPositionAlignment	qcustomplot.h	/^  Qt::Alignment mPositionAlignment;$/;"	m	class:QCPItemText
mPositionTypeX	qcustomplot.h	/^  PositionType mPositionTypeX, mPositionTypeY;$/;"	m	class:QCPItemPosition
mPositionTypeY	qcustomplot.h	/^  PositionType mPositionTypeX, mPositionTypeY;$/;"	m	class:QCPItemPosition
mPositions	qcustomplot.h	/^  QList<QCPItemPosition*> mPositions;$/;"	m	class:QCPAbstractItem
mPreallocIteration	qcustomplot.h	/^  int mPreallocIteration;$/;"	m	class:QCPDataContainer
mPreallocSize	qcustomplot.h	/^  int mPreallocSize;$/;"	m	class:QCPDataContainer
mRange	qcustomplot.h	/^  QCPRange mRange;$/;"	m	class:QCPAxis
mRangeDrag	qcustomplot.h	/^  Qt::Orientations mRangeDrag, mRangeZoom;$/;"	m	class:QCPAxisRect
mRangeDragHorzAxis	qcustomplot.h	/^  QList<QPointer<QCPAxis> > mRangeDragHorzAxis, mRangeDragVertAxis;$/;"	m	class:QCPAxisRect
mRangeDragVertAxis	qcustomplot.h	/^  QList<QPointer<QCPAxis> > mRangeDragHorzAxis, mRangeDragVertAxis;$/;"	m	class:QCPAxisRect
mRangeReversed	qcustomplot.h	/^  bool mRangeReversed;$/;"	m	class:QCPAxis
mRangeZoom	qcustomplot.h	/^  Qt::Orientations mRangeDrag, mRangeZoom;$/;"	m	class:QCPAxisRect
mRangeZoomFactorHorz	qcustomplot.h	/^  double mRangeZoomFactorHorz, mRangeZoomFactorVert;$/;"	m	class:QCPAxisRect
mRangeZoomFactorVert	qcustomplot.h	/^  double mRangeZoomFactorHorz, mRangeZoomFactorVert;$/;"	m	class:QCPAxisRect
mRangeZoomHorzAxis	qcustomplot.h	/^  QList<QPointer<QCPAxis> > mRangeZoomHorzAxis, mRangeZoomVertAxis;$/;"	m	class:QCPAxisRect
mRangeZoomVertAxis	qcustomplot.h	/^  QList<QPointer<QCPAxis> > mRangeZoomHorzAxis, mRangeZoomVertAxis;$/;"	m	class:QCPAxisRect
mRect	qcustomplot.h	/^  QRect mRect, mOuterRect;$/;"	m	class:QCPLayoutElement
mRect	qcustomplot.h	/^  QRect mRect;$/;"	m	class:QCPSelectionRect
mReplotQueued	qcustomplot.h	/^  bool mReplotQueued;$/;"	m	class:QCustomPlot
mReplotting	qcustomplot.h	/^  bool mReplotting;$/;"	m	class:QCustomPlot
mRotation	qcustomplot.h	/^  double mRotation;$/;"	m	class:QCPItemText
mRowSpacing	qcustomplot.h	/^  int mColumnSpacing, mRowSpacing;$/;"	m	class:QCPLayoutGrid
mRowStretchFactors	qcustomplot.h	/^  QList<double> mRowStretchFactors;$/;"	m	class:QCPLayoutGrid
mScaleStrategy	qcustomplot.h	/^  ScaleStrategy mScaleStrategy;$/;"	m	class:QCPAxisTickerFixed
mScaleType	qcustomplot.h	/^  ScaleType mScaleType;$/;"	m	class:QCPAxis
mScaled	qcustomplot.h	/^  bool mScaled;$/;"	m	class:QCPItemPixmap
mScaledBackgroundPixmap	qcustomplot.h	/^  QPixmap mScaledBackgroundPixmap;$/;"	m	class:QCPAxisRect
mScaledBackgroundPixmap	qcustomplot.h	/^  QPixmap mScaledBackgroundPixmap;$/;"	m	class:QCustomPlot
mScaledPixmap	qcustomplot.h	/^  QPixmap mScaledPixmap;$/;"	m	class:QCPItemPixmap
mScaledPixmapInvalidated	qcustomplot.h	/^  bool mScaledPixmapInvalidated;$/;"	m	class:QCPItemPixmap
mScatterSkip	qcustomplot.h	/^  int mScatterSkip;$/;"	m	class:QCPCurve
mScatterSkip	qcustomplot.h	/^  int mScatterSkip;$/;"	m	class:QCPGraph
mScatterStyle	qcustomplot.h	/^  QCPScatterStyle mScatterStyle;$/;"	m	class:QCPCurve
mScatterStyle	qcustomplot.h	/^  QCPScatterStyle mScatterStyle;$/;"	m	class:QCPGraph
mScatterStyle	qcustomplot.h	/^  QCPScatterStyle mScatterStyle;$/;"	m	class:QCPSelectionDecorator
mSelectable	qcustomplot.h	/^  QCP::SelectionType mSelectable;$/;"	m	class:QCPAbstractPlottable
mSelectable	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPAbstractItem
mSelectable	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPAbstractLegendItem
mSelectable	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPTextElement
mSelectableParts	qcustomplot.h	/^  SelectableParts mSelectableParts, mSelectedParts;$/;"	m	class:QCPAxis
mSelectableParts	qcustomplot.h	/^  SelectableParts mSelectedParts, mSelectableParts;$/;"	m	class:QCPLegend
mSelected	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPAbstractItem
mSelected	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPAbstractLegendItem
mSelected	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPTextElement
mSelectedBasePen	qcustomplot.h	/^  QPen mBasePen, mSelectedBasePen;$/;"	m	class:QCPAxis
mSelectedBorderPen	qcustomplot.h	/^  QPen mSelectedBorderPen, mSelectedIconBorderPen;$/;"	m	class:QCPLegend
mSelectedBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemEllipse
mSelectedBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemRect
mSelectedBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemText
mSelectedBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemTracer
mSelectedBrush	qcustomplot.h	/^  QBrush mSelectedBrush;$/;"	m	class:QCPLegend
mSelectedColor	qcustomplot.h	/^  QColor mColor, mSelectedColor;$/;"	m	class:QCPItemText
mSelectedFont	qcustomplot.h	/^  QFont mFont, mSelectedFont;$/;"	m	class:QCPItemText
mSelectedFont	qcustomplot.h	/^  QFont mSelectedFont;$/;"	m	class:QCPAbstractLegendItem
mSelectedFont	qcustomplot.h	/^  QFont mSelectedFont;$/;"	m	class:QCPLegend
mSelectedFont	qcustomplot.h	/^  QFont mSelectedFont;$/;"	m	class:QCPTextElement
mSelectedIconBorderPen	qcustomplot.h	/^  QPen mSelectedBorderPen, mSelectedIconBorderPen;$/;"	m	class:QCPLegend
mSelectedLabelColor	qcustomplot.h	/^  QColor mLabelColor, mSelectedLabelColor;$/;"	m	class:QCPAxis
mSelectedLabelFont	qcustomplot.h	/^  QFont mLabelFont, mSelectedLabelFont;$/;"	m	class:QCPAxis
mSelectedParts	qcustomplot.h	/^  SelectableParts mSelectableParts, mSelectedParts;$/;"	m	class:QCPAxis
mSelectedParts	qcustomplot.h	/^  SelectableParts mSelectedParts, mSelectableParts;$/;"	m	class:QCPLegend
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemBracket
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemCurve
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemEllipse
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemLine
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemPixmap
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemRect
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemStraightLine
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemText
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemTracer
mSelectedSubTickPen	qcustomplot.h	/^  QPen mSubTickPen, mSelectedSubTickPen;$/;"	m	class:QCPAxis
mSelectedTextColor	qcustomplot.h	/^  QColor mSelectedTextColor;$/;"	m	class:QCPAbstractLegendItem
mSelectedTextColor	qcustomplot.h	/^  QColor mSelectedTextColor;$/;"	m	class:QCPLegend
mSelectedTextColor	qcustomplot.h	/^  QColor mSelectedTextColor;$/;"	m	class:QCPTextElement
mSelectedTickLabelColor	qcustomplot.h	/^  QColor mTickLabelColor, mSelectedTickLabelColor;$/;"	m	class:QCPAxis
mSelectedTickLabelFont	qcustomplot.h	/^  QFont mTickLabelFont, mSelectedTickLabelFont;$/;"	m	class:QCPAxis
mSelectedTickPen	qcustomplot.h	/^  QPen mTickPen, mSelectedTickPen;$/;"	m	class:QCPAxis
mSelection	qcustomplot.h	/^  QCPDataSelection mSelection;$/;"	m	class:QCPAbstractPlottable
mSelectionDecorator	qcustomplot.h	/^  QCPSelectionDecorator *mSelectionDecorator;$/;"	m	class:QCPAbstractPlottable
mSelectionRect	qcustomplot.h	/^  QCPSelectionRect *mSelectionRect;$/;"	m	class:QCustomPlot
mSelectionRectMode	qcustomplot.h	/^  QCP::SelectionRectMode mSelectionRectMode;$/;"	m	class:QCustomPlot
mSelectionTolerance	qcustomplot.h	/^  int mSelectionTolerance;$/;"	m	class:QCustomPlot
mShape	qcustomplot.h	/^  ScatterShape mShape;$/;"	m	class:QCPScatterStyle
mSize	qcustomplot.h	/^  QSize mSize;$/;"	m	class:QCPAbstractPaintBuffer
mSize	qcustomplot.h	/^  double mSize;$/;"	m	class:QCPItemTracer
mSize	qcustomplot.h	/^  double mSize;$/;"	m	class:QCPScatterStyle
mSizeConstraintRect	qcustomplot.h	/^  SizeConstraintRect mSizeConstraintRect;$/;"	m	class:QCPLayoutElement
mSmallestUnit	qcustomplot.h	/^  TimeUnit mSmallestUnit, mBiggestUnit;$/;"	m	class:QCPAxisTickerTime
mSpacing	qcustomplot.h	/^  double mSpacing;$/;"	m	class:QCPBarsGroup
mSpacingType	qcustomplot.h	/^  SpacingType mSpacingType;$/;"	m	class:QCPBarsGroup
mStackingGap	qcustomplot.h	/^  double mStackingGap;$/;"	m	class:QCPBars
mStyle	qcustomplot.h	/^  BracketStyle mStyle;$/;"	m	class:QCPItemBracket
mStyle	qcustomplot.h	/^  EndingStyle mStyle;$/;"	m	class:QCPLineEnding
mStyle	qcustomplot.h	/^  TracerStyle mStyle;$/;"	m	class:QCPItemTracer
mSubGridPen	qcustomplot.h	/^  QPen mPen, mSubGridPen, mZeroLinePen;$/;"	m	class:QCPGrid
mSubGridVisible	qcustomplot.h	/^  bool mSubGridVisible;$/;"	m	class:QCPGrid
mSubTickCount	qcustomplot.h	/^  int mSubTickCount;$/;"	m	class:QCPAxisTickerLog
mSubTickCount	qcustomplot.h	/^  int mSubTickCount;$/;"	m	class:QCPAxisTickerText
mSubTickPen	qcustomplot.h	/^  QPen mSubTickPen, mSelectedSubTickPen;$/;"	m	class:QCPAxis
mSubTickVector	qcustomplot.h	/^  QVector<double> mSubTickVector;$/;"	m	class:QCPAxis
mSubTicks	qcustomplot.h	/^  bool mSubTicks;$/;"	m	class:QCPAxis
mSymbolGap	qcustomplot.h	/^  double mSymbolGap;$/;"	m	class:QCPErrorBars
mTail	qcustomplot.h	/^  QCPLineEnding mHead, mTail;$/;"	m	class:QCPItemCurve
mTail	qcustomplot.h	/^  QCPLineEnding mHead, mTail;$/;"	m	class:QCPItemLine
mTangentAverage	qcustomplot.h	/^  int mTangentAverage;$/;"	m	class:QCPSelectionDecoratorBracket
mTangentToData	qcustomplot.h	/^  bool mTangentToData;$/;"	m	class:QCPSelectionDecoratorBracket
mText	qcustomplot.h	/^  QString mText;$/;"	m	class:QCPItemText
mText	qcustomplot.h	/^  QString mText;$/;"	m	class:QCPTextElement
mTextAlignment	qcustomplot.h	/^  Qt::Alignment mTextAlignment;$/;"	m	class:QCPItemText
mTextBoundingRect	qcustomplot.h	/^  QRect mTextBoundingRect;$/;"	m	class:QCPTextElement
mTextColor	qcustomplot.h	/^  QColor mTextColor;$/;"	m	class:QCPAbstractLegendItem
mTextColor	qcustomplot.h	/^  QColor mTextColor;$/;"	m	class:QCPLegend
mTextColor	qcustomplot.h	/^  QColor mTextColor;$/;"	m	class:QCPTextElement
mTextFlags	qcustomplot.h	/^  int mTextFlags;$/;"	m	class:QCPTextElement
mTickCount	qcustomplot.h	/^  int mTickCount;$/;"	m	class:QCPAxisTicker
mTickLabelColor	qcustomplot.h	/^  QColor mTickLabelColor, mSelectedTickLabelColor;$/;"	m	class:QCPAxis
mTickLabelFont	qcustomplot.h	/^  QFont mTickLabelFont, mSelectedTickLabelFont;$/;"	m	class:QCPAxis
mTickLabels	qcustomplot.h	/^  bool mTickLabels;$/;"	m	class:QCPAxis
mTickLabelsSelectionBox	qcustomplot.h	/^  QRect mAxisSelectionBox, mTickLabelsSelectionBox, mLabelSelectionBox;$/;"	m	class:QCPAxisPainterPrivate
mTickOrigin	qcustomplot.h	/^  double mTickOrigin;$/;"	m	class:QCPAxisTicker
mTickPen	qcustomplot.h	/^  QPen mTickPen, mSelectedTickPen;$/;"	m	class:QCPAxis
mTickStep	qcustomplot.h	/^  double mTickStep;$/;"	m	class:QCPAxisTickerFixed
mTickStepStrategy	qcustomplot.h	/^  TickStepStrategy mTickStepStrategy;$/;"	m	class:QCPAxisTicker
mTickVector	qcustomplot.h	/^  QVector<double> mTickVector;$/;"	m	class:QCPAxis
mTickVectorLabels	qcustomplot.h	/^  QVector<QString> mTickVectorLabels;$/;"	m	class:QCPAxis
mTicker	qcustomplot.h	/^  QSharedPointer<QCPAxisTicker> mTicker;$/;"	m	class:QCPAxis
mTicks	qcustomplot.h	/^  QMap<double, QString> mTicks;$/;"	m	class:QCPAxisTickerText
mTicks	qcustomplot.h	/^  bool mTicks;$/;"	m	class:QCPAxis
mTightBoundary	qcustomplot.h	/^  bool mTightBoundary;$/;"	m	class:QCPColorMap
mTimeFormat	qcustomplot.h	/^  QString mTimeFormat;$/;"	m	class:QCPAxisTickerTime
mTransformationMode	qcustomplot.h	/^  Qt::TransformationMode mTransformationMode;$/;"	m	class:QCPItemPixmap
mTwoColored	qcustomplot.h	/^  bool mTwoColored;$/;"	m	class:QCPFinancial
mType	qcustomplot.h	/^  QCPAxis::AxisType mType;$/;"	m	class:QCPColorScale
mUndersampledMapImage	qcustomplot.h	/^  QImage mMapImage, mUndersampledMapImage;$/;"	m	class:QCPColorMap
mUsedScatterProperties	qcustomplot.h	/^  QCPScatterStyle::ScatterProperties mUsedScatterProperties;$/;"	m	class:QCPSelectionDecorator
mValue	qcustomplot.h	/^  double mKey, mValue;$/;"	m	class:QCPItemPosition
mValueAxis	qcustomplot.h	/^  QPointer<QCPAxis> mKeyAxis, mValueAxis;$/;"	m	class:QCPAbstractPlottable
mValueAxis	qcustomplot.h	/^  QPointer<QCPAxis> mKeyAxis, mValueAxis;$/;"	m	class:QCPItemPosition
mValueRange	qcustomplot.h	/^  QCPRange mKeyRange, mValueRange;$/;"	m	class:QCPColorMapData
mValueSize	qcustomplot.h	/^  int mKeySize, mValueSize;$/;"	m	class:QCPColorMapData
mViewport	qcustomplot.h	/^  QRect mViewport;$/;"	m	class:QCustomPlot
mVisible	qcustomplot.h	/^  bool mVisible;$/;"	m	class:QCPLayer
mVisible	qcustomplot.h	/^  bool mVisible;$/;"	m	class:QCPLayerable
mWhiskerAntialiased	qcustomplot.h	/^  bool mWhiskerAntialiased;$/;"	m	class:QCPStatisticalBox
mWhiskerBarPen	qcustomplot.h	/^  QPen mWhiskerPen, mWhiskerBarPen;$/;"	m	class:QCPStatisticalBox
mWhiskerPen	qcustomplot.h	/^  QPen mWhiskerPen, mWhiskerBarPen;$/;"	m	class:QCPStatisticalBox
mWhiskerWidth	qcustomplot.h	/^  double mWhiskerWidth;$/;"	m	class:QCPErrorBars
mWhiskerWidth	qcustomplot.h	/^  double mWhiskerWidth;$/;"	m	class:QCPStatisticalBox
mWidth	qcustomplot.h	/^  double mWidth, mLength;$/;"	m	class:QCPLineEnding
mWidth	qcustomplot.h	/^  double mWidth;$/;"	m	class:QCPBars
mWidth	qcustomplot.h	/^  double mWidth;$/;"	m	class:QCPFinancial
mWidth	qcustomplot.h	/^  double mWidth;$/;"	m	class:QCPStatisticalBox
mWidthType	qcustomplot.h	/^  WidthType mWidthType;$/;"	m	class:QCPBars
mWidthType	qcustomplot.h	/^  WidthType mWidthType;$/;"	m	class:QCPFinancial
mWrap	qcustomplot.h	/^  int mWrap;$/;"	m	class:QCPLayoutGrid
mX	qcustomplot.h	/^  double mX, mY;$/;"	m	class:QCPVector2D
mY	qcustomplot.h	/^  double mX, mY;$/;"	m	class:QCPVector2D
mZeroLinePen	qcustomplot.h	/^  QPen mPen, mSubGridPen, mZeroLinePen;$/;"	m	class:QCPGrid
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
mainBrush	qcustomplot.cpp	/^QBrush QCPItemEllipse::mainBrush() const$/;"	f	class:QCPItemEllipse
mainBrush	qcustomplot.cpp	/^QBrush QCPItemRect::mainBrush() const$/;"	f	class:QCPItemRect
mainBrush	qcustomplot.cpp	/^QBrush QCPItemText::mainBrush() const$/;"	f	class:QCPItemText
mainBrush	qcustomplot.cpp	/^QBrush QCPItemTracer::mainBrush() const$/;"	f	class:QCPItemTracer
mainColor	qcustomplot.cpp	/^QColor QCPItemText::mainColor() const$/;"	f	class:QCPItemText
mainFont	qcustomplot.cpp	/^QFont QCPItemText::mainFont() const$/;"	f	class:QCPItemText
mainFont	qcustomplot.cpp	/^QFont QCPTextElement::mainFont() const$/;"	f	class:QCPTextElement
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPBarsData
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPCurveData
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPFinancialData
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPGraphData
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPStatisticalBoxData
mainPen	qcustomplot.cpp	/^QPen QCPItemBracket::mainPen() const$/;"	f	class:QCPItemBracket
mainPen	qcustomplot.cpp	/^QPen QCPItemCurve::mainPen() const$/;"	f	class:QCPItemCurve
mainPen	qcustomplot.cpp	/^QPen QCPItemEllipse::mainPen() const$/;"	f	class:QCPItemEllipse
mainPen	qcustomplot.cpp	/^QPen QCPItemLine::mainPen() const$/;"	f	class:QCPItemLine
mainPen	qcustomplot.cpp	/^QPen QCPItemPixmap::mainPen() const$/;"	f	class:QCPItemPixmap
mainPen	qcustomplot.cpp	/^QPen QCPItemRect::mainPen() const$/;"	f	class:QCPItemRect
mainPen	qcustomplot.cpp	/^QPen QCPItemStraightLine::mainPen() const$/;"	f	class:QCPItemStraightLine
mainPen	qcustomplot.cpp	/^QPen QCPItemText::mainPen() const$/;"	f	class:QCPItemText
mainPen	qcustomplot.cpp	/^QPen QCPItemTracer::mainPen() const$/;"	f	class:QCPItemTracer
mainTextColor	qcustomplot.cpp	/^QColor QCPTextElement::mainTextColor() const$/;"	f	class:QCPTextElement
mainValue	qcustomplot.h	/^  inline double mainValue() const { return median; }$/;"	f	class:QCPStatisticalBoxData
mainValue	qcustomplot.h	/^  inline double mainValue() const { return open; }$/;"	f	class:QCPFinancialData
mainValue	qcustomplot.h	/^  inline double mainValue() const { return value; }$/;"	f	class:QCPBarsData
mainValue	qcustomplot.h	/^  inline double mainValue() const { return value; }$/;"	f	class:QCPCurveData
mainValue	qcustomplot.h	/^  inline double mainValue() const { return value; }$/;"	f	class:QCPGraphData
makeNonCosmetic	qcustomplot.cpp	/^void QCPPainter::makeNonCosmetic()$/;"	f	class:QCPPainter
marginGroup	qcustomplot.h	/^  QCPMarginGroup *marginGroup(QCP::MarginSide side) const { return mMarginGroups.value(side, (QCPMarginGroup*)0); }$/;"	f	class:QCPLayoutElement
marginGroups	qcustomplot.h	/^  QHash<QCP::MarginSide, QCPMarginGroup*> marginGroups() const { return mMarginGroups; }$/;"	f	class:QCPLayoutElement
marginSideToAxisType	qcustomplot.cpp	/^QCPAxis::AxisType QCPAxis::marginSideToAxisType(QCP::MarginSide side)$/;"	f	class:QCPAxis
margins	qcustomplot.h	/^  QMargins margins() const { return mMargins; }$/;"	f	class:QCPLayoutElement
maxRange	qcustomplot.cpp	/^const double QCPRange::maxRange = 1e250;$/;"	m	class:QCPRange	file:
maxRange	qcustomplot.h	/^  static const double maxRange;$/;"	m	class:QCPRange
maximum	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData
maximumOuterSizeHint	qcustomplot.cpp	/^QSize QCPLayoutElement::maximumOuterSizeHint() const$/;"	f	class:QCPLayoutElement
maximumOuterSizeHint	qcustomplot.cpp	/^QSize QCPLayoutGrid::maximumOuterSizeHint() const$/;"	f	class:QCPLayoutGrid
maximumOuterSizeHint	qcustomplot.cpp	/^QSize QCPTextElement::maximumOuterSizeHint() const$/;"	f	class:QCPTextElement
maximumSize	qcustomplot.h	/^  QSize maximumSize() const { return mMaximumSize; }$/;"	f	class:QCPLayoutElement
mayTraverse	qcustomplot.cpp	/^bool QCPCurve::mayTraverse(int prevRegion, int currentRegion) const$/;"	f	class:QCPCurve
median	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData
medianPen	qcustomplot.h	/^  QPen medianPen() const { return mMedianPen; }$/;"	f	class:QCPStatisticalBox
minRange	qcustomplot.cpp	/^const double QCPRange::minRange = 1e-280;$/;"	m	class:QCPRange	file:
minRange	qcustomplot.h	/^  static const double minRange;$/;"	m	class:QCPRange
minimum	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData
minimumMargins	qcustomplot.h	/^  QMargins minimumMargins() const { return mMinimumMargins; }$/;"	f	class:QCPLayoutElement
minimumOuterSizeHint	qcustomplot.cpp	/^QSize QCPLayoutElement::minimumOuterSizeHint() const$/;"	f	class:QCPLayoutElement
minimumOuterSizeHint	qcustomplot.cpp	/^QSize QCPLayoutGrid::minimumOuterSizeHint() const$/;"	f	class:QCPLayoutGrid
minimumOuterSizeHint	qcustomplot.cpp	/^QSize QCPPlottableLegendItem::minimumOuterSizeHint() const$/;"	f	class:QCPPlottableLegendItem
minimumOuterSizeHint	qcustomplot.cpp	/^QSize QCPTextElement::minimumOuterSizeHint() const$/;"	f	class:QCPTextElement
minimumSize	qcustomplot.h	/^  QSize minimumSize() const { return mMinimumSize; }$/;"	f	class:QCPLayoutElement
minimumSizeHint	qcustomplot.cpp	/^QSize QCustomPlot::minimumSizeHint() const$/;"	f	class:QCustomPlot
mode	qcustomplot.h	/^  LayerMode mode() const { return mMode; }$/;"	f	class:QCPLayer
modes	qcustomplot.h	/^  PainterModes modes() const { return mModes; }$/;"	f	class:QCPPainter
mouseDoubleClickEvent	qcustomplot.cpp	/^void QCPLayerable::mouseDoubleClickEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPLayerable
mouseDoubleClickEvent	qcustomplot.cpp	/^void QCPTextElement::mouseDoubleClickEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPTextElement
mouseDoubleClickEvent	qcustomplot.cpp	/^void QCustomPlot::mouseDoubleClickEvent(QMouseEvent *event)$/;"	f	class:QCustomPlot
mouseMoveEvent	qcustomplot.cpp	/^void QCPAxis::mouseMoveEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPAxis
mouseMoveEvent	qcustomplot.cpp	/^void QCPAxisRect::mouseMoveEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPAxisRect
mouseMoveEvent	qcustomplot.cpp	/^void QCPColorScale::mouseMoveEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPColorScale
mouseMoveEvent	qcustomplot.cpp	/^void QCPLayerable::mouseMoveEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPLayerable
mouseMoveEvent	qcustomplot.cpp	/^void QCustomPlot::mouseMoveEvent(QMouseEvent *event)$/;"	f	class:QCustomPlot
mousePressEvent	qcustomplot.cpp	/^void QCPAxis::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPAxis
mousePressEvent	qcustomplot.cpp	/^void QCPAxisRect::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPAxisRect
mousePressEvent	qcustomplot.cpp	/^void QCPColorScale::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPColorScale
mousePressEvent	qcustomplot.cpp	/^void QCPLayerable::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPLayerable
mousePressEvent	qcustomplot.cpp	/^void QCPTextElement::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPTextElement
mousePressEvent	qcustomplot.cpp	/^void QCustomPlot::mousePressEvent(QMouseEvent *event)$/;"	f	class:QCustomPlot
mouseReleaseEvent	qcustomplot.cpp	/^void QCPAxis::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPAxis
mouseReleaseEvent	qcustomplot.cpp	/^void QCPAxisRect::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPAxisRect
mouseReleaseEvent	qcustomplot.cpp	/^void QCPColorScale::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPColorScale
mouseReleaseEvent	qcustomplot.cpp	/^void QCPLayerable::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPLayerable
mouseReleaseEvent	qcustomplot.cpp	/^void QCPTextElement::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPTextElement
mouseReleaseEvent	qcustomplot.cpp	/^void QCustomPlot::mouseReleaseEvent(QMouseEvent *event)$/;"	f	class:QCustomPlot
moveAbove	qcustomplot.cpp	/^void QCPBars::moveAbove(QCPBars *bars)$/;"	f	class:QCPBars
moveBelow	qcustomplot.cpp	/^void QCPBars::moveBelow(QCPBars *bars)$/;"	f	class:QCPBars
moveLayer	qcustomplot.cpp	/^bool QCustomPlot::moveLayer(QCPLayer *layer, QCPLayer *otherLayer, QCustomPlot::LayerInsertMode insertMode)$/;"	f	class:QCustomPlot
moveRange	qcustomplot.cpp	/^void QCPAxis::moveRange(double diff)$/;"	f	class:QCPAxis
moveSelection	qcustomplot.cpp	/^void QCPSelectionRect::moveSelection(QMouseEvent *event)$/;"	f	class:QCPSelectionRect
moveToLayer	qcustomplot.cpp	/^bool QCPLayerable::moveToLayer(QCPLayer *layer, bool prepend)$/;"	f	class:QCPLayerable
msAll	qcustomplot.h	/^                  ,msAll     = 0xFF \/\/\/< <tt>0xFF<\/tt> all margins$/;"	e	enum:QCP::MarginSide
msBottom	qcustomplot.h	/^                  ,msBottom  = 0x08 \/\/\/< <tt>0x08<\/tt> bottom margin$/;"	e	enum:QCP::MarginSide
msLeft	qcustomplot.h	/^enum MarginSide { msLeft     = 0x01 \/\/\/< <tt>0x01<\/tt> left margin$/;"	e	enum:QCP::MarginSide
msNone	qcustomplot.h	/^                  ,msNone    = 0x00 \/\/\/< <tt>0x00<\/tt> no margin$/;"	e	enum:QCP::MarginSide
msRight	qcustomplot.h	/^                  ,msRight   = 0x02 \/\/\/< <tt>0x02<\/tt> right margin$/;"	e	enum:QCP::MarginSide
msTop	qcustomplot.h	/^                  ,msTop     = 0x04 \/\/\/< <tt>0x04<\/tt> top margin$/;"	e	enum:QCP::MarginSide
multiSelectModifier	qcustomplot.h	/^  Qt::KeyboardModifier multiSelectModifier() const { return mMultiSelectModifier; }$/;"	f	class:QCustomPlot
n	mainwindow.h	/^    unsigned n;$/;"	m	class:MainWindow
n_draw	mainwindow.h	/^    int n_draw = 500;$/;"	m	class:MainWindow
name	qcustomplot.h	/^  QString name() const { return mName; }$/;"	f	class:QCPAbstractPlottable
name	qcustomplot.h	/^  QString name() const { return mName; }$/;"	f	class:QCPItemAnchor
name	qcustomplot.h	/^  QString name() const { return mName; }$/;"	f	class:QCPLayer
noAntialiasingOnDrag	qcustomplot.h	/^  bool noAntialiasingOnDrag() const { return mNoAntialiasingOnDrag; }$/;"	f	class:QCustomPlot
nonlin_x	mainwindow.h	/^    double nonlin_x[500];$/;"	m	class:MainWindow
nonlin_y	mainwindow.h	/^    double nonlin_y[500];$/;"	m	class:MainWindow
normalize	qcustomplot.cpp	/^void QCPVector2D::normalize()$/;"	f	class:QCPVector2D
normalize	qcustomplot.h	/^  void normalize() { if (lower > upper) qSwap(lower, upper); }$/;"	f	class:QCPRange
normalized	qcustomplot.cpp	/^QCPVector2D QCPVector2D::normalized() const$/;"	f	class:QCPVector2D
notAntialiasedElements	qcustomplot.h	/^  QCP::AntialiasedElements notAntialiasedElements() const { return mNotAntialiasedElements; }$/;"	f	class:QCustomPlot
numberFormat	qcustomplot.cpp	/^QString QCPAxis::numberFormat() const$/;"	f	class:QCPAxis
numberMultiplyCross	qcustomplot.h	/^  bool numberMultiplyCross; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
numberPrecision	qcustomplot.h	/^  int numberPrecision() const { return mNumberPrecision; }$/;"	f	class:QCPAxis
offset	qcustomplot.cpp	/^int QCPAxis::offset() const$/;"	f	class:QCPAxis
offset	qcustomplot.h	/^    QPointF offset;$/;"	m	struct:QCPAxisPainterPrivate::CachedLabel
offset	qcustomplot.h	/^  double offset; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
ohlcSelectTest	qcustomplot.cpp	/^double QCPFinancial::ohlcSelectTest(const QPointF &pos, const QCPFinancialDataContainer::const_iterator &begin, const QCPFinancialDataContainer::const_iterator &end, QCPFinancialDataContainer::const_iterator &closestDataPoint) const$/;"	f	class:QCPFinancial
onGraph	mainwindow.cpp	/^void MainWindow::onGraph(QMouseEvent *event)$/;"	f	class:MainWindow
on_btn_add_clicked	mainwindow.cpp	/^void MainWindow::on_btn_add_clicked()$/;"	f	class:MainWindow
on_btn_clear_clicked	mainwindow.cpp	/^void MainWindow::on_btn_clear_clicked()$/;"	f	class:MainWindow
on_pushButton_clicked	mainwindow.cpp	/^void MainWindow::on_pushButton_clicked()$/;"	f	class:MainWindow
open	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData
openGl	qcustomplot.h	/^  bool openGl() const { return mOpenGl; }$/;"	f	class:QCustomPlot
operator !=	qcustomplot.h	/^  bool operator!=(const QCPColorGradient &other) const { return !(*this == other); }$/;"	f	class:QCPColorGradient
operator !=	qcustomplot.h	/^  bool operator!=(const QCPDataRange& other) const { return !(*this == other); }$/;"	f	class:QCPDataRange
operator !=	qcustomplot.h	/^  bool operator!=(const QCPDataSelection& other) const { return !(*this == other); }$/;"	f	class:QCPDataSelection
operator !=	qcustomplot.h	/^  bool operator!=(const QCPRange& other) const { return !(*this == other); }$/;"	f	class:QCPRange
operator *	qcustomplot.h	/^inline const QCPRange operator*(const QCPRange& range, double value)$/;"	f
operator *	qcustomplot.h	/^inline const QCPRange operator*(double value, const QCPRange& range)$/;"	f
operator *	qcustomplot.h	/^inline const QCPVector2D operator*(const QCPVector2D &vec, double factor) { return QCPVector2D(vec.mX*factor, vec.mY*factor); }$/;"	f
operator *	qcustomplot.h	/^inline const QCPVector2D operator*(double factor, const QCPVector2D &vec) { return QCPVector2D(vec.mX*factor, vec.mY*factor); }$/;"	f
operator *=	qcustomplot.cpp	/^QCPVector2D &QCPVector2D::operator*=(double factor)$/;"	f	class:QCPVector2D
operator *=	qcustomplot.h	/^  QCPRange &operator*=(const double& value) { lower*=value; upper*=value; return *this; }$/;"	f	class:QCPRange
operator +	qcustomplot.h	/^inline const QCPDataSelection operator+(const QCPDataRange& a, const QCPDataRange& b)$/;"	f
operator +	qcustomplot.h	/^inline const QCPDataSelection operator+(const QCPDataRange& a, const QCPDataSelection& b)$/;"	f
operator +	qcustomplot.h	/^inline const QCPDataSelection operator+(const QCPDataSelection& a, const QCPDataRange& b)$/;"	f
operator +	qcustomplot.h	/^inline const QCPDataSelection operator+(const QCPDataSelection& a, const QCPDataSelection& b)$/;"	f
operator +	qcustomplot.h	/^inline const QCPRange operator+(const QCPRange& range, double value)$/;"	f
operator +	qcustomplot.h	/^inline const QCPRange operator+(double value, const QCPRange& range)$/;"	f
operator +	qcustomplot.h	/^inline const QCPVector2D operator+(const QCPVector2D &vec1, const QCPVector2D &vec2) { return QCPVector2D(vec1.mX+vec2.mX, vec1.mY+vec2.mY); }$/;"	f
operator +=	qcustomplot.cpp	/^QCPDataSelection &QCPDataSelection::operator+=(const QCPDataRange &other)$/;"	f	class:QCPDataSelection
operator +=	qcustomplot.cpp	/^QCPDataSelection &QCPDataSelection::operator+=(const QCPDataSelection &other)$/;"	f	class:QCPDataSelection
operator +=	qcustomplot.cpp	/^QCPVector2D &QCPVector2D::operator+=(const QCPVector2D &vector)$/;"	f	class:QCPVector2D
operator +=	qcustomplot.h	/^  QCPRange &operator+=(const double& value) { lower+=value; upper+=value; return *this; }$/;"	f	class:QCPRange
operator -	qcustomplot.h	/^inline const QCPDataSelection operator-(const QCPDataRange& a, const QCPDataRange& b)$/;"	f
operator -	qcustomplot.h	/^inline const QCPDataSelection operator-(const QCPDataRange& a, const QCPDataSelection& b)$/;"	f
operator -	qcustomplot.h	/^inline const QCPDataSelection operator-(const QCPDataSelection& a, const QCPDataRange& b)$/;"	f
operator -	qcustomplot.h	/^inline const QCPDataSelection operator-(const QCPDataSelection& a, const QCPDataSelection& b)$/;"	f
operator -	qcustomplot.h	/^inline const QCPRange operator-(const QCPRange& range, double value)$/;"	f
operator -	qcustomplot.h	/^inline const QCPVector2D operator-(const QCPVector2D &vec) { return QCPVector2D(-vec.mX, -vec.mY); }$/;"	f
operator -	qcustomplot.h	/^inline const QCPVector2D operator-(const QCPVector2D &vec1, const QCPVector2D &vec2) { return QCPVector2D(vec1.mX-vec2.mX, vec1.mY-vec2.mY); }$/;"	f
operator -=	qcustomplot.cpp	/^QCPDataSelection &QCPDataSelection::operator-=(const QCPDataRange &other)$/;"	f	class:QCPDataSelection
operator -=	qcustomplot.cpp	/^QCPDataSelection &QCPDataSelection::operator-=(const QCPDataSelection &other)$/;"	f	class:QCPDataSelection
operator -=	qcustomplot.cpp	/^QCPVector2D &QCPVector2D::operator-=(const QCPVector2D &vector)$/;"	f	class:QCPVector2D
operator -=	qcustomplot.h	/^  QCPRange &operator-=(const double& value) { lower-=value; upper-=value; return *this; }$/;"	f	class:QCPRange
operator /	qcustomplot.h	/^inline const QCPRange operator\/(const QCPRange& range, double value)$/;"	f
operator /	qcustomplot.h	/^inline const QCPVector2D operator\/(const QCPVector2D &vec, double divisor) { return QCPVector2D(vec.mX\/divisor, vec.mY\/divisor); }$/;"	f
operator /=	qcustomplot.cpp	/^QCPVector2D &QCPVector2D::operator\/=(double divisor)$/;"	f	class:QCPVector2D
operator /=	qcustomplot.h	/^  QCPRange &operator\/=(const double& value) { lower\/=value; upper\/=value; return *this; }$/;"	f	class:QCPRange
operator <<	qcustomplot.h	/^inline QDebug operator<< (QDebug d, const QCPDataRange &dataRange)$/;"	f
operator <<	qcustomplot.h	/^inline QDebug operator<< (QDebug d, const QCPDataSelection &selection)$/;"	f
operator <<	qcustomplot.h	/^inline QDebug operator<< (QDebug d, const QCPRange &range)$/;"	f
operator <<	qcustomplot.h	/^inline QDebug operator<< (QDebug d, const QCPVector2D &vec)$/;"	f
operator =	qcustomplot.cpp	/^QCPColorMapData &QCPColorMapData::operator=(const QCPColorMapData &other)$/;"	f	class:QCPColorMapData
operator ==	qcustomplot.cpp	/^bool QCPColorGradient::operator==(const QCPColorGradient &other) const$/;"	f	class:QCPColorGradient
operator ==	qcustomplot.cpp	/^bool QCPDataSelection::operator==(const QCPDataSelection &other) const$/;"	f	class:QCPDataSelection
operator ==	qcustomplot.h	/^  bool operator==(const QCPDataRange& other) const { return mBegin == other.mBegin && mEnd == other.mEnd; }$/;"	f	class:QCPDataRange
operator ==	qcustomplot.h	/^  bool operator==(const QCPRange& other) const { return lower == other.lower && upper == other.upper; }$/;"	f	class:QCPRange
opposite	qcustomplot.cpp	/^QCPAxis::AxisType QCPAxis::opposite(QCPAxis::AxisType type)$/;"	f	class:QCPAxis
orientation	qcustomplot.h	/^  Qt::Orientation orientation() const { return mOrientation; }$/;"	f	class:QCPAxis
orientation	qcustomplot.h	/^  static Qt::Orientation orientation(AxisType type) { return type==atBottom||type==atTop ? Qt::Horizontal : Qt::Vertical; }$/;"	f	class:QCPAxis
outerRect	qcustomplot.h	/^  QRect outerRect() const { return mOuterRect; }$/;"	f	class:QCPLayoutElement
outlierStyle	qcustomplot.h	/^  QCPScatterStyle outlierStyle() const { return mOutlierStyle; }$/;"	f	class:QCPStatisticalBox
outliers	qcustomplot.h	/^  QVector<double> outliers;$/;"	m	class:QCPStatisticalBoxData
padding	qcustomplot.h	/^  QMargins padding() const { return mPadding; }$/;"	f	class:QCPItemText
padding	qcustomplot.h	/^  int padding() const { return mPadding; }$/;"	f	class:QCPAxis
paintEvent	qcustomplot.cpp	/^void QCustomPlot::paintEvent(QPaintEvent *event)$/;"	f	class:QCustomPlot
parentAnchor	qcustomplot.h	/^  QCPItemAnchor *parentAnchor() const { return parentAnchorX(); }$/;"	f	class:QCPItemPosition
parentAnchorX	qcustomplot.h	/^  QCPItemAnchor *parentAnchorX() const { return mParentAnchorX; }$/;"	f	class:QCPItemPosition
parentAnchorY	qcustomplot.h	/^  QCPItemAnchor *parentAnchorY() const { return mParentAnchorY; }$/;"	f	class:QCPItemPosition
parentLayerable	qcustomplot.h	/^  QCPLayerable *parentLayerable() const { return mParentLayerable.data(); }$/;"	f	class:QCPLayerable
parentLegend	qcustomplot.h	/^  QCPLegend *parentLegend() const { return mParentLegend; }$/;"	f	class:QCPAbstractLegendItem
parentPlot	qcustomplot.h	/^  QCustomPlot *parentPlot() const { return mParentPlot; }$/;"	f	class:QCPLayer
parentPlot	qcustomplot.h	/^  QCustomPlot *parentPlot() const { return mParentPlot; }$/;"	f	class:QCPLayerable
parentPlotInitialized	qcustomplot.cpp	/^void QCPLayerable::parentPlotInitialized(QCustomPlot *parentPlot)$/;"	f	class:QCPLayerable
parentPlotInitialized	qcustomplot.cpp	/^void QCPLayoutElement::parentPlotInitialized(QCustomPlot *parentPlot)$/;"	f	class:QCPLayoutElement
parentPlotInitialized	qcustomplot.cpp	/^void QCPLegend::parentPlotInitialized(QCustomPlot *parentPlot)$/;"	f	class:QCPLegend
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPAbstractPlottable
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPGrid
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemBracket
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemCurve
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemEllipse
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemLine
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemPixmap
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemRect
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemStraightLine
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemText
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemTracer
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPScatterStyle
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPSelectionDecorator
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPSelectionRect
penNegative	qcustomplot.h	/^  QPen penNegative() const { return mPenNegative; }$/;"	f	class:QCPFinancial
penPositive	qcustomplot.h	/^  QPen penPositive() const { return mPenPositive; }$/;"	f	class:QCPFinancial
performAutoSqueeze	qcustomplot.h	/^void QCPDataContainer<DataType>::performAutoSqueeze()$/;"	f	class:QCPDataContainer
periodic	qcustomplot.h	/^  bool periodic() const { return mPeriodic; }$/;"	f	class:QCPColorGradient
periodicity	qcustomplot.h	/^  bool periodicity() const { return mPeriodicity; }$/;"	f	class:QCPAxisTickerPi
perpendicular	qcustomplot.h	/^  QCPVector2D perpendicular() const { return QCPVector2D(-mY, mX); }$/;"	f	class:QCPVector2D
phCacheLabels	qcustomplot.h	/^                    ,phCacheLabels      = 0x004 \/\/\/< <tt>0x004<\/tt> axis (tick) labels will be cached as pixmaps, increasing replot performance.$/;"	e	enum:QCP::PlottingHint
phFastPolylines	qcustomplot.h	/^                    ,phFastPolylines    = 0x001 \/\/\/< <tt>0x001<\/tt> Graph\/Curve lines are drawn with a faster method. This reduces the quality especially of the line segment$/;"	e	enum:QCP::PlottingHint
phImmediateRefresh	qcustomplot.h	/^                    ,phImmediateRefresh = 0x002 \/\/\/< <tt>0x002<\/tt> causes an immediate repaint() instead of a soft update() when QCustomPlot::replot() is called with parameter \\ref QCustomPlot::rpRefreshHint.$/;"	e	enum:QCP::PlottingHint
phNone	qcustomplot.h	/^enum PlottingHint { phNone              = 0x000 \/\/\/< <tt>0x000<\/tt> No hints are set$/;"	e	enum:QCP::PlottingHint
piSymbol	qcustomplot.h	/^  QString piSymbol() const { return mPiSymbol; }$/;"	f	class:QCPAxisTickerPi
piValue	qcustomplot.h	/^  double piValue() const { return mPiValue; }$/;"	f	class:QCPAxisTickerPi
pickClosest	qcustomplot.cpp	/^double QCPAxisTicker::pickClosest(double target, const QVector<double> &candidates) const$/;"	f	class:QCPAxisTicker
pixelOrientation	qcustomplot.h	/^  int pixelOrientation() const { return rangeReversed() != (orientation()==Qt::Vertical) ? -1 : 1; }$/;"	f	class:QCPAxis
pixelPosition	qcustomplot.cpp	/^QPointF QCPItemAnchor::pixelPosition() const$/;"	f	class:QCPItemAnchor
pixelPosition	qcustomplot.cpp	/^QPointF QCPItemPosition::pixelPosition() const$/;"	f	class:QCPItemPosition
pixelToCoord	qcustomplot.cpp	/^double QCPAxis::pixelToCoord(double value) const$/;"	f	class:QCPAxis
pixelsToCoords	qcustomplot.cpp	/^void QCPAbstractPlottable::pixelsToCoords(const QPointF &pixelPos, double &key, double &value) const$/;"	f	class:QCPAbstractPlottable
pixelsToCoords	qcustomplot.cpp	/^void QCPAbstractPlottable::pixelsToCoords(double x, double y, double &key, double &value) const$/;"	f	class:QCPAbstractPlottable
pixmap	qcustomplot.h	/^    QPixmap pixmap;$/;"	m	struct:QCPAxisPainterPrivate::CachedLabel
pixmap	qcustomplot.h	/^  QPixmap pixmap() const { return mPixmap; }$/;"	f	class:QCPItemPixmap
pixmap	qcustomplot.h	/^  QPixmap pixmap() const { return mPixmap; }$/;"	f	class:QCPScatterStyle
placeTickLabel	qcustomplot.cpp	/^void QCPAxisPainterPrivate::placeTickLabel(QCPPainter *painter, double position, int distanceToAxis, const QString &text, QSize *tickLabelsSize)$/;"	f	class:QCPAxisPainterPrivate
plot	mainwindow.cpp	/^void MainWindow::plot()$/;"	f	class:MainWindow
plotLayout	qcustomplot.h	/^  QCPLayoutGrid *plotLayout() const { return mPlotLayout; }$/;"	f	class:QCustomPlot
plottable	qcustomplot.cpp	/^QCPAbstractPlottable *QCustomPlot::plottable()$/;"	f	class:QCustomPlot
plottable	qcustomplot.cpp	/^QCPAbstractPlottable *QCustomPlot::plottable(int index)$/;"	f	class:QCustomPlot
plottable	qcustomplot.h	/^  QCPAbstractPlottable *plottable() { return mPlottable; }$/;"	f	class:QCPPlottableLegendItem
plottableAt	qcustomplot.cpp	/^QCPAbstractPlottable *QCustomPlot::plottableAt(const QPointF &pos, bool onlySelectable) const$/;"	f	class:QCustomPlot
plottableCount	qcustomplot.cpp	/^int QCustomPlot::plottableCount() const$/;"	f	class:QCustomPlot
plottables	qcustomplot.cpp	/^QList<QCPAbstractPlottable*> QCPAxis::plottables() const$/;"	f	class:QCPAxis
plottables	qcustomplot.cpp	/^QList<QCPAbstractPlottable*> QCPAxisRect::plottables() const$/;"	f	class:QCPAxisRect
plottingHints	qcustomplot.h	/^  QCP::PlottingHints plottingHints() const { return mPlottingHints; }$/;"	f	class:QCustomPlot
pmDefault	qcustomplot.h	/^  enum PainterMode { pmDefault       = 0x00   \/\/\/< <tt>0x00<\/tt> Default mode for painting on screen devices$/;"	e	enum:QCPPainter::PainterMode
pmNoCaching	qcustomplot.h	/^                     ,pmNoCaching    = 0x02   \/\/\/< <tt>0x02<\/tt> Mode for all sorts of exports (e.g. PNG, PDF,...). For example, this prevents using cached pixmap labels$/;"	e	enum:QCPPainter::PainterMode
pmNonCosmetic	qcustomplot.h	/^                     ,pmNonCosmetic  = 0x04   \/\/\/< <tt>0x04<\/tt> Turns pen widths 0 to 1, i.e. disables cosmetic pens. (A cosmetic pen is always drawn with width 1 pixel in the vector image\/pdf viewer, independent of zoom.)$/;"	e	enum:QCPPainter::PainterMode
pmVectorized	qcustomplot.h	/^                     ,pmVectorized   = 0x01   \/\/\/< <tt>0x01<\/tt> Mode for vectorized painting (e.g. PDF export). For example, this prevents some antialiasing fixes.$/;"	e	enum:QCPPainter::PainterMode
point1	qcustomplot.h	/^  QCPItemPosition * const point1;$/;"	m	class:QCPItemStraightLine
point2	qcustomplot.h	/^  QCPItemPosition * const point2;$/;"	m	class:QCPItemStraightLine
pointDistance	qcustomplot.cpp	/^double QCPCurve::pointDistance(const QPointF &pixelPoint, QCPCurveDataContainer::const_iterator &closestData) const$/;"	f	class:QCPCurve
pointDistance	qcustomplot.cpp	/^double QCPErrorBars::pointDistance(const QPointF &pixelPoint, QCPErrorBarsDataContainer::const_iterator &closestData) const$/;"	f	class:QCPErrorBars
pointDistance	qcustomplot.cpp	/^double QCPGraph::pointDistance(const QPointF &pixelPoint, QCPGraphDataContainer::const_iterator &closestData) const$/;"	f	class:QCPGraph
position	qcustomplot.cpp	/^QCPItemPosition *QCPAbstractItem::position(const QString &name) const$/;"	f	class:QCPAbstractItem
position	qcustomplot.h	/^  QCPItemPosition * const position;$/;"	m	class:QCPItemText
position	qcustomplot.h	/^  QCPItemPosition * const position;$/;"	m	class:QCPItemTracer
positionAlignment	qcustomplot.h	/^  Qt::Alignment positionAlignment() const { return mPositionAlignment; }$/;"	f	class:QCPItemText
positions	qcustomplot.h	/^  QList<QCPItemPosition*> positions() const { return mPositions; }$/;"	f	class:QCPAbstractItem
preallocateGrow	qcustomplot.h	/^void QCPDataContainer<DataType>::preallocateGrow(int minimumPreallocSize)$/;"	f	class:QCPDataContainer
processPointSelection	qcustomplot.cpp	/^void QCustomPlot::processPointSelection(QMouseEvent *event)$/;"	f	class:QCustomPlot
processRectSelection	qcustomplot.cpp	/^void QCustomPlot::processRectSelection(QRect rect, QMouseEvent *event)$/;"	f	class:QCustomPlot
processRectZoom	qcustomplot.cpp	/^void QCustomPlot::processRectZoom(QRect rect, QMouseEvent *event)$/;"	f	class:QCustomPlot
ptAbsolute	qcustomplot.h	/^  enum PositionType { ptAbsolute        \/\/\/< Static positioning in pixels, starting from the top left corner of the viewport\/widget.$/;"	e	enum:QCPItemPosition::PositionType
ptAxisRectRatio	qcustomplot.h	/^                      ,ptAxisRectRatio  \/\/\/< Static positioning given by a fraction of the axis rect size (see \\ref setAxisRect). For example, if you call setCoords(0, 0), the position will be at the top$/;"	e	enum:QCPItemPosition::PositionType
ptPlotCoords	qcustomplot.h	/^                      ,ptPlotCoords     \/\/\/< Dynamic positioning at a plot coordinate defined by two axes (see \\ref setAxes).$/;"	e	enum:QCPItemPosition::PositionType
ptViewportRatio	qcustomplot.h	/^                      ,ptViewportRatio  \/\/\/< Static positioning given by a fraction of the viewport size. For example, if you call setCoords(0, 0), the position will be at the top$/;"	e	enum:QCPItemPosition::PositionType
qcpLessThanSortKey	qcustomplot.h	/^inline bool qcpLessThanSortKey(const DataType &a, const DataType &b) { return a.sortKey() < b.sortKey(); }$/;"	f
qv_x	mainwindow.h	/^    QVector<double> qv_x, qv_y;$/;"	m	class:MainWindow
qv_y	mainwindow.h	/^    QVector<double> qv_x, qv_y;$/;"	m	class:MainWindow
range	qcustomplot.cpp	/^QCPRange QCPSelectionRect::range(const QCPAxis *axis) const$/;"	f	class:QCPSelectionRect
range	qcustomplot.h	/^  const QCPRange range() const { return mRange; }$/;"	f	class:QCPAxis
rangeDrag	qcustomplot.cpp	/^bool QCPColorScale::rangeDrag() const$/;"	f	class:QCPColorScale
rangeDrag	qcustomplot.h	/^  Qt::Orientations rangeDrag() const { return mRangeDrag; }$/;"	f	class:QCPAxisRect
rangeDragAxes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::rangeDragAxes(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect
rangeDragAxis	qcustomplot.cpp	/^QCPAxis *QCPAxisRect::rangeDragAxis(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect
rangeReversed	qcustomplot.h	/^  bool rangeReversed() const { return mRangeReversed; }$/;"	f	class:QCPAxis
rangeZoom	qcustomplot.cpp	/^bool QCPColorScale::rangeZoom() const$/;"	f	class:QCPColorScale
rangeZoom	qcustomplot.h	/^  Qt::Orientations rangeZoom() const { return mRangeZoom; }$/;"	f	class:QCPAxisRect
rangeZoomAxes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::rangeZoomAxes(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect
rangeZoomAxis	qcustomplot.cpp	/^QCPAxis *QCPAxisRect::rangeZoomAxis(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect
rangeZoomFactor	qcustomplot.cpp	/^double QCPAxisRect::rangeZoomFactor(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect
realLength	qcustomplot.cpp	/^double QCPLineEnding::realLength() const$/;"	f	class:QCPLineEnding
realVisibility	qcustomplot.cpp	/^bool QCPLayerable::realVisibility() const$/;"	f	class:QCPLayerable
reallocateBuffer	qcustomplot.cpp	/^void QCPPaintBufferGlFbo::reallocateBuffer()$/;"	f	class:QCPPaintBufferGlFbo
reallocateBuffer	qcustomplot.cpp	/^void QCPPaintBufferGlPbuffer::reallocateBuffer()$/;"	f	class:QCPPaintBufferGlPbuffer
reallocateBuffer	qcustomplot.cpp	/^void QCPPaintBufferPixmap::reallocateBuffer()$/;"	f	class:QCPPaintBufferPixmap
recalculateDataBounds	qcustomplot.cpp	/^void QCPColorMapData::recalculateDataBounds()$/;"	f	class:QCPColorMapData
rect	qcustomplot.h	/^  QRect rect() const { return mRect; }$/;"	f	class:QCPLayoutElement
rect	qcustomplot.h	/^  QRect rect() const { return mRect; }$/;"	f	class:QCPSelectionRect
rectDistance	qcustomplot.cpp	/^double QCPAbstractItem::rectDistance(const QRectF &rect, const QPointF &pos, bool filledRect) const$/;"	f	class:QCPAbstractItem
rectIntersectsLine	qcustomplot.cpp	/^bool QCPErrorBars::rectIntersectsLine(const QRectF &pixelRect, const QLineF &line) const$/;"	f	class:QCPErrorBars
registerBars	qcustomplot.cpp	/^void QCPBarsGroup::registerBars(QCPBars *bars)$/;"	f	class:QCPBarsGroup
registerGraph	qcustomplot.cpp	/^bool QCustomPlot::registerGraph(QCPGraph *graph)$/;"	f	class:QCustomPlot
registerItem	qcustomplot.cpp	/^bool QCustomPlot::registerItem(QCPAbstractItem *item)$/;"	f	class:QCustomPlot
registerPlottable	qcustomplot.cpp	/^bool QCustomPlot::registerPlottable(QCPAbstractPlottable *plottable)$/;"	f	class:QCustomPlot
registerWithPlottable	qcustomplot.cpp	/^bool QCPSelectionDecorator::registerWithPlottable(QCPAbstractPlottable *plottable)$/;"	f	class:QCPSelectionDecorator
releaseElement	qcustomplot.cpp	/^void QCPLayout::releaseElement(QCPLayoutElement *el)$/;"	f	class:QCPLayout
remove	qcustomplot.cpp	/^bool QCPLayout::remove(QCPLayoutElement *element)$/;"	f	class:QCPLayout
remove	qcustomplot.cpp	/^void QCPBarsGroup::remove(QCPBars *bars)$/;"	f	class:QCPBarsGroup
remove	qcustomplot.h	/^void QCPDataContainer<DataType>::remove(double sortKey)$/;"	f	class:QCPDataContainer
remove	qcustomplot.h	/^void QCPDataContainer<DataType>::remove(double sortKeyFrom, double sortKeyTo)$/;"	f	class:QCPDataContainer
removeAfter	qcustomplot.h	/^void QCPDataContainer<DataType>::removeAfter(double sortKey)$/;"	f	class:QCPDataContainer
removeAt	qcustomplot.cpp	/^bool QCPLayout::removeAt(int index)$/;"	f	class:QCPLayout
removeAxis	qcustomplot.cpp	/^bool QCPAxisRect::removeAxis(QCPAxis *axis)$/;"	f	class:QCPAxisRect
removeBefore	qcustomplot.h	/^void QCPDataContainer<DataType>::removeBefore(double sortKey)$/;"	f	class:QCPDataContainer
removeChild	qcustomplot.cpp	/^void QCPLayer::removeChild(QCPLayerable *layerable)$/;"	f	class:QCPLayer
removeChild	qcustomplot.cpp	/^void QCPMarginGroup::removeChild(QCP::MarginSide side, QCPLayoutElement *element)$/;"	f	class:QCPMarginGroup
removeChildX	qcustomplot.cpp	/^void QCPItemAnchor::removeChildX(QCPItemPosition *pos)$/;"	f	class:QCPItemAnchor
removeChildY	qcustomplot.cpp	/^void QCPItemAnchor::removeChildY(QCPItemPosition *pos)$/;"	f	class:QCPItemAnchor
removeFromLegend	qcustomplot.cpp	/^bool QCPAbstractPlottable::removeFromLegend() const$/;"	f	class:QCPAbstractPlottable
removeFromLegend	qcustomplot.cpp	/^bool QCPAbstractPlottable::removeFromLegend(QCPLegend *legend) const$/;"	f	class:QCPAbstractPlottable
removeGraph	qcustomplot.cpp	/^bool QCustomPlot::removeGraph(QCPGraph *graph)$/;"	f	class:QCustomPlot
removeGraph	qcustomplot.cpp	/^bool QCustomPlot::removeGraph(int index)$/;"	f	class:QCustomPlot
removeItem	qcustomplot.cpp	/^bool QCPLegend::removeItem(QCPAbstractLegendItem *item)$/;"	f	class:QCPLegend
removeItem	qcustomplot.cpp	/^bool QCPLegend::removeItem(int index)$/;"	f	class:QCPLegend
removeItem	qcustomplot.cpp	/^bool QCustomPlot::removeItem(QCPAbstractItem *item)$/;"	f	class:QCustomPlot
removeItem	qcustomplot.cpp	/^bool QCustomPlot::removeItem(int index)$/;"	f	class:QCustomPlot
removeLayer	qcustomplot.cpp	/^bool QCustomPlot::removeLayer(QCPLayer *layer)$/;"	f	class:QCustomPlot
removePlottable	qcustomplot.cpp	/^bool QCustomPlot::removePlottable(QCPAbstractPlottable *plottable)$/;"	f	class:QCustomPlot
removePlottable	qcustomplot.cpp	/^bool QCustomPlot::removePlottable(int index)$/;"	f	class:QCustomPlot
replaceUnit	qcustomplot.cpp	/^void QCPAxisTickerTime::replaceUnit(QString &text, QCPAxisTickerTime::TimeUnit unit, int value) const$/;"	f	class:QCPAxisTickerTime
replot	qcustomplot.cpp	/^void QCPLayer::replot()$/;"	f	class:QCPLayer
replot	qcustomplot.cpp	/^void QCustomPlot::replot(QCustomPlot::RefreshPriority refreshPriority)$/;"	f	class:QCustomPlot
rescale	qcustomplot.cpp	/^void QCPAxis::rescale(bool onlyVisiblePlottables)$/;"	f	class:QCPAxis
rescaleAxes	qcustomplot.cpp	/^void QCPAbstractPlottable::rescaleAxes(bool onlyEnlarge) const$/;"	f	class:QCPAbstractPlottable
rescaleAxes	qcustomplot.cpp	/^void QCustomPlot::rescaleAxes(bool onlyVisiblePlottables)$/;"	f	class:QCustomPlot
rescaleDataRange	qcustomplot.cpp	/^void QCPColorMap::rescaleDataRange(bool recalculateDataBounds)$/;"	f	class:QCPColorMap
rescaleDataRange	qcustomplot.cpp	/^void QCPColorScale::rescaleDataRange(bool onlyVisibleMaps)$/;"	f	class:QCPColorScale
rescaleKeyAxis	qcustomplot.cpp	/^void QCPAbstractPlottable::rescaleKeyAxis(bool onlyEnlarge) const$/;"	f	class:QCPAbstractPlottable
rescaleValueAxis	qcustomplot.cpp	/^void QCPAbstractPlottable::rescaleValueAxis(bool onlyEnlarge, bool inKeyRange) const$/;"	f	class:QCPAbstractPlottable
resizeEvent	qcustomplot.cpp	/^void QCustomPlot::resizeEvent(QResizeEvent *event)$/;"	f	class:QCustomPlot
restore	qcustomplot.cpp	/^void QCPPainter::restore()$/;"	f	class:QCPPainter
reversedEndings	qcustomplot.h	/^  bool reversedEndings;$/;"	m	class:QCPAxisPainterPrivate
right	qcustomplot.h	/^  QCPItemAnchor * const right;$/;"	m	class:QCPItemEllipse
right	qcustomplot.h	/^  QCPItemAnchor * const right;$/;"	m	class:QCPItemPixmap
right	qcustomplot.h	/^  QCPItemAnchor * const right;$/;"	m	class:QCPItemRect
right	qcustomplot.h	/^  QCPItemAnchor * const right;$/;"	m	class:QCPItemText
right	qcustomplot.h	/^  QCPItemPosition * const right;$/;"	m	class:QCPItemBracket
right	qcustomplot.h	/^  int right() const { return mRect.right(); }$/;"	f	class:QCPAxisRect
rotatedTotalBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
rotation	qcustomplot.h	/^  double rotation() const { return mRotation; }$/;"	f	class:QCPItemText
rowColToIndex	qcustomplot.cpp	/^int QCPLayoutGrid::rowColToIndex(int row, int column) const$/;"	f	class:QCPLayoutGrid
rowCount	qcustomplot.h	/^  int rowCount() const { return mElements.size(); }$/;"	f	class:QCPLayoutGrid
rowSpacing	qcustomplot.h	/^  int rowSpacing() const { return mRowSpacing; }$/;"	f	class:QCPLayoutGrid
rowStretchFactors	qcustomplot.h	/^  QList<double> rowStretchFactors() const { return mRowStretchFactors; }$/;"	f	class:QCPLayoutGrid
rpImmediateRefresh	qcustomplot.h	/^  enum RefreshPriority { rpImmediateRefresh \/\/\/< Replots immediately and repaints the widget immediately by calling QWidget::repaint() after the replot$/;"	e	enum:QCustomPlot::RefreshPriority
rpQueuedRefresh	qcustomplot.h	/^                         ,rpQueuedRefresh   \/\/\/< Replots immediately, but queues the widget repaint, by calling QWidget::update() after the replot. This way multiple redundant widget repaints can be avoided.$/;"	e	enum:QCustomPlot::RefreshPriority
rpQueuedReplot	qcustomplot.h	/^                         ,rpQueuedReplot    \/\/\/< Queues the entire replot for the next event loop iteration. This way multiple redundant replots can be avoided. The actual replot is then done with \\ref rpRefreshHint priority.$/;"	e	enum:QCustomPlot::RefreshPriority
rpRefreshHint	qcustomplot.h	/^                         ,rpRefreshHint     \/\/\/< Whether to use immediate or queued refresh depends on whether the plotting hint \\ref QCP::phImmediateRefresh is set, see \\ref setPlottingHints.$/;"	e	enum:QCustomPlot::RefreshPriority
ruDotsPerCentimeter	qcustomplot.h	/^                      ,ruDotsPerCentimeter \/\/\/< Resolution is given in dots per centimeter (dpcm)$/;"	e	enum:QCP::ResolutionUnit
ruDotsPerInch	qcustomplot.h	/^                      ,ruDotsPerInch       \/\/\/< Resolution is given in dots per inch (DPI\/PPI)$/;"	e	enum:QCP::ResolutionUnit
ruDotsPerMeter	qcustomplot.h	/^enum ResolutionUnit { ruDotsPerMeter       \/\/\/< Resolution is given in dots per meter (dpm)$/;"	e	enum:QCP::ResolutionUnit
rx	qcustomplot.h	/^  double &rx() { return mX; }$/;"	f	class:QCPVector2D
ry	qcustomplot.h	/^  double &ry() { return mY; }$/;"	f	class:QCPVector2D
sanitizedForLinScale	qcustomplot.cpp	/^QCPRange QCPRange::sanitizedForLinScale() const$/;"	f	class:QCPRange
sanitizedForLogScale	qcustomplot.cpp	/^QCPRange QCPRange::sanitizedForLogScale() const$/;"	f	class:QCPRange
save	qcustomplot.cpp	/^void QCPPainter::save()$/;"	f	class:QCPPainter
saveBmp	qcustomplot.cpp	/^bool QCustomPlot::saveBmp(const QString &fileName, int width, int height, double scale, int resolution, QCP::ResolutionUnit resolutionUnit)$/;"	f	class:QCustomPlot
saveJpg	qcustomplot.cpp	/^bool QCustomPlot::saveJpg(const QString &fileName, int width, int height, double scale, int quality, int resolution, QCP::ResolutionUnit resolutionUnit)$/;"	f	class:QCustomPlot
savePdf	qcustomplot.cpp	/^bool QCustomPlot::savePdf(const QString &fileName, int width, int height, QCP::ExportPen exportPen, const QString &pdfCreator, const QString &pdfTitle)$/;"	f	class:QCustomPlot
savePng	qcustomplot.cpp	/^bool QCustomPlot::savePng(const QString &fileName, int width, int height, double scale, int quality, int resolution, QCP::ResolutionUnit resolutionUnit)$/;"	f	class:QCustomPlot
saveRastered	qcustomplot.cpp	/^bool QCustomPlot::saveRastered(const QString &fileName, int width, int height, double scale, const char *format, int quality, int resolution, QCP::ResolutionUnit resolutionUnit)$/;"	f	class:QCustomPlot
scaleRange	qcustomplot.cpp	/^void QCPAxis::scaleRange(double factor)$/;"	f	class:QCPAxis
scaleRange	qcustomplot.cpp	/^void QCPAxis::scaleRange(double factor, double center)$/;"	f	class:QCPAxis
scaleStrategy	qcustomplot.h	/^  ScaleStrategy scaleStrategy() const { return mScaleStrategy; }$/;"	f	class:QCPAxisTickerFixed
scaleType	qcustomplot.h	/^  ScaleType scaleType() const { return mScaleType; }$/;"	f	class:QCPAxis
scaled	qcustomplot.h	/^  bool scaled() const { return mScaled; }$/;"	f	class:QCPItemPixmap
scatterSkip	qcustomplot.h	/^  int scatterSkip() const { return mScatterSkip; }$/;"	f	class:QCPCurve
scatterSkip	qcustomplot.h	/^  int scatterSkip() const { return mScatterSkip; }$/;"	f	class:QCPGraph
scatterStyle	qcustomplot.h	/^  QCPScatterStyle scatterStyle() const { return mScatterStyle; }$/;"	f	class:QCPCurve
scatterStyle	qcustomplot.h	/^  QCPScatterStyle scatterStyle() const { return mScatterStyle; }$/;"	f	class:QCPGraph
scatterStyle	qcustomplot.h	/^  QCPScatterStyle scatterStyle() const { return mScatterStyle; }$/;"	f	class:QCPSelectionDecorator
scrInnerRect	qcustomplot.h	/^  enum SizeConstraintRect { scrInnerRect \/\/\/< Minimum\/Maximum size constraints apply to inner rect$/;"	e	enum:QCPLayoutElement::SizeConstraintRect
scrOuterRect	qcustomplot.h	/^                            , scrOuterRect \/\/\/< Minimum\/Maximum size constraints apply to outer rect, thus include layout element margins$/;"	e	enum:QCPLayoutElement::SizeConstraintRect
sdBoth	qcustomplot.h	/^                  ,sdBoth     \/\/\/< Both sign domains, including zero, i.e. all numbers$/;"	e	enum:QCP::SignDomain
sdNegative	qcustomplot.h	/^enum SignDomain { sdNegative  \/\/\/< The negative sign domain, i.e. numbers smaller than zero$/;"	e	enum:QCP::SignDomain
sdPositive	qcustomplot.h	/^                  ,sdPositive \/\/\/< The positive sign domain, i.e. numbers greater than zero$/;"	e	enum:QCP::SignDomain
segmentsIntersect	qcustomplot.cpp	/^bool QCPGraph::segmentsIntersect(double aLower, double aUpper, double bLower, double bUpper, int &bPrecedence) const$/;"	f	class:QCPGraph
selectEvent	qcustomplot.cpp	/^void QCPAbstractItem::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)$/;"	f	class:QCPAbstractItem
selectEvent	qcustomplot.cpp	/^void QCPAbstractLegendItem::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)$/;"	f	class:QCPAbstractLegendItem
selectEvent	qcustomplot.cpp	/^void QCPAbstractPlottable::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)$/;"	f	class:QCPAbstractPlottable
selectEvent	qcustomplot.cpp	/^void QCPAxis::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)$/;"	f	class:QCPAxis
selectEvent	qcustomplot.cpp	/^void QCPLayerable::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)$/;"	f	class:QCPLayerable
selectEvent	qcustomplot.cpp	/^void QCPLegend::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)$/;"	f	class:QCPLegend
selectEvent	qcustomplot.cpp	/^void QCPTextElement::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)$/;"	f	class:QCPTextElement
selectTest	qcustomplot.cpp	/^double QCPAbstractLegendItem::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPAbstractLegendItem
selectTest	qcustomplot.cpp	/^double QCPAxis::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPAxis
selectTest	qcustomplot.cpp	/^double QCPBars::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPBars
selectTest	qcustomplot.cpp	/^double QCPColorMap::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPColorMap
selectTest	qcustomplot.cpp	/^double QCPCurve::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPCurve
selectTest	qcustomplot.cpp	/^double QCPErrorBars::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPErrorBars
selectTest	qcustomplot.cpp	/^double QCPFinancial::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPFinancial
selectTest	qcustomplot.cpp	/^double QCPGraph::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPGraph
selectTest	qcustomplot.cpp	/^double QCPItemBracket::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemBracket
selectTest	qcustomplot.cpp	/^double QCPItemCurve::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemCurve
selectTest	qcustomplot.cpp	/^double QCPItemEllipse::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemEllipse
selectTest	qcustomplot.cpp	/^double QCPItemLine::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemLine
selectTest	qcustomplot.cpp	/^double QCPItemPixmap::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemPixmap
selectTest	qcustomplot.cpp	/^double QCPItemRect::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemRect
selectTest	qcustomplot.cpp	/^double QCPItemStraightLine::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemStraightLine
selectTest	qcustomplot.cpp	/^double QCPItemText::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemText
selectTest	qcustomplot.cpp	/^double QCPItemTracer::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemTracer
selectTest	qcustomplot.cpp	/^double QCPLayerable::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPLayerable
selectTest	qcustomplot.cpp	/^double QCPLayoutElement::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPLayoutElement
selectTest	qcustomplot.cpp	/^double QCPLayoutInset::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPLayoutInset
selectTest	qcustomplot.cpp	/^double QCPLegend::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPLegend
selectTest	qcustomplot.cpp	/^double QCPStatisticalBox::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPStatisticalBox
selectTest	qcustomplot.cpp	/^double QCPTextElement::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPTextElement
selectTest	qcustomplot.h	/^double QCPAbstractPlottable1D<DataType>::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPAbstractPlottable1D
selectTestRect	qcustomplot.cpp	/^QCPDataSelection QCPBars::selectTestRect(const QRectF &rect, bool onlySelectable) const$/;"	f	class:QCPBars
selectTestRect	qcustomplot.cpp	/^QCPDataSelection QCPErrorBars::selectTestRect(const QRectF &rect, bool onlySelectable) const$/;"	f	class:QCPErrorBars
selectTestRect	qcustomplot.cpp	/^QCPDataSelection QCPFinancial::selectTestRect(const QRectF &rect, bool onlySelectable) const$/;"	f	class:QCPFinancial
selectTestRect	qcustomplot.cpp	/^QCPDataSelection QCPStatisticalBox::selectTestRect(const QRectF &rect, bool onlySelectable) const$/;"	f	class:QCPStatisticalBox
selectTestRect	qcustomplot.h	/^QCPDataSelection QCPAbstractPlottable1D<DataType>::selectTestRect(const QRectF &rect, bool onlySelectable) const$/;"	f	class:QCPAbstractPlottable1D
selectable	qcustomplot.h	/^  QCP::SelectionType selectable() const { return mSelectable; }$/;"	f	class:QCPAbstractPlottable
selectable	qcustomplot.h	/^  bool selectable() const { return mSelectable; }$/;"	f	class:QCPAbstractItem
selectable	qcustomplot.h	/^  bool selectable() const { return mSelectable; }$/;"	f	class:QCPAbstractLegendItem
selectable	qcustomplot.h	/^  bool selectable() const { return mSelectable; }$/;"	f	class:QCPTextElement
selectableParts	qcustomplot.h	/^  SelectableParts selectableParts() const { return mSelectableParts; }$/;"	f	class:QCPAxis
selectableParts	qcustomplot.h	/^  SelectableParts selectableParts() const { return mSelectableParts; }$/;"	f	class:QCPLegend
selected	qcustomplot.h	/^  bool selected() const { return !mSelection.isEmpty(); }$/;"	f	class:QCPAbstractPlottable
selected	qcustomplot.h	/^  bool selected() const { return mSelected; }$/;"	f	class:QCPAbstractItem
selected	qcustomplot.h	/^  bool selected() const { return mSelected; }$/;"	f	class:QCPAbstractLegendItem
selected	qcustomplot.h	/^  bool selected() const { return mSelected; }$/;"	f	class:QCPTextElement
selectedAxes	qcustomplot.cpp	/^QList<QCPAxis*> QCustomPlot::selectedAxes() const$/;"	f	class:QCustomPlot
selectedBasePen	qcustomplot.h	/^  QPen selectedBasePen() const { return mSelectedBasePen; }$/;"	f	class:QCPAxis
selectedBorderPen	qcustomplot.h	/^  QPen selectedBorderPen() const { return mSelectedBorderPen; }$/;"	f	class:QCPLegend
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPItemEllipse
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPItemRect
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPItemText
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPItemTracer
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPLegend
selectedColor	qcustomplot.h	/^  QColor selectedColor() const { return mSelectedColor; }$/;"	f	class:QCPItemText
selectedFont	qcustomplot.h	/^  QFont selectedFont() const { return mSelectedFont; }$/;"	f	class:QCPAbstractLegendItem
selectedFont	qcustomplot.h	/^  QFont selectedFont() const { return mSelectedFont; }$/;"	f	class:QCPItemText
selectedFont	qcustomplot.h	/^  QFont selectedFont() const { return mSelectedFont; }$/;"	f	class:QCPLegend
selectedFont	qcustomplot.h	/^  QFont selectedFont() const { return mSelectedFont; }$/;"	f	class:QCPTextElement
selectedGraphs	qcustomplot.cpp	/^QList<QCPGraph*> QCustomPlot::selectedGraphs() const$/;"	f	class:QCustomPlot
selectedIconBorderPen	qcustomplot.h	/^  QPen selectedIconBorderPen() const { return mSelectedIconBorderPen; }$/;"	f	class:QCPLegend
selectedItems	qcustomplot.cpp	/^QList<QCPAbstractItem*> QCustomPlot::selectedItems() const$/;"	f	class:QCustomPlot
selectedItems	qcustomplot.cpp	/^QList<QCPAbstractLegendItem *> QCPLegend::selectedItems() const$/;"	f	class:QCPLegend
selectedLabelColor	qcustomplot.h	/^  QColor selectedLabelColor() const { return mSelectedLabelColor; }$/;"	f	class:QCPAxis
selectedLabelFont	qcustomplot.h	/^  QFont selectedLabelFont() const { return mSelectedLabelFont; }$/;"	f	class:QCPAxis
selectedLegends	qcustomplot.cpp	/^QList<QCPLegend*> QCustomPlot::selectedLegends() const$/;"	f	class:QCustomPlot
selectedParts	qcustomplot.cpp	/^QCPLegend::SelectableParts QCPLegend::selectedParts() const$/;"	f	class:QCPLegend
selectedParts	qcustomplot.h	/^  SelectableParts selectedParts() const { return mSelectedParts; }$/;"	f	class:QCPAxis
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemBracket
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemCurve
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemEllipse
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemLine
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemPixmap
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemRect
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemStraightLine
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemText
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemTracer
selectedPlottables	qcustomplot.cpp	/^QList<QCPAbstractPlottable*> QCustomPlot::selectedPlottables() const$/;"	f	class:QCustomPlot
selectedSubTickPen	qcustomplot.h	/^  QPen selectedSubTickPen() const { return mSelectedSubTickPen; }$/;"	f	class:QCPAxis
selectedTextColor	qcustomplot.h	/^  QColor selectedTextColor() const { return mSelectedTextColor; }$/;"	f	class:QCPAbstractLegendItem
selectedTextColor	qcustomplot.h	/^  QColor selectedTextColor() const { return mSelectedTextColor; }$/;"	f	class:QCPLegend
selectedTextColor	qcustomplot.h	/^  QColor selectedTextColor() const { return mSelectedTextColor; }$/;"	f	class:QCPTextElement
selectedTickLabelColor	qcustomplot.h	/^  QColor selectedTickLabelColor() const { return mSelectedTickLabelColor; }$/;"	f	class:QCPAxis
selectedTickLabelFont	qcustomplot.h	/^  QFont selectedTickLabelFont() const { return mSelectedTickLabelFont; }$/;"	f	class:QCPAxis
selectedTickPen	qcustomplot.h	/^  QPen selectedTickPen() const { return mSelectedTickPen; }$/;"	f	class:QCPAxis
selection	qcustomplot.h	/^  QCPDataSelection selection() const { return mSelection; }$/;"	f	class:QCPAbstractPlottable
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPAbstractItem::selectionCategory() const$/;"	f	class:QCPAbstractItem
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPAbstractLegendItem::selectionCategory() const$/;"	f	class:QCPAbstractLegendItem
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPAbstractPlottable::selectionCategory() const$/;"	f	class:QCPAbstractPlottable
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPAxis::selectionCategory() const$/;"	f	class:QCPAxis
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPLayerable::selectionCategory() const$/;"	f	class:QCPLayerable
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPLegend::selectionCategory() const$/;"	f	class:QCPLegend
selectionDecorator	qcustomplot.h	/^  QCPSelectionDecorator *selectionDecorator() const { return mSelectionDecorator; }$/;"	f	class:QCPAbstractPlottable
selectionHitBox	qcustomplot.cpp	/^QRectF QCPFinancial::selectionHitBox(QCPFinancialDataContainer::const_iterator it) const$/;"	f	class:QCPFinancial
selectionRect	qcustomplot.h	/^  QCPSelectionRect *selectionRect() const { return mSelectionRect; }$/;"	f	class:QCustomPlot
selectionRectMode	qcustomplot.h	/^  QCP::SelectionRectMode selectionRectMode() const { return mSelectionRectMode; }$/;"	f	class:QCustomPlot
selectionTolerance	qcustomplot.h	/^  int selectionTolerance() const { return mSelectionTolerance; }$/;"	f	class:QCustomPlot
set	qcustomplot.h	/^void QCPDataContainer<DataType>::set(const QCPDataContainer<DataType> &data)$/;"	f	class:QCPDataContainer
set	qcustomplot.h	/^void QCPDataContainer<DataType>::set(const QVector<DataType> &data, bool alreadySorted)$/;"	f	class:QCPDataContainer
setAdaptiveSampling	qcustomplot.cpp	/^void QCPGraph::setAdaptiveSampling(bool enabled)$/;"	f	class:QCPGraph
setAlpha	qcustomplot.cpp	/^void QCPColorMapData::setAlpha(int keyIndex, int valueIndex, unsigned char alpha)$/;"	f	class:QCPColorMapData
setAntialiased	qcustomplot.cpp	/^void QCPLayerable::setAntialiased(bool enabled)$/;"	f	class:QCPLayerable
setAntialiasedElement	qcustomplot.cpp	/^void QCustomPlot::setAntialiasedElement(QCP::AntialiasedElement antialiasedElement, bool enabled)$/;"	f	class:QCustomPlot
setAntialiasedElements	qcustomplot.cpp	/^void QCustomPlot::setAntialiasedElements(const QCP::AntialiasedElements &antialiasedElements)$/;"	f	class:QCustomPlot
setAntialiasedFill	qcustomplot.cpp	/^void QCPAbstractPlottable::setAntialiasedFill(bool enabled)$/;"	f	class:QCPAbstractPlottable
setAntialiasedScatters	qcustomplot.cpp	/^void QCPAbstractPlottable::setAntialiasedScatters(bool enabled)$/;"	f	class:QCPAbstractPlottable
setAntialiasedSubGrid	qcustomplot.cpp	/^void QCPGrid::setAntialiasedSubGrid(bool enabled)$/;"	f	class:QCPGrid
setAntialiasedZeroLine	qcustomplot.cpp	/^void QCPGrid::setAntialiasedZeroLine(bool enabled)$/;"	f	class:QCPGrid
setAntialiasing	qcustomplot.cpp	/^void QCPPainter::setAntialiasing(bool enabled)$/;"	f	class:QCPPainter
setAutoAddPlottableToLegend	qcustomplot.cpp	/^void QCustomPlot::setAutoAddPlottableToLegend(bool on)$/;"	f	class:QCustomPlot
setAutoMargins	qcustomplot.cpp	/^void QCPLayoutElement::setAutoMargins(QCP::MarginSides sides)$/;"	f	class:QCPLayoutElement
setAutoSqueeze	qcustomplot.h	/^void QCPDataContainer<DataType>::setAutoSqueeze(bool enabled)$/;"	f	class:QCPDataContainer
setAxes	qcustomplot.cpp	/^void QCPItemPosition::setAxes(QCPAxis *keyAxis, QCPAxis *valueAxis)$/;"	f	class:QCPItemPosition
setAxisRect	qcustomplot.cpp	/^void QCPItemPosition::setAxisRect(QCPAxisRect *axisRect)$/;"	f	class:QCPItemPosition
setBackground	qcustomplot.cpp	/^void QCPAxisRect::setBackground(const QBrush &brush)$/;"	f	class:QCPAxisRect
setBackground	qcustomplot.cpp	/^void QCPAxisRect::setBackground(const QPixmap &pm)$/;"	f	class:QCPAxisRect
setBackground	qcustomplot.cpp	/^void QCPAxisRect::setBackground(const QPixmap &pm, bool scaled, Qt::AspectRatioMode mode)$/;"	f	class:QCPAxisRect
setBackground	qcustomplot.cpp	/^void QCustomPlot::setBackground(const QBrush &brush)$/;"	f	class:QCustomPlot
setBackground	qcustomplot.cpp	/^void QCustomPlot::setBackground(const QPixmap &pm)$/;"	f	class:QCustomPlot
setBackground	qcustomplot.cpp	/^void QCustomPlot::setBackground(const QPixmap &pm, bool scaled, Qt::AspectRatioMode mode)$/;"	f	class:QCustomPlot
setBackgroundScaled	qcustomplot.cpp	/^void QCPAxisRect::setBackgroundScaled(bool scaled)$/;"	f	class:QCPAxisRect
setBackgroundScaled	qcustomplot.cpp	/^void QCustomPlot::setBackgroundScaled(bool scaled)$/;"	f	class:QCustomPlot
setBackgroundScaledMode	qcustomplot.cpp	/^void QCPAxisRect::setBackgroundScaledMode(Qt::AspectRatioMode mode)$/;"	f	class:QCPAxisRect
setBackgroundScaledMode	qcustomplot.cpp	/^void QCustomPlot::setBackgroundScaledMode(Qt::AspectRatioMode mode)$/;"	f	class:QCustomPlot
setBarWidth	qcustomplot.cpp	/^void QCPColorScale::setBarWidth(int width)$/;"	f	class:QCPColorScale
setBarsGroup	qcustomplot.cpp	/^void QCPBars::setBarsGroup(QCPBarsGroup *barsGroup)$/;"	f	class:QCPBars
setBasePen	qcustomplot.cpp	/^void QCPAxis::setBasePen(const QPen &pen)$/;"	f	class:QCPAxis
setBaseValue	qcustomplot.cpp	/^void QCPBars::setBaseValue(double baseValue)$/;"	f	class:QCPBars
setBegin	qcustomplot.h	/^  void setBegin(int begin) { mBegin = begin; }$/;"	f	class:QCPDataRange
setBorderPen	qcustomplot.cpp	/^void QCPLegend::setBorderPen(const QPen &pen)$/;"	f	class:QCPLegend
setBracketBrush	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketBrush(const QBrush &brush)$/;"	f	class:QCPSelectionDecoratorBracket
setBracketHeight	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketHeight(int height)$/;"	f	class:QCPSelectionDecoratorBracket
setBracketPen	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketPen(const QPen &pen)$/;"	f	class:QCPSelectionDecoratorBracket
setBracketStyle	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketStyle(QCPSelectionDecoratorBracket::BracketStyle style)$/;"	f	class:QCPSelectionDecoratorBracket
setBracketWidth	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketWidth(int width)$/;"	f	class:QCPSelectionDecoratorBracket
setBrush	qcustomplot.cpp	/^void QCPAbstractPlottable::setBrush(const QBrush &brush)$/;"	f	class:QCPAbstractPlottable
setBrush	qcustomplot.cpp	/^void QCPItemEllipse::setBrush(const QBrush &brush)$/;"	f	class:QCPItemEllipse
setBrush	qcustomplot.cpp	/^void QCPItemRect::setBrush(const QBrush &brush)$/;"	f	class:QCPItemRect
setBrush	qcustomplot.cpp	/^void QCPItemText::setBrush(const QBrush &brush)$/;"	f	class:QCPItemText
setBrush	qcustomplot.cpp	/^void QCPItemTracer::setBrush(const QBrush &brush)$/;"	f	class:QCPItemTracer
setBrush	qcustomplot.cpp	/^void QCPLegend::setBrush(const QBrush &brush)$/;"	f	class:QCPLegend
setBrush	qcustomplot.cpp	/^void QCPScatterStyle::setBrush(const QBrush &brush)$/;"	f	class:QCPScatterStyle
setBrush	qcustomplot.cpp	/^void QCPSelectionDecorator::setBrush(const QBrush &brush)$/;"	f	class:QCPSelectionDecorator
setBrush	qcustomplot.cpp	/^void QCPSelectionRect::setBrush(const QBrush &brush)$/;"	f	class:QCPSelectionRect
setBrushNegative	qcustomplot.cpp	/^void QCPFinancial::setBrushNegative(const QBrush &brush)$/;"	f	class:QCPFinancial
setBrushPositive	qcustomplot.cpp	/^void QCPFinancial::setBrushPositive(const QBrush &brush)$/;"	f	class:QCPFinancial
setBufferDevicePixelRatio	qcustomplot.cpp	/^void QCustomPlot::setBufferDevicePixelRatio(double ratio)$/;"	f	class:QCustomPlot
setCell	qcustomplot.cpp	/^void QCPColorMapData::setCell(int keyIndex, int valueIndex, double z)$/;"	f	class:QCPColorMapData
setChannelFillGraph	qcustomplot.cpp	/^void QCPGraph::setChannelFillGraph(QCPGraph *targetGraph)$/;"	f	class:QCPGraph
setChartStyle	qcustomplot.cpp	/^void QCPFinancial::setChartStyle(QCPFinancial::ChartStyle style)$/;"	f	class:QCPFinancial
setClipAxisRect	qcustomplot.cpp	/^void QCPAbstractItem::setClipAxisRect(QCPAxisRect *rect)$/;"	f	class:QCPAbstractItem
setClipToAxisRect	qcustomplot.cpp	/^void QCPAbstractItem::setClipToAxisRect(bool clip)$/;"	f	class:QCPAbstractItem
setColor	qcustomplot.cpp	/^void QCPItemText::setColor(const QColor &color)$/;"	f	class:QCPItemText
setColorInterpolation	qcustomplot.cpp	/^void QCPColorGradient::setColorInterpolation(QCPColorGradient::ColorInterpolation interpolation)$/;"	f	class:QCPColorGradient
setColorScale	qcustomplot.cpp	/^void QCPColorMap::setColorScale(QCPColorScale *colorScale)$/;"	f	class:QCPColorMap
setColorStopAt	qcustomplot.cpp	/^void QCPColorGradient::setColorStopAt(double position, const QColor &color)$/;"	f	class:QCPColorGradient
setColorStops	qcustomplot.cpp	/^void QCPColorGradient::setColorStops(const QMap<double, QColor> &colorStops)$/;"	f	class:QCPColorGradient
setColumnSpacing	qcustomplot.cpp	/^void QCPLayoutGrid::setColumnSpacing(int pixels)$/;"	f	class:QCPLayoutGrid
setColumnStretchFactor	qcustomplot.cpp	/^void QCPLayoutGrid::setColumnStretchFactor(int column, double factor)$/;"	f	class:QCPLayoutGrid
setColumnStretchFactors	qcustomplot.cpp	/^void QCPLayoutGrid::setColumnStretchFactors(const QList<double> &factors)$/;"	f	class:QCPLayoutGrid
setCoords	qcustomplot.cpp	/^void QCPItemPosition::setCoords(const QPointF &pos)$/;"	f	class:QCPItemPosition
setCoords	qcustomplot.cpp	/^void QCPItemPosition::setCoords(double key, double value)$/;"	f	class:QCPItemPosition
setCurrentLayer	qcustomplot.cpp	/^bool QCustomPlot::setCurrentLayer(QCPLayer *layer)$/;"	f	class:QCustomPlot
setCurrentLayer	qcustomplot.cpp	/^bool QCustomPlot::setCurrentLayer(const QString &name)$/;"	f	class:QCustomPlot
setCustomPath	qcustomplot.cpp	/^void QCPScatterStyle::setCustomPath(const QPainterPath &customPath)$/;"	f	class:QCPScatterStyle
setData	qcustomplot.cpp	/^void QCPBars::setData(QSharedPointer<QCPBarsDataContainer> data)$/;"	f	class:QCPBars
setData	qcustomplot.cpp	/^void QCPBars::setData(const QVector<double> &keys, const QVector<double> &values, bool alreadySorted)$/;"	f	class:QCPBars
setData	qcustomplot.cpp	/^void QCPColorMap::setData(QCPColorMapData *data, bool copy)$/;"	f	class:QCPColorMap
setData	qcustomplot.cpp	/^void QCPColorMapData::setData(double key, double value, double z)$/;"	f	class:QCPColorMapData
setData	qcustomplot.cpp	/^void QCPCurve::setData(QSharedPointer<QCPCurveDataContainer> data)$/;"	f	class:QCPCurve
setData	qcustomplot.cpp	/^void QCPCurve::setData(const QVector<double> &keys, const QVector<double> &values)$/;"	f	class:QCPCurve
setData	qcustomplot.cpp	/^void QCPCurve::setData(const QVector<double> &t, const QVector<double> &keys, const QVector<double> &values, bool alreadySorted)$/;"	f	class:QCPCurve
setData	qcustomplot.cpp	/^void QCPErrorBars::setData(QSharedPointer<QCPErrorBarsDataContainer> data)$/;"	f	class:QCPErrorBars
setData	qcustomplot.cpp	/^void QCPErrorBars::setData(const QVector<double> &error)$/;"	f	class:QCPErrorBars
setData	qcustomplot.cpp	/^void QCPErrorBars::setData(const QVector<double> &errorMinus, const QVector<double> &errorPlus)$/;"	f	class:QCPErrorBars
setData	qcustomplot.cpp	/^void QCPFinancial::setData(QSharedPointer<QCPFinancialDataContainer> data)$/;"	f	class:QCPFinancial
setData	qcustomplot.cpp	/^void QCPFinancial::setData(const QVector<double> &keys, const QVector<double> &open, const QVector<double> &high, const QVector<double> &low, const QVector<double> &close, bool alreadySorted)$/;"	f	class:QCPFinancial
setData	qcustomplot.cpp	/^void QCPGraph::setData(QSharedPointer<QCPGraphDataContainer> data)$/;"	f	class:QCPGraph
setData	qcustomplot.cpp	/^void QCPGraph::setData(const QVector<double> &keys, const QVector<double> &values, bool alreadySorted)$/;"	f	class:QCPGraph
setData	qcustomplot.cpp	/^void QCPStatisticalBox::setData(QSharedPointer<QCPStatisticalBoxDataContainer> data)$/;"	f	class:QCPStatisticalBox
setData	qcustomplot.cpp	/^void QCPStatisticalBox::setData(const QVector<double> &keys, const QVector<double> &minimum, const QVector<double> &lowerQuartile, const QVector<double> &median, const QVector<double> &upperQuartile, const QVector<double> &maximum, bool alreadySorted)$/;"	f	class:QCPStatisticalBox
setDataPlottable	qcustomplot.cpp	/^void QCPErrorBars::setDataPlottable(QCPAbstractPlottable *plottable)$/;"	f	class:QCPErrorBars
setDataRange	qcustomplot.cpp	/^void QCPColorMap::setDataRange(const QCPRange &dataRange)$/;"	f	class:QCPColorMap
setDataRange	qcustomplot.cpp	/^void QCPColorScale::setDataRange(const QCPRange &dataRange)$/;"	f	class:QCPColorScale
setDataScaleType	qcustomplot.cpp	/^void QCPColorMap::setDataScaleType(QCPAxis::ScaleType scaleType)$/;"	f	class:QCPColorMap
setDataScaleType	qcustomplot.cpp	/^void QCPColorScale::setDataScaleType(QCPAxis::ScaleType scaleType)$/;"	f	class:QCPColorScale
setDateTimeFormat	qcustomplot.cpp	/^void QCPAxisTickerDateTime::setDateTimeFormat(const QString &format)$/;"	f	class:QCPAxisTickerDateTime
setDateTimeSpec	qcustomplot.cpp	/^void QCPAxisTickerDateTime::setDateTimeSpec(Qt::TimeSpec spec)$/;"	f	class:QCPAxisTickerDateTime
setDevicePixelRatio	qcustomplot.cpp	/^void QCPAbstractPaintBuffer::setDevicePixelRatio(double ratio)$/;"	f	class:QCPAbstractPaintBuffer
setEnd	qcustomplot.h	/^  void setEnd(int end)  { mEnd = end; }$/;"	f	class:QCPDataRange
setErrorType	qcustomplot.cpp	/^void QCPErrorBars::setErrorType(ErrorType type)$/;"	f	class:QCPErrorBars
setFieldWidth	qcustomplot.cpp	/^void QCPAxisTickerTime::setFieldWidth(QCPAxisTickerTime::TimeUnit unit, int width)$/;"	f	class:QCPAxisTickerTime
setFillOrder	qcustomplot.cpp	/^void QCPLayoutGrid::setFillOrder(FillOrder order, bool rearrange)$/;"	f	class:QCPLayoutGrid
setFont	qcustomplot.cpp	/^void QCPAbstractLegendItem::setFont(const QFont &font)$/;"	f	class:QCPAbstractLegendItem
setFont	qcustomplot.cpp	/^void QCPItemText::setFont(const QFont &font)$/;"	f	class:QCPItemText
setFont	qcustomplot.cpp	/^void QCPLegend::setFont(const QFont &font)$/;"	f	class:QCPLegend
setFont	qcustomplot.cpp	/^void QCPTextElement::setFont(const QFont &font)$/;"	f	class:QCPTextElement
setFractionStyle	qcustomplot.cpp	/^void QCPAxisTickerPi::setFractionStyle(QCPAxisTickerPi::FractionStyle style)$/;"	f	class:QCPAxisTickerPi
setFromOther	qcustomplot.cpp	/^void QCPScatterStyle::setFromOther(const QCPScatterStyle &other, ScatterProperties properties)$/;"	f	class:QCPScatterStyle
setGradient	qcustomplot.cpp	/^void QCPColorMap::setGradient(const QCPColorGradient &gradient)$/;"	f	class:QCPColorMap
setGradient	qcustomplot.cpp	/^void QCPColorScale::setGradient(const QCPColorGradient &gradient)$/;"	f	class:QCPColorScale
setGraph	qcustomplot.cpp	/^void QCPItemTracer::setGraph(QCPGraph *graph)$/;"	f	class:QCPItemTracer
setGraphKey	qcustomplot.cpp	/^void QCPItemTracer::setGraphKey(double key)$/;"	f	class:QCPItemTracer
setHead	qcustomplot.cpp	/^void QCPItemCurve::setHead(const QCPLineEnding &head)$/;"	f	class:QCPItemCurve
setHead	qcustomplot.cpp	/^void QCPItemLine::setHead(const QCPLineEnding &head)$/;"	f	class:QCPItemLine
setIconBorderPen	qcustomplot.cpp	/^void QCPLegend::setIconBorderPen(const QPen &pen)$/;"	f	class:QCPLegend
setIconSize	qcustomplot.cpp	/^void QCPLegend::setIconSize(const QSize &size)$/;"	f	class:QCPLegend
setIconSize	qcustomplot.cpp	/^void QCPLegend::setIconSize(int width, int height)$/;"	f	class:QCPLegend
setIconTextPadding	qcustomplot.cpp	/^void QCPLegend::setIconTextPadding(int padding)$/;"	f	class:QCPLegend
setInsetAlignment	qcustomplot.cpp	/^void QCPLayoutInset::setInsetAlignment(int index, Qt::Alignment alignment)$/;"	f	class:QCPLayoutInset
setInsetPlacement	qcustomplot.cpp	/^void QCPLayoutInset::setInsetPlacement(int index, QCPLayoutInset::InsetPlacement placement)$/;"	f	class:QCPLayoutInset
setInsetRect	qcustomplot.cpp	/^void QCPLayoutInset::setInsetRect(int index, const QRectF &rect)$/;"	f	class:QCPLayoutInset
setInteraction	qcustomplot.cpp	/^void QCustomPlot::setInteraction(const QCP::Interaction &interaction, bool enabled)$/;"	f	class:QCustomPlot
setInteractions	qcustomplot.cpp	/^void QCustomPlot::setInteractions(const QCP::Interactions &interactions)$/;"	f	class:QCustomPlot
setInterpolate	qcustomplot.cpp	/^void QCPColorMap::setInterpolate(bool enabled)$/;"	f	class:QCPColorMap
setInterpolating	qcustomplot.cpp	/^void QCPItemTracer::setInterpolating(bool enabled)$/;"	f	class:QCPItemTracer
setInvalidated	qcustomplot.cpp	/^void QCPAbstractPaintBuffer::setInvalidated(bool invalidated)$/;"	f	class:QCPAbstractPaintBuffer
setInverted	qcustomplot.cpp	/^void QCPLineEnding::setInverted(bool inverted)$/;"	f	class:QCPLineEnding
setKeyAxis	qcustomplot.cpp	/^void QCPAbstractPlottable::setKeyAxis(QCPAxis *axis)$/;"	f	class:QCPAbstractPlottable
setKeyRange	qcustomplot.cpp	/^void QCPColorMapData::setKeyRange(const QCPRange &keyRange)$/;"	f	class:QCPColorMapData
setKeySize	qcustomplot.cpp	/^void QCPColorMapData::setKeySize(int keySize)$/;"	f	class:QCPColorMapData
setLabel	qcustomplot.cpp	/^void QCPAxis::setLabel(const QString &str)$/;"	f	class:QCPAxis
setLabel	qcustomplot.cpp	/^void QCPColorScale::setLabel(const QString &str)$/;"	f	class:QCPColorScale
setLabelColor	qcustomplot.cpp	/^void QCPAxis::setLabelColor(const QColor &color)$/;"	f	class:QCPAxis
setLabelFont	qcustomplot.cpp	/^void QCPAxis::setLabelFont(const QFont &font)$/;"	f	class:QCPAxis
setLabelPadding	qcustomplot.cpp	/^void QCPAxis::setLabelPadding(int padding)$/;"	f	class:QCPAxis
setLayer	qcustomplot.cpp	/^bool QCPLayerable::setLayer(QCPLayer *layer)$/;"	f	class:QCPLayerable
setLayer	qcustomplot.cpp	/^bool QCPLayerable::setLayer(const QString &layerName)$/;"	f	class:QCPLayerable
setLength	qcustomplot.cpp	/^void QCPItemBracket::setLength(double length)$/;"	f	class:QCPItemBracket
setLength	qcustomplot.cpp	/^void QCPLineEnding::setLength(double length)$/;"	f	class:QCPLineEnding
setLevelCount	qcustomplot.cpp	/^void QCPColorGradient::setLevelCount(int n)$/;"	f	class:QCPColorGradient
setLineStyle	qcustomplot.cpp	/^void QCPCurve::setLineStyle(QCPCurve::LineStyle style)$/;"	f	class:QCPCurve
setLineStyle	qcustomplot.cpp	/^void QCPGraph::setLineStyle(LineStyle ls)$/;"	f	class:QCPGraph
setLogBase	qcustomplot.cpp	/^void QCPAxisTickerLog::setLogBase(double base)$/;"	f	class:QCPAxisTickerLog
setLowerEnding	qcustomplot.cpp	/^void QCPAxis::setLowerEnding(const QCPLineEnding &ending)$/;"	f	class:QCPAxis
setMarginGroup	qcustomplot.cpp	/^void QCPLayoutElement::setMarginGroup(QCP::MarginSides sides, QCPMarginGroup *group)$/;"	f	class:QCPLayoutElement
setMarginValue	qcustomplot.h	/^inline void setMarginValue(QMargins &margins, QCP::MarginSide side, int value)$/;"	f	namespace:QCP
setMargins	qcustomplot.cpp	/^void QCPLayoutElement::setMargins(const QMargins &margins)$/;"	f	class:QCPLayoutElement
setMaximumSize	qcustomplot.cpp	/^void QCPLayoutElement::setMaximumSize(const QSize &size)$/;"	f	class:QCPLayoutElement
setMaximumSize	qcustomplot.cpp	/^void QCPLayoutElement::setMaximumSize(int width, int height)$/;"	f	class:QCPLayoutElement
setMedianPen	qcustomplot.cpp	/^void QCPStatisticalBox::setMedianPen(const QPen &pen)$/;"	f	class:QCPStatisticalBox
setMinimumMargins	qcustomplot.cpp	/^void QCPLayoutElement::setMinimumMargins(const QMargins &margins)$/;"	f	class:QCPLayoutElement
setMinimumSize	qcustomplot.cpp	/^void QCPLayoutElement::setMinimumSize(const QSize &size)$/;"	f	class:QCPLayoutElement
setMinimumSize	qcustomplot.cpp	/^void QCPLayoutElement::setMinimumSize(int width, int height)$/;"	f	class:QCPLayoutElement
setMode	qcustomplot.cpp	/^void QCPLayer::setMode(QCPLayer::LayerMode mode)$/;"	f	class:QCPLayer
setMode	qcustomplot.cpp	/^void QCPPainter::setMode(QCPPainter::PainterMode mode, bool enabled)$/;"	f	class:QCPPainter
setModes	qcustomplot.cpp	/^void QCPPainter::setModes(QCPPainter::PainterModes modes)$/;"	f	class:QCPPainter
setMultiSelectModifier	qcustomplot.cpp	/^void QCustomPlot::setMultiSelectModifier(Qt::KeyboardModifier modifier)$/;"	f	class:QCustomPlot
setName	qcustomplot.cpp	/^void QCPAbstractPlottable::setName(const QString &name)$/;"	f	class:QCPAbstractPlottable
setNoAntialiasingOnDrag	qcustomplot.cpp	/^void QCustomPlot::setNoAntialiasingOnDrag(bool enabled)$/;"	f	class:QCustomPlot
setNotAntialiasedElement	qcustomplot.cpp	/^void QCustomPlot::setNotAntialiasedElement(QCP::AntialiasedElement notAntialiasedElement, bool enabled)$/;"	f	class:QCustomPlot
setNotAntialiasedElements	qcustomplot.cpp	/^void QCustomPlot::setNotAntialiasedElements(const QCP::AntialiasedElements &notAntialiasedElements)$/;"	f	class:QCustomPlot
setNumberFormat	qcustomplot.cpp	/^void QCPAxis::setNumberFormat(const QString &formatCode)$/;"	f	class:QCPAxis
setNumberPrecision	qcustomplot.cpp	/^void QCPAxis::setNumberPrecision(int precision)$/;"	f	class:QCPAxis
setOffset	qcustomplot.cpp	/^void QCPAxis::setOffset(int offset)$/;"	f	class:QCPAxis
setOpenGl	qcustomplot.cpp	/^void QCustomPlot::setOpenGl(bool enabled, int multisampling)$/;"	f	class:QCustomPlot
setOuterRect	qcustomplot.cpp	/^void QCPLayoutElement::setOuterRect(const QRect &rect)$/;"	f	class:QCPLayoutElement
setOutlierStyle	qcustomplot.cpp	/^void QCPStatisticalBox::setOutlierStyle(const QCPScatterStyle &style)$/;"	f	class:QCPStatisticalBox
setPadding	qcustomplot.cpp	/^void QCPAxis::setPadding(int padding)$/;"	f	class:QCPAxis
setPadding	qcustomplot.cpp	/^void QCPItemText::setPadding(const QMargins &padding)$/;"	f	class:QCPItemText
setParentAnchor	qcustomplot.cpp	/^bool QCPItemPosition::setParentAnchor(QCPItemAnchor *parentAnchor, bool keepPixelPosition)$/;"	f	class:QCPItemPosition
setParentAnchorX	qcustomplot.cpp	/^bool QCPItemPosition::setParentAnchorX(QCPItemAnchor *parentAnchor, bool keepPixelPosition)$/;"	f	class:QCPItemPosition
setParentAnchorY	qcustomplot.cpp	/^bool QCPItemPosition::setParentAnchorY(QCPItemAnchor *parentAnchor, bool keepPixelPosition)$/;"	f	class:QCPItemPosition
setParentLayerable	qcustomplot.cpp	/^void QCPLayerable::setParentLayerable(QCPLayerable *parentLayerable)$/;"	f	class:QCPLayerable
setPen	qcustomplot.cpp	/^void QCPAbstractPlottable::setPen(const QPen &pen)$/;"	f	class:QCPAbstractPlottable
setPen	qcustomplot.cpp	/^void QCPGrid::setPen(const QPen &pen)$/;"	f	class:QCPGrid
setPen	qcustomplot.cpp	/^void QCPItemBracket::setPen(const QPen &pen)$/;"	f	class:QCPItemBracket
setPen	qcustomplot.cpp	/^void QCPItemCurve::setPen(const QPen &pen)$/;"	f	class:QCPItemCurve
setPen	qcustomplot.cpp	/^void QCPItemEllipse::setPen(const QPen &pen)$/;"	f	class:QCPItemEllipse
setPen	qcustomplot.cpp	/^void QCPItemLine::setPen(const QPen &pen)$/;"	f	class:QCPItemLine
setPen	qcustomplot.cpp	/^void QCPItemPixmap::setPen(const QPen &pen)$/;"	f	class:QCPItemPixmap
setPen	qcustomplot.cpp	/^void QCPItemRect::setPen(const QPen &pen)$/;"	f	class:QCPItemRect
setPen	qcustomplot.cpp	/^void QCPItemStraightLine::setPen(const QPen &pen)$/;"	f	class:QCPItemStraightLine
setPen	qcustomplot.cpp	/^void QCPItemText::setPen(const QPen &pen)$/;"	f	class:QCPItemText
setPen	qcustomplot.cpp	/^void QCPItemTracer::setPen(const QPen &pen)$/;"	f	class:QCPItemTracer
setPen	qcustomplot.cpp	/^void QCPPainter::setPen(Qt::PenStyle penStyle)$/;"	f	class:QCPPainter
setPen	qcustomplot.cpp	/^void QCPPainter::setPen(const QColor &color)$/;"	f	class:QCPPainter
setPen	qcustomplot.cpp	/^void QCPPainter::setPen(const QPen &pen)$/;"	f	class:QCPPainter
setPen	qcustomplot.cpp	/^void QCPScatterStyle::setPen(const QPen &pen)$/;"	f	class:QCPScatterStyle
setPen	qcustomplot.cpp	/^void QCPSelectionDecorator::setPen(const QPen &pen)$/;"	f	class:QCPSelectionDecorator
setPen	qcustomplot.cpp	/^void QCPSelectionRect::setPen(const QPen &pen)$/;"	f	class:QCPSelectionRect
setPenNegative	qcustomplot.cpp	/^void QCPFinancial::setPenNegative(const QPen &pen)$/;"	f	class:QCPFinancial
setPenPositive	qcustomplot.cpp	/^void QCPFinancial::setPenPositive(const QPen &pen)$/;"	f	class:QCPFinancial
setPeriodic	qcustomplot.cpp	/^void QCPColorGradient::setPeriodic(bool enabled)$/;"	f	class:QCPColorGradient
setPeriodicity	qcustomplot.cpp	/^void QCPAxisTickerPi::setPeriodicity(int multiplesOfPi)$/;"	f	class:QCPAxisTickerPi
setPiSymbol	qcustomplot.cpp	/^void QCPAxisTickerPi::setPiSymbol(QString symbol)$/;"	f	class:QCPAxisTickerPi
setPiValue	qcustomplot.cpp	/^void QCPAxisTickerPi::setPiValue(double pi)$/;"	f	class:QCPAxisTickerPi
setPixelPosition	qcustomplot.cpp	/^void QCPItemPosition::setPixelPosition(const QPointF &pixelPosition)$/;"	f	class:QCPItemPosition
setPixmap	qcustomplot.cpp	/^void QCPItemPixmap::setPixmap(const QPixmap &pixmap)$/;"	f	class:QCPItemPixmap
setPixmap	qcustomplot.cpp	/^void QCPScatterStyle::setPixmap(const QPixmap &pixmap)$/;"	f	class:QCPScatterStyle
setPlottingHint	qcustomplot.cpp	/^void QCustomPlot::setPlottingHint(QCP::PlottingHint hint, bool enabled)$/;"	f	class:QCustomPlot
setPlottingHints	qcustomplot.cpp	/^void QCustomPlot::setPlottingHints(const QCP::PlottingHints &hints)$/;"	f	class:QCustomPlot
setPositionAlignment	qcustomplot.cpp	/^void QCPItemText::setPositionAlignment(Qt::Alignment alignment)$/;"	f	class:QCPItemText
setRange	qcustomplot.cpp	/^void QCPAxis::setRange(const QCPRange &range)$/;"	f	class:QCPAxis
setRange	qcustomplot.cpp	/^void QCPAxis::setRange(double lower, double upper)$/;"	f	class:QCPAxis
setRange	qcustomplot.cpp	/^void QCPAxis::setRange(double position, double size, Qt::AlignmentFlag alignment)$/;"	f	class:QCPAxis
setRange	qcustomplot.cpp	/^void QCPColorMapData::setRange(const QCPRange &keyRange, const QCPRange &valueRange)$/;"	f	class:QCPColorMapData
setRangeDrag	qcustomplot.cpp	/^void QCPAxisRect::setRangeDrag(Qt::Orientations orientations)$/;"	f	class:QCPAxisRect
setRangeDrag	qcustomplot.cpp	/^void QCPColorScale::setRangeDrag(bool enabled)$/;"	f	class:QCPColorScale
setRangeDragAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeDragAxes(QCPAxis *horizontal, QCPAxis *vertical)$/;"	f	class:QCPAxisRect
setRangeDragAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeDragAxes(QList<QCPAxis*> axes)$/;"	f	class:QCPAxisRect
setRangeDragAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeDragAxes(QList<QCPAxis*> horizontal, QList<QCPAxis*> vertical)$/;"	f	class:QCPAxisRect
setRangeLower	qcustomplot.cpp	/^void QCPAxis::setRangeLower(double lower)$/;"	f	class:QCPAxis
setRangeReversed	qcustomplot.cpp	/^void QCPAxis::setRangeReversed(bool reversed)$/;"	f	class:QCPAxis
setRangeUpper	qcustomplot.cpp	/^void QCPAxis::setRangeUpper(double upper)$/;"	f	class:QCPAxis
setRangeZoom	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoom(Qt::Orientations orientations)$/;"	f	class:QCPAxisRect
setRangeZoom	qcustomplot.cpp	/^void QCPColorScale::setRangeZoom(bool enabled)$/;"	f	class:QCPColorScale
setRangeZoomAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomAxes(QCPAxis *horizontal, QCPAxis *vertical)$/;"	f	class:QCPAxisRect
setRangeZoomAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomAxes(QList<QCPAxis*> axes)$/;"	f	class:QCPAxisRect
setRangeZoomAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomAxes(QList<QCPAxis*> horizontal, QList<QCPAxis*> vertical)$/;"	f	class:QCPAxisRect
setRangeZoomFactor	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomFactor(double factor)$/;"	f	class:QCPAxisRect
setRangeZoomFactor	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomFactor(double horizontalFactor, double verticalFactor)$/;"	f	class:QCPAxisRect
setRotation	qcustomplot.cpp	/^void QCPItemText::setRotation(double degrees)$/;"	f	class:QCPItemText
setRowSpacing	qcustomplot.cpp	/^void QCPLayoutGrid::setRowSpacing(int pixels)$/;"	f	class:QCPLayoutGrid
setRowStretchFactor	qcustomplot.cpp	/^void QCPLayoutGrid::setRowStretchFactor(int row, double factor)$/;"	f	class:QCPLayoutGrid
setRowStretchFactors	qcustomplot.cpp	/^void QCPLayoutGrid::setRowStretchFactors(const QList<double> &factors)$/;"	f	class:QCPLayoutGrid
setScaleRatio	qcustomplot.cpp	/^void QCPAxis::setScaleRatio(const QCPAxis *otherAxis, double ratio)$/;"	f	class:QCPAxis
setScaleStrategy	qcustomplot.cpp	/^void QCPAxisTickerFixed::setScaleStrategy(QCPAxisTickerFixed::ScaleStrategy strategy)$/;"	f	class:QCPAxisTickerFixed
setScaleType	qcustomplot.cpp	/^void QCPAxis::setScaleType(QCPAxis::ScaleType type)$/;"	f	class:QCPAxis
setScaled	qcustomplot.cpp	/^void QCPItemPixmap::setScaled(bool scaled, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformationMode)$/;"	f	class:QCPItemPixmap
setScatterSkip	qcustomplot.cpp	/^void QCPCurve::setScatterSkip(int skip)$/;"	f	class:QCPCurve
setScatterSkip	qcustomplot.cpp	/^void QCPGraph::setScatterSkip(int skip)$/;"	f	class:QCPGraph
setScatterStyle	qcustomplot.cpp	/^void QCPCurve::setScatterStyle(const QCPScatterStyle &style)$/;"	f	class:QCPCurve
setScatterStyle	qcustomplot.cpp	/^void QCPGraph::setScatterStyle(const QCPScatterStyle &style)$/;"	f	class:QCPGraph
setScatterStyle	qcustomplot.cpp	/^void QCPSelectionDecorator::setScatterStyle(const QCPScatterStyle &scatterStyle, QCPScatterStyle::ScatterProperties usedProperties)$/;"	f	class:QCPSelectionDecorator
setSelectable	qcustomplot.cpp	/^void QCPAbstractItem::setSelectable(bool selectable)$/;"	f	class:QCPAbstractItem
setSelectable	qcustomplot.cpp	/^void QCPAbstractLegendItem::setSelectable(bool selectable)$/;"	f	class:QCPAbstractLegendItem
setSelectable	qcustomplot.cpp	/^void QCPAbstractPlottable::setSelectable(QCP::SelectionType selectable)$/;"	f	class:QCPAbstractPlottable
setSelectable	qcustomplot.cpp	/^void QCPTextElement::setSelectable(bool selectable)$/;"	f	class:QCPTextElement
setSelectableParts	qcustomplot.cpp	/^void QCPAxis::setSelectableParts(const SelectableParts &selectable)$/;"	f	class:QCPAxis
setSelectableParts	qcustomplot.cpp	/^void QCPLegend::setSelectableParts(const SelectableParts &selectable)$/;"	f	class:QCPLegend
setSelected	qcustomplot.cpp	/^void QCPAbstractItem::setSelected(bool selected)$/;"	f	class:QCPAbstractItem
setSelected	qcustomplot.cpp	/^void QCPAbstractLegendItem::setSelected(bool selected)$/;"	f	class:QCPAbstractLegendItem
setSelected	qcustomplot.cpp	/^void QCPTextElement::setSelected(bool selected)$/;"	f	class:QCPTextElement
setSelectedBasePen	qcustomplot.cpp	/^void QCPAxis::setSelectedBasePen(const QPen &pen)$/;"	f	class:QCPAxis
setSelectedBorderPen	qcustomplot.cpp	/^void QCPLegend::setSelectedBorderPen(const QPen &pen)$/;"	f	class:QCPLegend
setSelectedBrush	qcustomplot.cpp	/^void QCPItemEllipse::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPItemEllipse
setSelectedBrush	qcustomplot.cpp	/^void QCPItemRect::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPItemRect
setSelectedBrush	qcustomplot.cpp	/^void QCPItemText::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPItemText
setSelectedBrush	qcustomplot.cpp	/^void QCPItemTracer::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPItemTracer
setSelectedBrush	qcustomplot.cpp	/^void QCPLegend::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPLegend
setSelectedColor	qcustomplot.cpp	/^void QCPItemText::setSelectedColor(const QColor &color)$/;"	f	class:QCPItemText
setSelectedFont	qcustomplot.cpp	/^void QCPAbstractLegendItem::setSelectedFont(const QFont &font)$/;"	f	class:QCPAbstractLegendItem
setSelectedFont	qcustomplot.cpp	/^void QCPItemText::setSelectedFont(const QFont &font)$/;"	f	class:QCPItemText
setSelectedFont	qcustomplot.cpp	/^void QCPLegend::setSelectedFont(const QFont &font)$/;"	f	class:QCPLegend
setSelectedFont	qcustomplot.cpp	/^void QCPTextElement::setSelectedFont(const QFont &font)$/;"	f	class:QCPTextElement
setSelectedIconBorderPen	qcustomplot.cpp	/^void QCPLegend::setSelectedIconBorderPen(const QPen &pen)$/;"	f	class:QCPLegend
setSelectedLabelColor	qcustomplot.cpp	/^void QCPAxis::setSelectedLabelColor(const QColor &color)$/;"	f	class:QCPAxis
setSelectedLabelFont	qcustomplot.cpp	/^void QCPAxis::setSelectedLabelFont(const QFont &font)$/;"	f	class:QCPAxis
setSelectedParts	qcustomplot.cpp	/^void QCPAxis::setSelectedParts(const SelectableParts &selected)$/;"	f	class:QCPAxis
setSelectedParts	qcustomplot.cpp	/^void QCPLegend::setSelectedParts(const SelectableParts &selected)$/;"	f	class:QCPLegend
setSelectedPen	qcustomplot.cpp	/^void QCPItemBracket::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemBracket
setSelectedPen	qcustomplot.cpp	/^void QCPItemCurve::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemCurve
setSelectedPen	qcustomplot.cpp	/^void QCPItemEllipse::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemEllipse
setSelectedPen	qcustomplot.cpp	/^void QCPItemLine::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemLine
setSelectedPen	qcustomplot.cpp	/^void QCPItemPixmap::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemPixmap
setSelectedPen	qcustomplot.cpp	/^void QCPItemRect::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemRect
setSelectedPen	qcustomplot.cpp	/^void QCPItemStraightLine::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemStraightLine
setSelectedPen	qcustomplot.cpp	/^void QCPItemText::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemText
setSelectedPen	qcustomplot.cpp	/^void QCPItemTracer::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemTracer
setSelectedSubTickPen	qcustomplot.cpp	/^void QCPAxis::setSelectedSubTickPen(const QPen &pen)$/;"	f	class:QCPAxis
setSelectedTextColor	qcustomplot.cpp	/^void QCPAbstractLegendItem::setSelectedTextColor(const QColor &color)$/;"	f	class:QCPAbstractLegendItem
setSelectedTextColor	qcustomplot.cpp	/^void QCPLegend::setSelectedTextColor(const QColor &color)$/;"	f	class:QCPLegend
setSelectedTextColor	qcustomplot.cpp	/^void QCPTextElement::setSelectedTextColor(const QColor &color)$/;"	f	class:QCPTextElement
setSelectedTickLabelColor	qcustomplot.cpp	/^void QCPAxis::setSelectedTickLabelColor(const QColor &color)$/;"	f	class:QCPAxis
setSelectedTickLabelFont	qcustomplot.cpp	/^void QCPAxis::setSelectedTickLabelFont(const QFont &font)$/;"	f	class:QCPAxis
setSelectedTickPen	qcustomplot.cpp	/^void QCPAxis::setSelectedTickPen(const QPen &pen)$/;"	f	class:QCPAxis
setSelection	qcustomplot.cpp	/^void QCPAbstractPlottable::setSelection(QCPDataSelection selection)$/;"	f	class:QCPAbstractPlottable
setSelectionDecorator	qcustomplot.cpp	/^void QCPAbstractPlottable::setSelectionDecorator(QCPSelectionDecorator *decorator)$/;"	f	class:QCPAbstractPlottable
setSelectionRect	qcustomplot.cpp	/^void QCustomPlot::setSelectionRect(QCPSelectionRect *selectionRect)$/;"	f	class:QCustomPlot
setSelectionRectMode	qcustomplot.cpp	/^void QCustomPlot::setSelectionRectMode(QCP::SelectionRectMode mode)$/;"	f	class:QCustomPlot
setSelectionTolerance	qcustomplot.cpp	/^void QCustomPlot::setSelectionTolerance(int pixels)$/;"	f	class:QCustomPlot
setShape	qcustomplot.cpp	/^void QCPScatterStyle::setShape(QCPScatterStyle::ScatterShape shape)$/;"	f	class:QCPScatterStyle
setSize	qcustomplot.cpp	/^void QCPAbstractPaintBuffer::setSize(const QSize &size)$/;"	f	class:QCPAbstractPaintBuffer
setSize	qcustomplot.cpp	/^void QCPColorMapData::setSize(int keySize, int valueSize)$/;"	f	class:QCPColorMapData
setSize	qcustomplot.cpp	/^void QCPItemTracer::setSize(double size)$/;"	f	class:QCPItemTracer
setSize	qcustomplot.cpp	/^void QCPScatterStyle::setSize(double size)$/;"	f	class:QCPScatterStyle
setSizeConstraintRect	qcustomplot.cpp	/^void QCPLayoutElement::setSizeConstraintRect(SizeConstraintRect constraintRect)$/;"	f	class:QCPLayoutElement
setSpacing	qcustomplot.cpp	/^void QCPBarsGroup::setSpacing(double spacing)$/;"	f	class:QCPBarsGroup
setSpacingType	qcustomplot.cpp	/^void QCPBarsGroup::setSpacingType(SpacingType spacingType)$/;"	f	class:QCPBarsGroup
setStackingGap	qcustomplot.cpp	/^void QCPBars::setStackingGap(double pixels)$/;"	f	class:QCPBars
setStyle	qcustomplot.cpp	/^void QCPItemBracket::setStyle(QCPItemBracket::BracketStyle style)$/;"	f	class:QCPItemBracket
setStyle	qcustomplot.cpp	/^void QCPItemTracer::setStyle(QCPItemTracer::TracerStyle style)$/;"	f	class:QCPItemTracer
setStyle	qcustomplot.cpp	/^void QCPLineEnding::setStyle(QCPLineEnding::EndingStyle style)$/;"	f	class:QCPLineEnding
setSubGridPen	qcustomplot.cpp	/^void QCPGrid::setSubGridPen(const QPen &pen)$/;"	f	class:QCPGrid
setSubGridVisible	qcustomplot.cpp	/^void QCPGrid::setSubGridVisible(bool visible)$/;"	f	class:QCPGrid
setSubTickCount	qcustomplot.cpp	/^void QCPAxisTickerLog::setSubTickCount(int subTicks)$/;"	f	class:QCPAxisTickerLog
setSubTickCount	qcustomplot.cpp	/^void QCPAxisTickerText::setSubTickCount(int subTicks)$/;"	f	class:QCPAxisTickerText
setSubTickLength	qcustomplot.cpp	/^void QCPAxis::setSubTickLength(int inside, int outside)$/;"	f	class:QCPAxis
setSubTickLengthIn	qcustomplot.cpp	/^void QCPAxis::setSubTickLengthIn(int inside)$/;"	f	class:QCPAxis
setSubTickLengthOut	qcustomplot.cpp	/^void QCPAxis::setSubTickLengthOut(int outside)$/;"	f	class:QCPAxis
setSubTickPen	qcustomplot.cpp	/^void QCPAxis::setSubTickPen(const QPen &pen)$/;"	f	class:QCPAxis
setSubTicks	qcustomplot.cpp	/^void QCPAxis::setSubTicks(bool show)$/;"	f	class:QCPAxis
setSymbolGap	qcustomplot.cpp	/^void QCPErrorBars::setSymbolGap(double pixels)$/;"	f	class:QCPErrorBars
setTail	qcustomplot.cpp	/^void QCPItemCurve::setTail(const QCPLineEnding &tail)$/;"	f	class:QCPItemCurve
setTail	qcustomplot.cpp	/^void QCPItemLine::setTail(const QCPLineEnding &tail)$/;"	f	class:QCPItemLine
setTangentAverage	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setTangentAverage(int pointCount)$/;"	f	class:QCPSelectionDecoratorBracket
setTangentToData	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setTangentToData(bool enabled)$/;"	f	class:QCPSelectionDecoratorBracket
setText	qcustomplot.cpp	/^void QCPItemText::setText(const QString &text)$/;"	f	class:QCPItemText
setText	qcustomplot.cpp	/^void QCPTextElement::setText(const QString &text)$/;"	f	class:QCPTextElement
setTextAlignment	qcustomplot.cpp	/^void QCPItemText::setTextAlignment(Qt::Alignment alignment)$/;"	f	class:QCPItemText
setTextColor	qcustomplot.cpp	/^void QCPAbstractLegendItem::setTextColor(const QColor &color)$/;"	f	class:QCPAbstractLegendItem
setTextColor	qcustomplot.cpp	/^void QCPLegend::setTextColor(const QColor &color)$/;"	f	class:QCPLegend
setTextColor	qcustomplot.cpp	/^void QCPTextElement::setTextColor(const QColor &color)$/;"	f	class:QCPTextElement
setTextFlags	qcustomplot.cpp	/^void QCPTextElement::setTextFlags(int flags)$/;"	f	class:QCPTextElement
setTickCount	qcustomplot.cpp	/^void QCPAxisTicker::setTickCount(int count)$/;"	f	class:QCPAxisTicker
setTickLabelColor	qcustomplot.cpp	/^void QCPAxis::setTickLabelColor(const QColor &color)$/;"	f	class:QCPAxis
setTickLabelFont	qcustomplot.cpp	/^void QCPAxis::setTickLabelFont(const QFont &font)$/;"	f	class:QCPAxis
setTickLabelPadding	qcustomplot.cpp	/^void QCPAxis::setTickLabelPadding(int padding)$/;"	f	class:QCPAxis
setTickLabelRotation	qcustomplot.cpp	/^void QCPAxis::setTickLabelRotation(double degrees)$/;"	f	class:QCPAxis
setTickLabelSide	qcustomplot.cpp	/^void QCPAxis::setTickLabelSide(LabelSide side)$/;"	f	class:QCPAxis
setTickLabels	qcustomplot.cpp	/^void QCPAxis::setTickLabels(bool show)$/;"	f	class:QCPAxis
setTickLength	qcustomplot.cpp	/^void QCPAxis::setTickLength(int inside, int outside)$/;"	f	class:QCPAxis
setTickLengthIn	qcustomplot.cpp	/^void QCPAxis::setTickLengthIn(int inside)$/;"	f	class:QCPAxis
setTickLengthOut	qcustomplot.cpp	/^void QCPAxis::setTickLengthOut(int outside)$/;"	f	class:QCPAxis
setTickOrigin	qcustomplot.cpp	/^void QCPAxisTicker::setTickOrigin(double origin)$/;"	f	class:QCPAxisTicker
setTickOrigin	qcustomplot.cpp	/^void QCPAxisTickerDateTime::setTickOrigin(const QDateTime &origin)$/;"	f	class:QCPAxisTickerDateTime
setTickOrigin	qcustomplot.cpp	/^void QCPAxisTickerDateTime::setTickOrigin(double origin)$/;"	f	class:QCPAxisTickerDateTime
setTickPen	qcustomplot.cpp	/^void QCPAxis::setTickPen(const QPen &pen)$/;"	f	class:QCPAxis
setTickStep	qcustomplot.cpp	/^void QCPAxisTickerFixed::setTickStep(double step)$/;"	f	class:QCPAxisTickerFixed
setTickStepStrategy	qcustomplot.cpp	/^void QCPAxisTicker::setTickStepStrategy(QCPAxisTicker::TickStepStrategy strategy)$/;"	f	class:QCPAxisTicker
setTicker	qcustomplot.cpp	/^void QCPAxis::setTicker(QSharedPointer<QCPAxisTicker> ticker)$/;"	f	class:QCPAxis
setTicks	qcustomplot.cpp	/^void QCPAxis::setTicks(bool show)$/;"	f	class:QCPAxis
setTicks	qcustomplot.cpp	/^void QCPAxisTickerText::setTicks(const QMap<double, QString> &ticks)$/;"	f	class:QCPAxisTickerText
setTicks	qcustomplot.cpp	/^void QCPAxisTickerText::setTicks(const QVector<double> &positions, const QVector<QString> &labels)$/;"	f	class:QCPAxisTickerText
setTightBoundary	qcustomplot.cpp	/^void QCPColorMap::setTightBoundary(bool enabled)$/;"	f	class:QCPColorMap
setTimeFormat	qcustomplot.cpp	/^void QCPAxisTickerTime::setTimeFormat(const QString &format)$/;"	f	class:QCPAxisTickerTime
setTwoColored	qcustomplot.cpp	/^void QCPFinancial::setTwoColored(bool twoColored)$/;"	f	class:QCPFinancial
setType	qcustomplot.cpp	/^void QCPColorScale::setType(QCPAxis::AxisType type)$/;"	f	class:QCPColorScale
setType	qcustomplot.cpp	/^void QCPItemPosition::setType(QCPItemPosition::PositionType type)$/;"	f	class:QCPItemPosition
setTypeX	qcustomplot.cpp	/^void QCPItemPosition::setTypeX(QCPItemPosition::PositionType type)$/;"	f	class:QCPItemPosition
setTypeY	qcustomplot.cpp	/^void QCPItemPosition::setTypeY(QCPItemPosition::PositionType type)$/;"	f	class:QCPItemPosition
setUpperEnding	qcustomplot.cpp	/^void QCPAxis::setUpperEnding(const QCPLineEnding &ending)$/;"	f	class:QCPAxis
setUsedScatterProperties	qcustomplot.cpp	/^void QCPSelectionDecorator::setUsedScatterProperties(const QCPScatterStyle::ScatterProperties &properties)$/;"	f	class:QCPSelectionDecorator
setValueAxis	qcustomplot.cpp	/^void QCPAbstractPlottable::setValueAxis(QCPAxis *axis)$/;"	f	class:QCPAbstractPlottable
setValueRange	qcustomplot.cpp	/^void QCPColorMapData::setValueRange(const QCPRange &valueRange)$/;"	f	class:QCPColorMapData
setValueSize	qcustomplot.cpp	/^void QCPColorMapData::setValueSize(int valueSize)$/;"	f	class:QCPColorMapData
setViewport	qcustomplot.cpp	/^void QCustomPlot::setViewport(const QRect &rect)$/;"	f	class:QCustomPlot
setVisible	qcustomplot.cpp	/^void QCPLayer::setVisible(bool visible)$/;"	f	class:QCPLayer
setVisible	qcustomplot.cpp	/^void QCPLayerable::setVisible(bool on)$/;"	f	class:QCPLayerable
setWhiskerAntialiased	qcustomplot.cpp	/^void QCPStatisticalBox::setWhiskerAntialiased(bool enabled)$/;"	f	class:QCPStatisticalBox
setWhiskerBarPen	qcustomplot.cpp	/^void QCPStatisticalBox::setWhiskerBarPen(const QPen &pen)$/;"	f	class:QCPStatisticalBox
setWhiskerPen	qcustomplot.cpp	/^void QCPStatisticalBox::setWhiskerPen(const QPen &pen)$/;"	f	class:QCPStatisticalBox
setWhiskerWidth	qcustomplot.cpp	/^void QCPErrorBars::setWhiskerWidth(double pixels)$/;"	f	class:QCPErrorBars
setWhiskerWidth	qcustomplot.cpp	/^void QCPStatisticalBox::setWhiskerWidth(double width)$/;"	f	class:QCPStatisticalBox
setWidth	qcustomplot.cpp	/^void QCPBars::setWidth(double width)$/;"	f	class:QCPBars
setWidth	qcustomplot.cpp	/^void QCPFinancial::setWidth(double width)$/;"	f	class:QCPFinancial
setWidth	qcustomplot.cpp	/^void QCPLineEnding::setWidth(double width)$/;"	f	class:QCPLineEnding
setWidth	qcustomplot.cpp	/^void QCPStatisticalBox::setWidth(double width)$/;"	f	class:QCPStatisticalBox
setWidthType	qcustomplot.cpp	/^void QCPBars::setWidthType(QCPBars::WidthType widthType)$/;"	f	class:QCPBars
setWidthType	qcustomplot.cpp	/^void QCPFinancial::setWidthType(QCPFinancial::WidthType widthType)$/;"	f	class:QCPFinancial
setWrap	qcustomplot.cpp	/^void QCPLayoutGrid::setWrap(int count)$/;"	f	class:QCPLayoutGrid
setX	qcustomplot.h	/^  void setX(double x) { mX = x; }$/;"	f	class:QCPVector2D
setY	qcustomplot.h	/^  void setY(double y) { mY = y; }$/;"	f	class:QCPVector2D
setZeroLinePen	qcustomplot.cpp	/^void QCPGrid::setZeroLinePen(const QPen &pen)$/;"	f	class:QCPGrid
setupFullAxesBox	qcustomplot.cpp	/^void QCPAxisRect::setupFullAxesBox(bool connectRanges)$/;"	f	class:QCPAxisRect
setupOpenGl	qcustomplot.cpp	/^bool QCustomPlot::setupOpenGl()$/;"	f	class:QCustomPlot
setupPaintBuffers	qcustomplot.cpp	/^void QCustomPlot::setupPaintBuffers()$/;"	f	class:QCustomPlot
setupTickVectors	qcustomplot.cpp	/^void QCPAxis::setupTickVectors()$/;"	f	class:QCPAxis
shape	qcustomplot.h	/^  ScatterShape shape() const { return mShape; }$/;"	f	class:QCPScatterStyle
simplify	qcustomplot.cpp	/^void QCPDataSelection::simplify()$/;"	f	class:QCPDataSelection
simplify	qcustomplot.cpp	/^void QCPLayout::simplify()$/;"	f	class:QCPLayout
simplify	qcustomplot.cpp	/^void QCPLayoutGrid::simplify()$/;"	f	class:QCPLayoutGrid
simplifyFraction	qcustomplot.cpp	/^void QCPAxisTickerPi::simplifyFraction(int &numerator, int &denominator) const$/;"	f	class:QCPAxisTickerPi
size	qcustomplot.cpp	/^int QCPAxisPainterPrivate::size() const$/;"	f	class:QCPAxisPainterPrivate
size	qcustomplot.h	/^  QSize size() const { return mRect.size(); }$/;"	f	class:QCPAxisRect
size	qcustomplot.h	/^  QSize size() const { return mSize; }$/;"	f	class:QCPAbstractPaintBuffer
size	qcustomplot.h	/^  double size() const { return mSize; }$/;"	f	class:QCPItemTracer
size	qcustomplot.h	/^  double size() const { return mSize; }$/;"	f	class:QCPScatterStyle
size	qcustomplot.h	/^  double size() const { return upper-lower; }$/;"	f	class:QCPRange
size	qcustomplot.h	/^  int size() const { return mBars.size(); }$/;"	f	class:QCPBarsGroup
size	qcustomplot.h	/^  int size() const { return mData.size()-mPreallocSize; }$/;"	f	class:QCPDataContainer
size	qcustomplot.h	/^  int size() const { return mEnd-mBegin; }$/;"	f	class:QCPDataRange
sizeConstraintRect	qcustomplot.h	/^  SizeConstraintRect sizeConstraintRect() const { return mSizeConstraintRect; }$/;"	f	class:QCPLayoutElement
sizeConstraintsChanged	qcustomplot.cpp	/^void QCPLayout::sizeConstraintsChanged() const$/;"	f	class:QCPLayout
sizeHint	qcustomplot.cpp	/^QSize QCustomPlot::sizeHint() const$/;"	f	class:QCustomPlot
sort	qcustomplot.h	/^void QCPDataContainer<DataType>::sort()$/;"	f	class:QCPDataContainer
sortKey	qcustomplot.h	/^  inline double sortKey() const { return key; }$/;"	f	class:QCPBarsData
sortKey	qcustomplot.h	/^  inline double sortKey() const { return key; }$/;"	f	class:QCPFinancialData
sortKey	qcustomplot.h	/^  inline double sortKey() const { return key; }$/;"	f	class:QCPGraphData
sortKey	qcustomplot.h	/^  inline double sortKey() const { return key; }$/;"	f	class:QCPStatisticalBoxData
sortKey	qcustomplot.h	/^  inline double sortKey() const { return t; }$/;"	f	class:QCPCurveData
sortKeyIsMainKey	qcustomplot.cpp	/^bool QCPErrorBars::sortKeyIsMainKey() const$/;"	f	class:QCPErrorBars
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return false; }$/;"	f	class:QCPCurveData
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return true; } $/;"	f	class:QCPBarsData
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return true; } $/;"	f	class:QCPFinancialData
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return true; }$/;"	f	class:QCPGraphData
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return true; }$/;"	f	class:QCPStatisticalBoxData
sortKeyIsMainKey	qcustomplot.h	/^bool QCPAbstractPlottable1D<DataType>::sortKeyIsMainKey() const$/;"	f	class:QCPAbstractPlottable1D
spAll	qcustomplot.h	/^                         ,spAll   = 0xFF  \/\/\/< <tt>0xFF<\/tt> All properties$/;"	e	enum:QCPScatterStyle::ScatterProperty
spAxis	qcustomplot.h	/^                        ,spAxis       = 0x001  \/\/\/< The axis backbone and tick marks$/;"	e	enum:QCPAxis::SelectablePart
spAxisLabel	qcustomplot.h	/^                        ,spAxisLabel  = 0x004  \/\/\/< The axis label$/;"	e	enum:QCPAxis::SelectablePart
spBrush	qcustomplot.h	/^                         ,spBrush = 0x02  \/\/\/< <tt>0x02<\/tt> The brush property, see \\ref setBrush$/;"	e	enum:QCPScatterStyle::ScatterProperty
spItems	qcustomplot.h	/^                        ,spItems      = 0x002 \/\/\/< <tt>0x002<\/tt> Legend items individually (see \\ref selectedItems)$/;"	e	enum:QCPLegend::SelectablePart
spLegendBox	qcustomplot.h	/^                        ,spLegendBox  = 0x001 \/\/\/< <tt>0x001<\/tt> The legend box (frame)$/;"	e	enum:QCPLegend::SelectablePart
spNone	qcustomplot.h	/^  enum ScatterProperty { spNone  = 0x00  \/\/\/< <tt>0x00<\/tt> None$/;"	e	enum:QCPScatterStyle::ScatterProperty
spNone	qcustomplot.h	/^  enum SelectablePart { spNone        = 0      \/\/\/< None of the selectable parts$/;"	e	enum:QCPAxis::SelectablePart
spNone	qcustomplot.h	/^  enum SelectablePart { spNone        = 0x000 \/\/\/< <tt>0x000<\/tt> None$/;"	e	enum:QCPLegend::SelectablePart
spPen	qcustomplot.h	/^                         ,spPen   = 0x01  \/\/\/< <tt>0x01<\/tt> The pen property, see \\ref setPen$/;"	e	enum:QCPScatterStyle::ScatterProperty
spShape	qcustomplot.h	/^                         ,spShape = 0x08  \/\/\/< <tt>0x08<\/tt> The shape property, see \\ref setShape$/;"	e	enum:QCPScatterStyle::ScatterProperty
spSize	qcustomplot.h	/^                         ,spSize  = 0x04  \/\/\/< <tt>0x04<\/tt> The size property, see \\ref setSize$/;"	e	enum:QCPScatterStyle::ScatterProperty
spTickLabels	qcustomplot.h	/^                        ,spTickLabels = 0x002  \/\/\/< Tick labels (numbers) of this axis (as a whole, not individually)$/;"	e	enum:QCPAxis::SelectablePart
spacing	qcustomplot.h	/^  double spacing() const { return mSpacing; }$/;"	f	class:QCPBarsGroup
spacingType	qcustomplot.h	/^  SpacingType spacingType() const { return mSpacingType; }$/;"	f	class:QCPBarsGroup
span	qcustomplot.cpp	/^QCPDataRange QCPDataSelection::span() const$/;"	f	class:QCPDataSelection
squeeze	qcustomplot.h	/^void QCPDataContainer<DataType>::squeeze(bool preAllocation, bool postAllocation)$/;"	f	class:QCPDataContainer
srmCustom	qcustomplot.h	/^                         ,srmCustom \/\/\/< When dragging the mouse, a selection rect becomes active. It is the programmer's responsibility to connect according slots to the selection rect's signals (e.g. \\ref QCPSelectionRect::accepted) in order to process the user interaction.$/;"	e	enum:QCP::SelectionRectMode
srmNone	qcustomplot.h	/^enum SelectionRectMode { srmNone    \/\/\/< The selection rect is disabled, and all mouse events are forwarded to the underlying objects, e.g. for axis range dragging$/;"	e	enum:QCP::SelectionRectMode
srmSelect	qcustomplot.h	/^                         ,srmSelect \/\/\/< When dragging the mouse, a selection rect becomes active. Upon releasing, plottable data points that were within the selection rect are selected, if the plottable's selectability setting permits. (See  \\ref dataselection "data selection mechanism" for details.)$/;"	e	enum:QCP::SelectionRectMode
srmZoom	qcustomplot.h	/^                         ,srmZoom   \/\/\/< When dragging the mouse, a selection rect becomes active. Upon releasing, the axes that are currently set as range zoom axes (\\ref QCPAxisRect::setRangeZoomAxes) will have their ranges zoomed accordingly.$/;"	e	enum:QCP::SelectionRectMode
ssCircle	qcustomplot.h	/^                      ,ssCircle    \/\/\/< \\enumimage{ssCircle.png} a circle$/;"	e	enum:QCPScatterStyle::ScatterShape
ssCross	qcustomplot.h	/^                      ,ssCross     \/\/\/< \\enumimage{ssCross.png} a cross$/;"	e	enum:QCPScatterStyle::ScatterShape
ssCrossCircle	qcustomplot.h	/^                      ,ssCrossCircle      \/\/\/< \\enumimage{ssCrossCircle.png} a circle with a cross inside$/;"	e	enum:QCPScatterStyle::ScatterShape
ssCrossSquare	qcustomplot.h	/^                      ,ssCrossSquare      \/\/\/< \\enumimage{ssCrossSquare.png} a square with a cross inside$/;"	e	enum:QCPScatterStyle::ScatterShape
ssCustom	qcustomplot.h	/^                      ,ssCustom    \/\/\/< custom painter operations are performed per scatter (As QPainterPath, see \\ref setCustomPath)$/;"	e	enum:QCPScatterStyle::ScatterShape
ssDiamond	qcustomplot.h	/^                      ,ssDiamond   \/\/\/< \\enumimage{ssDiamond.png} a diamond$/;"	e	enum:QCPScatterStyle::ScatterShape
ssDisc	qcustomplot.h	/^                      ,ssDisc      \/\/\/< \\enumimage{ssDisc.png} a circle which is filled with the pen's color (not the brush as with ssCircle)$/;"	e	enum:QCPScatterStyle::ScatterShape
ssDot	qcustomplot.h	/^                      ,ssDot       \/\/\/< \\enumimage{ssDot.png} a single pixel (use \\ref ssDisc or \\ref ssCircle if you want a round shape with a certain radius)$/;"	e	enum:QCPScatterStyle::ScatterShape
ssMultiples	qcustomplot.h	/^                       ,ssMultiples \/\/\/< An integer multiple of the specified tick step is allowed. The used factor follows the base class properties of \\ref setTickStepStrategy and \\ref setTickCount.$/;"	e	enum:QCPAxisTickerFixed::ScaleStrategy
ssNone	qcustomplot.h	/^  enum ScaleStrategy { ssNone      \/\/\/< Modifications are not allowed, the specified tick step is absolutely fixed. This might cause a high tick density and overlapping labels if the axis range is zoomed out.$/;"	e	enum:QCPAxisTickerFixed::ScaleStrategy
ssNone	qcustomplot.h	/^  enum ScatterShape { ssNone       \/\/\/< no scatter symbols are drawn (e.g. in QCPGraph, data only represented with lines)$/;"	e	enum:QCPScatterStyle::ScatterShape
ssPeace	qcustomplot.h	/^                      ,ssPeace     \/\/\/< \\enumimage{ssPeace.png} a circle, with one vertical and two downward diagonal lines$/;"	e	enum:QCPScatterStyle::ScatterShape
ssPixmap	qcustomplot.h	/^                      ,ssPixmap    \/\/\/< a custom pixmap specified by \\ref setPixmap, centered on the data point coordinates$/;"	e	enum:QCPScatterStyle::ScatterShape
ssPlus	qcustomplot.h	/^                      ,ssPlus      \/\/\/< \\enumimage{ssPlus.png} a plus$/;"	e	enum:QCPScatterStyle::ScatterShape
ssPlusCircle	qcustomplot.h	/^                      ,ssPlusCircle       \/\/\/< \\enumimage{ssPlusCircle.png} a circle with a plus inside$/;"	e	enum:QCPScatterStyle::ScatterShape
ssPlusSquare	qcustomplot.h	/^                      ,ssPlusSquare       \/\/\/< \\enumimage{ssPlusSquare.png} a square with a plus inside$/;"	e	enum:QCPScatterStyle::ScatterShape
ssPowers	qcustomplot.h	/^                       ,ssPowers    \/\/\/< An integer power of the specified tick step is allowed.$/;"	e	enum:QCPAxisTickerFixed::ScaleStrategy
ssSquare	qcustomplot.h	/^                      ,ssSquare    \/\/\/< \\enumimage{ssSquare.png} a square$/;"	e	enum:QCPScatterStyle::ScatterShape
ssStar	qcustomplot.h	/^                      ,ssStar      \/\/\/< \\enumimage{ssStar.png} a star with eight arms, i.e. a combination of cross and plus$/;"	e	enum:QCPScatterStyle::ScatterShape
ssTriangle	qcustomplot.h	/^                      ,ssTriangle  \/\/\/< \\enumimage{ssTriangle.png} an equilateral triangle, standing on baseline$/;"	e	enum:QCPScatterStyle::ScatterShape
ssTriangleInverted	qcustomplot.h	/^                      ,ssTriangleInverted \/\/\/< \\enumimage{ssTriangleInverted.png} an equilateral triangle, standing on corner$/;"	e	enum:QCPScatterStyle::ScatterShape
stAbsolute	qcustomplot.h	/^  enum SpacingType { stAbsolute       \/\/\/< Bar spacing is in absolute pixels$/;"	e	enum:QCPBarsGroup::SpacingType
stAxisRectRatio	qcustomplot.h	/^                     ,stAxisRectRatio \/\/\/< Bar spacing is given by a fraction of the axis rect size$/;"	e	enum:QCPBarsGroup::SpacingType
stDataRange	qcustomplot.h	/^                     ,stDataRange          \/\/\/< Multiple contiguous data points (a data range) can be selected$/;"	e	enum:QCP::SelectionType
stLinear	qcustomplot.h	/^  enum ScaleType { stLinear       \/\/\/< Linear scaling$/;"	e	enum:QCPAxis::ScaleType
stLogarithmic	qcustomplot.h	/^                   ,stLogarithmic \/\/\/< Logarithmic scaling with correspondingly transformed axis coordinates (possibly also \\ref setTicker to a \\ref QCPAxisTickerLog instance).$/;"	e	enum:QCPAxis::ScaleType
stMultipleDataRanges	qcustomplot.h	/^                     ,stMultipleDataRanges \/\/\/< Any combination of data points\/ranges can be selected$/;"	e	enum:QCP::SelectionType
stNone	qcustomplot.h	/^enum SelectionType { stNone                \/\/\/< The plottable is not selectable$/;"	e	enum:QCP::SelectionType
stPlotCoords	qcustomplot.h	/^                     ,stPlotCoords    \/\/\/< Bar spacing is in key coordinates and thus scales with the key axis range$/;"	e	enum:QCPBarsGroup::SpacingType
stSingleData	qcustomplot.h	/^                     ,stSingleData         \/\/\/< One individual data point can be selected at a time$/;"	e	enum:QCP::SelectionType
stWhole	qcustomplot.h	/^                     ,stWhole              \/\/\/< Selection behaves like \\ref stMultipleDataRanges, but if there are any data points selected, the entire plottable is drawn as selected.$/;"	e	enum:QCP::SelectionType
stackingGap	qcustomplot.h	/^  double stackingGap() const { return mStackingGap; }$/;"	f	class:QCPBars
start	qcustomplot.h	/^  QCPItemPosition * const start;$/;"	m	class:QCPItemCurve
start	qcustomplot.h	/^  QCPItemPosition * const start;$/;"	m	class:QCPItemLine
startDir	qcustomplot.h	/^  QCPItemPosition * const startDir;$/;"	m	class:QCPItemCurve
startPainting	qcustomplot.cpp	/^QCPPainter *QCPPaintBufferGlFbo::startPainting()$/;"	f	class:QCPPaintBufferGlFbo
startPainting	qcustomplot.cpp	/^QCPPainter *QCPPaintBufferGlPbuffer::startPainting()$/;"	f	class:QCPPaintBufferGlPbuffer
startPainting	qcustomplot.cpp	/^QCPPainter *QCPPaintBufferPixmap::startPainting()$/;"	f	class:QCPPaintBufferPixmap
startSelection	qcustomplot.cpp	/^void QCPSelectionRect::startSelection(QMouseEvent *event)$/;"	f	class:QCPSelectionRect
stopsUseAlpha	qcustomplot.cpp	/^bool QCPColorGradient::stopsUseAlpha() const$/;"	f	class:QCPColorGradient
style	qcustomplot.h	/^  BracketStyle style() const { return mStyle; }$/;"	f	class:QCPItemBracket
style	qcustomplot.h	/^  EndingStyle style() const { return mStyle; }$/;"	f	class:QCPLineEnding
style	qcustomplot.h	/^  TracerStyle style() const { return mStyle; }$/;"	f	class:QCPItemTracer
subGridPen	qcustomplot.h	/^  QPen subGridPen() const { return mSubGridPen; }$/;"	f	class:QCPGrid
subGridVisible	qcustomplot.h	/^  bool subGridVisible() const { return mSubGridVisible; }$/;"	f	class:QCPGrid
subTickCount	qcustomplot.h	/^  int subTickCount() const { return mSubTickCount; }$/;"	f	class:QCPAxisTickerLog
subTickCount	qcustomplot.h	/^  int subTickCount() const { return mSubTickCount; }$/;"	f	class:QCPAxisTickerText
subTickLengthIn	qcustomplot.cpp	/^int QCPAxis::subTickLengthIn() const$/;"	f	class:QCPAxis
subTickLengthIn	qcustomplot.h	/^  int tickLengthIn, tickLengthOut, subTickLengthIn, subTickLengthOut; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
subTickLengthOut	qcustomplot.cpp	/^int QCPAxis::subTickLengthOut() const$/;"	f	class:QCPAxis
subTickLengthOut	qcustomplot.h	/^  int tickLengthIn, tickLengthOut, subTickLengthIn, subTickLengthOut; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
subTickPen	qcustomplot.h	/^  QPen subTickPen() const { return mSubTickPen; }$/;"	f	class:QCPAxis
subTickPen	qcustomplot.h	/^  QPen tickPen, subTickPen;$/;"	m	class:QCPAxisPainterPrivate
subTickPositions	qcustomplot.h	/^  QVector<double> subTickPositions;$/;"	m	class:QCPAxisPainterPrivate
subTicks	qcustomplot.h	/^  bool subTicks() const { return mSubTicks; }$/;"	f	class:QCPAxis
substituteExponent	qcustomplot.h	/^  bool substituteExponent;$/;"	m	class:QCPAxisPainterPrivate
suffixBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
suffixPart	qcustomplot.h	/^    QString basePart, expPart, suffixPart;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
symbolGap	qcustomplot.h	/^  double symbolGap() const { return mSymbolGap; }$/;"	f	class:QCPErrorBars
t	qcustomplot.h	/^  double t, key, value;$/;"	m	class:QCPCurveData
tail	qcustomplot.h	/^  QCPLineEnding tail() const { return mTail; }$/;"	f	class:QCPItemCurve
tail	qcustomplot.h	/^  QCPLineEnding tail() const { return mTail; }$/;"	f	class:QCPItemLine
take	qcustomplot.cpp	/^bool QCPLayoutGrid::take(QCPLayoutElement *element)$/;"	f	class:QCPLayoutGrid
take	qcustomplot.cpp	/^bool QCPLayoutInset::take(QCPLayoutElement *element)$/;"	f	class:QCPLayoutInset
takeAt	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutGrid::takeAt(int index)$/;"	f	class:QCPLayoutGrid
takeAt	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutInset::takeAt(int index)$/;"	f	class:QCPLayoutInset
tangentAverage	qcustomplot.h	/^  int tangentAverage() const { return mTangentAverage; }$/;"	f	class:QCPSelectionDecoratorBracket
tangentToData	qcustomplot.h	/^  bool tangentToData() const { return mTangentToData; }$/;"	f	class:QCPSelectionDecoratorBracket
text	qcustomplot.h	/^  QString text() const { return mText; }$/;"	f	class:QCPItemText
text	qcustomplot.h	/^  QString text() const { return mText; }$/;"	f	class:QCPTextElement
textAlignment	qcustomplot.h	/^  Qt::Alignment textAlignment() const { return mTextAlignment; }$/;"	f	class:QCPItemText
textColor	qcustomplot.h	/^  QColor textColor() const { return mTextColor; }$/;"	f	class:QCPAbstractLegendItem
textColor	qcustomplot.h	/^  QColor textColor() const { return mTextColor; }$/;"	f	class:QCPLegend
textColor	qcustomplot.h	/^  QColor textColor() const { return mTextColor; }$/;"	f	class:QCPTextElement
textFlags	qcustomplot.h	/^  int textFlags() const { return mTextFlags; }$/;"	f	class:QCPTextElement
tickCount	qcustomplot.h	/^  int tickCount() const { return mTickCount; }$/;"	f	class:QCPAxisTicker
tickLabelColor	qcustomplot.h	/^  QColor tickLabelColor() const { return mTickLabelColor; }$/;"	f	class:QCPAxis
tickLabelColor	qcustomplot.h	/^  QColor tickLabelColor;$/;"	m	class:QCPAxisPainterPrivate
tickLabelFont	qcustomplot.h	/^  QFont tickLabelFont() const { return mTickLabelFont; }$/;"	f	class:QCPAxis
tickLabelFont	qcustomplot.h	/^  QFont tickLabelFont;$/;"	m	class:QCPAxisPainterPrivate
tickLabelPadding	qcustomplot.cpp	/^int QCPAxis::tickLabelPadding() const$/;"	f	class:QCPAxis
tickLabelPadding	qcustomplot.h	/^  int tickLabelPadding; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
tickLabelRotation	qcustomplot.cpp	/^double QCPAxis::tickLabelRotation() const$/;"	f	class:QCPAxis
tickLabelRotation	qcustomplot.h	/^  double tickLabelRotation; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
tickLabelSide	qcustomplot.cpp	/^QCPAxis::LabelSide QCPAxis::tickLabelSide() const$/;"	f	class:QCPAxis
tickLabelSide	qcustomplot.h	/^  QCPAxis::LabelSide tickLabelSide; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
tickLabels	qcustomplot.h	/^  QVector<QString> tickLabels;$/;"	m	class:QCPAxisPainterPrivate
tickLabels	qcustomplot.h	/^  bool tickLabels() const { return mTickLabels; }$/;"	f	class:QCPAxis
tickLabelsSelectionBox	qcustomplot.h	/^  QRect tickLabelsSelectionBox() const { return mTickLabelsSelectionBox; }$/;"	f	class:QCPAxisPainterPrivate
tickLengthIn	qcustomplot.cpp	/^int QCPAxis::tickLengthIn() const$/;"	f	class:QCPAxis
tickLengthIn	qcustomplot.h	/^  int tickLengthIn, tickLengthOut, subTickLengthIn, subTickLengthOut; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
tickLengthOut	qcustomplot.cpp	/^int QCPAxis::tickLengthOut() const$/;"	f	class:QCPAxis
tickLengthOut	qcustomplot.h	/^  int tickLengthIn, tickLengthOut, subTickLengthIn, subTickLengthOut; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
tickOrigin	qcustomplot.h	/^  double tickOrigin() const { return mTickOrigin; }$/;"	f	class:QCPAxisTicker
tickPen	qcustomplot.h	/^  QPen tickPen() const { return mTickPen; }$/;"	f	class:QCPAxis
tickPen	qcustomplot.h	/^  QPen tickPen, subTickPen;$/;"	m	class:QCPAxisPainterPrivate
tickPositions	qcustomplot.h	/^  QVector<double> tickPositions;$/;"	m	class:QCPAxisPainterPrivate
tickStep	qcustomplot.h	/^  double tickStep() const { return mTickStep; }$/;"	f	class:QCPAxisTickerFixed
tickStepStrategy	qcustomplot.h	/^  TickStepStrategy tickStepStrategy() const { return mTickStepStrategy; }$/;"	f	class:QCPAxisTicker
tickVector	qcustomplot.h	/^  QVector<double> tickVector() const { return mTickVector; }$/;"	f	class:QCPAxis
tickVectorLabels	qcustomplot.h	/^  QVector<QString> tickVectorLabels() const { return mTickVectorLabels; }$/;"	f	class:QCPAxis
ticker	qcustomplot.h	/^  QSharedPointer<QCPAxisTicker> ticker() const { return mTicker; }$/;"	f	class:QCPAxis
ticks	qcustomplot.h	/^  QMap<double, QString> &ticks() { return mTicks; }$/;"	f	class:QCPAxisTickerText
ticks	qcustomplot.h	/^  bool ticks() const { return mTicks; }$/;"	f	class:QCPAxis
tightBoundary	qcustomplot.h	/^  bool tightBoundary() const { return mTightBoundary; }$/;"	f	class:QCPColorMap
timeFormat	qcustomplot.h	/^  QString timeFormat() const { return mTimeFormat; }$/;"	f	class:QCPAxisTickerTime
timeSeriesToOhlc	qcustomplot.cpp	/^QCPFinancialDataContainer QCPFinancial::timeSeriesToOhlc(const QVector<double> &time, const QVector<double> &value, double timeBinSize, double timeBinOffset)$/;"	f	class:QCPFinancial
toPainter	qcustomplot.cpp	/^void QCustomPlot::toPainter(QCPPainter *painter, int width, int height)$/;"	f	class:QCustomPlot
toPixmap	qcustomplot.cpp	/^QPixmap QCustomPlot::toPixmap(int width, int height, double scale)$/;"	f	class:QCustomPlot
toPoint	qcustomplot.h	/^  QPoint toPoint() const { return QPoint(mX, mY); }$/;"	f	class:QCPVector2D
toPointF	qcustomplot.h	/^  QPointF toPointF() const { return QPointF(mX, mY); }$/;"	f	class:QCPVector2D
toQCPItemPosition	qcustomplot.h	/^  virtual QCPItemPosition *toQCPItemPosition() { return 0; }$/;"	f	class:QCPItemAnchor
top	qcustomplot.h	/^  QCPItemAnchor * const top;$/;"	m	class:QCPItemEllipse
top	qcustomplot.h	/^  QCPItemAnchor * const top;$/;"	m	class:QCPItemPixmap
top	qcustomplot.h	/^  QCPItemAnchor * const top;$/;"	m	class:QCPItemRect
top	qcustomplot.h	/^  QCPItemAnchor * const top;$/;"	m	class:QCPItemText
top	qcustomplot.h	/^  int top() const { return mRect.top(); }$/;"	f	class:QCPAxisRect
topLeft	qcustomplot.h	/^  QCPItemAnchor * const topLeft;$/;"	m	class:QCPItemText
topLeft	qcustomplot.h	/^  QCPItemPosition * const topLeft;$/;"	m	class:QCPItemEllipse
topLeft	qcustomplot.h	/^  QCPItemPosition * const topLeft;$/;"	m	class:QCPItemPixmap
topLeft	qcustomplot.h	/^  QCPItemPosition * const topLeft;$/;"	m	class:QCPItemRect
topLeft	qcustomplot.h	/^  QPoint topLeft() const { return mRect.topLeft(); }$/;"	f	class:QCPAxisRect
topLeftRim	qcustomplot.h	/^  QCPItemAnchor * const topLeftRim;$/;"	m	class:QCPItemEllipse
topRight	qcustomplot.h	/^  QCPItemAnchor * const topRight;$/;"	m	class:QCPItemPixmap
topRight	qcustomplot.h	/^  QCPItemAnchor * const topRight;$/;"	m	class:QCPItemRect
topRight	qcustomplot.h	/^  QCPItemAnchor * const topRight;$/;"	m	class:QCPItemText
topRight	qcustomplot.h	/^  QPoint topRight() const { return mRect.topRight(); }$/;"	f	class:QCPAxisRect
topRightRim	qcustomplot.h	/^  QCPItemAnchor * const topRightRim;$/;"	m	class:QCPItemEllipse
totalBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData
transformationMode	qcustomplot.h	/^  Qt::TransformationMode transformationMode() const { return mTransformationMode; }$/;"	f	class:QCPItemPixmap
trimTicks	qcustomplot.cpp	/^void QCPAxisTicker::trimTicks(const QCPRange &range, QVector<double> &ticks, bool keepOneOutlier) const$/;"	f	class:QCPAxisTicker
tsCircle	qcustomplot.h	/^                     ,tsCircle     \/\/\/< A circle$/;"	e	enum:QCPItemTracer::TracerStyle
tsCrosshair	qcustomplot.h	/^                     ,tsCrosshair  \/\/\/< A plus shaped crosshair which spans the complete axis rect$/;"	e	enum:QCPItemTracer::TracerStyle
tsNone	qcustomplot.h	/^  enum TracerStyle { tsNone        \/\/\/< The tracer is not visible$/;"	e	enum:QCPItemTracer::TracerStyle
tsPlus	qcustomplot.h	/^                     ,tsPlus       \/\/\/< A plus shaped crosshair with limited size$/;"	e	enum:QCPItemTracer::TracerStyle
tsSquare	qcustomplot.h	/^                     ,tsSquare     \/\/\/< A square$/;"	e	enum:QCPItemTracer::TracerStyle
tssMeetTickCount	qcustomplot.h	/^    ,tssMeetTickCount \/\/\/< Less readable tick steps are allowed which in turn facilitates getting closer to the requested tick count$/;"	e	enum:QCPAxisTicker::TickStepStrategy
tssReadability	qcustomplot.h	/^    tssReadability    \/\/\/< A nicely readable tick step is prioritized over matching the requested number of ticks (see \\ref setTickCount)$/;"	e	enum:QCPAxisTicker::TickStepStrategy
tuDays	qcustomplot.h	/^                  ,tuDays        \/\/\/< Days (%%d in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
tuHours	qcustomplot.h	/^                  ,tuHours       \/\/\/< Hours (%%h in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
tuMilliseconds	qcustomplot.h	/^  enum TimeUnit { tuMilliseconds \/\/\/< Milliseconds, one thousandth of a second (%%z in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
tuMinutes	qcustomplot.h	/^                  ,tuMinutes     \/\/\/< Minutes (%%m in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
tuSeconds	qcustomplot.h	/^                  ,tuSeconds     \/\/\/< Seconds (%%s in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
twoColored	qcustomplot.h	/^  bool twoColored() const { return mTwoColored; }$/;"	f	class:QCPFinancial
type	qcustomplot.h	/^  PositionType type() const { return typeX(); }$/;"	f	class:QCPItemPosition
type	qcustomplot.h	/^  QCPAxis::AxisType type() const { return mType; }$/;"	f	class:QCPColorScale
type	qcustomplot.h	/^  QCPAxis::AxisType type;$/;"	m	class:QCPAxisPainterPrivate
typeX	qcustomplot.h	/^  PositionType typeX() const { return mPositionTypeX; }$/;"	f	class:QCPItemPosition
typeY	qcustomplot.h	/^  PositionType typeY() const { return mPositionTypeY; }$/;"	f	class:QCPItemPosition
ui	mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow
undefinePen	qcustomplot.cpp	/^void QCPScatterStyle::undefinePen()$/;"	f	class:QCPScatterStyle
unicodeFraction	qcustomplot.cpp	/^QString QCPAxisTickerPi::unicodeFraction(int numerator, int denominator) const$/;"	f	class:QCPAxisTickerPi
unicodeSubscript	qcustomplot.cpp	/^QString QCPAxisTickerPi::unicodeSubscript(int number) const$/;"	f	class:QCPAxisTickerPi
unicodeSuperscript	qcustomplot.cpp	/^QString QCPAxisTickerPi::unicodeSuperscript(int number) const$/;"	f	class:QCPAxisTickerPi
unregisterBars	qcustomplot.cpp	/^void QCPBarsGroup::unregisterBars(QCPBars *bars)$/;"	f	class:QCPBarsGroup
upLayout	qcustomplot.h	/^                     ,upLayout     \/\/\/< Final phase in which the layout system places the rects of the elements$/;"	e	enum:QCPLayoutElement::UpdatePhase
upMargins	qcustomplot.h	/^                     ,upMargins    \/\/\/< Phase in which the margins are calculated and set$/;"	e	enum:QCPLayoutElement::UpdatePhase
upPreparation	qcustomplot.h	/^  enum UpdatePhase { upPreparation \/\/\/< Phase used for any type of preparation that needs to be done before margin calculation and layout$/;"	e	enum:QCPLayoutElement::UpdatePhase
update	qcustomplot.cpp	/^void QCPAxisRect::update(UpdatePhase phase)$/;"	f	class:QCPAxisRect
update	qcustomplot.cpp	/^void QCPColorScale::update(UpdatePhase phase)$/;"	f	class:QCPColorScale
update	qcustomplot.cpp	/^void QCPLayout::update(UpdatePhase phase)$/;"	f	class:QCPLayout
update	qcustomplot.cpp	/^void QCPLayoutElement::update(UpdatePhase phase)$/;"	f	class:QCPLayoutElement
updateAxesOffset	qcustomplot.cpp	/^void QCPAxisRect::updateAxesOffset(QCPAxis::AxisType type)$/;"	f	class:QCPAxisRect
updateColorBuffer	qcustomplot.cpp	/^void QCPColorGradient::updateColorBuffer()$/;"	f	class:QCPColorGradient
updateGradientImage	qcustomplot.cpp	/^void QCPColorScaleAxisRectPrivate::updateGradientImage()$/;"	f	class:QCPColorScaleAxisRectPrivate
updateLayerIndices	qcustomplot.cpp	/^void QCustomPlot::updateLayerIndices() const$/;"	f	class:QCustomPlot
updateLayout	qcustomplot.cpp	/^void QCPLayout::updateLayout()$/;"	f	class:QCPLayout
updateLayout	qcustomplot.cpp	/^void QCPLayoutGrid::updateLayout()$/;"	f	class:QCPLayoutGrid
updateLayout	qcustomplot.cpp	/^void QCPLayoutInset::updateLayout()$/;"	f	class:QCPLayoutInset
updateLayout	qcustomplot.cpp	/^void QCustomPlot::updateLayout()$/;"	f	class:QCustomPlot
updateLegendIcon	qcustomplot.cpp	/^void QCPColorMap::updateLegendIcon(Qt::TransformationMode transformMode, const QSize &thumbSize)$/;"	f	class:QCPColorMap
updateMapImage	qcustomplot.cpp	/^void QCPColorMap::updateMapImage()$/;"	f	class:QCPColorMap
updatePosition	qcustomplot.cpp	/^void QCPItemTracer::updatePosition()$/;"	f	class:QCPItemTracer
updateScaledPixmap	qcustomplot.cpp	/^void QCPItemPixmap::updateScaledPixmap(QRect finalRect, bool flipHorz, bool flipVert)$/;"	f	class:QCPItemPixmap
update_linear_t	mainwindow.cpp	/^void MainWindow::update_linear_t(){$/;"	f	class:MainWindow
upper	qcustomplot.h	/^  double lower, upper;$/;"	m	class:QCPRange
upperEnding	qcustomplot.cpp	/^QCPLineEnding QCPAxis::upperEnding() const$/;"	f	class:QCPAxis
upperEnding	qcustomplot.h	/^  QCPLineEnding lowerEnding, upperEnding; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate
upperQuartile	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData
usedScatterProperties	qcustomplot.h	/^  QCPScatterStyle::ScatterProperties usedScatterProperties() const { return mUsedScatterProperties; }$/;"	f	class:QCPSelectionDecorator
validRange	qcustomplot.cpp	/^bool QCPRange::validRange(const QCPRange &range)$/;"	f	class:QCPRange
validRange	qcustomplot.cpp	/^bool QCPRange::validRange(double lower, double upper)$/;"	f	class:QCPRange
value	qcustomplot.h	/^  double key, value;$/;"	m	class:QCPBarsData
value	qcustomplot.h	/^  double key, value;$/;"	m	class:QCPGraphData
value	qcustomplot.h	/^  double t, key, value;$/;"	m	class:QCPCurveData
value	qcustomplot.h	/^  double value() const { return mValue; }$/;"	f	class:QCPItemPosition
valueAxis	qcustomplot.h	/^  QCPAxis *valueAxis() const { return mValueAxis.data(); }$/;"	f	class:QCPAbstractPlottable
valueAxis	qcustomplot.h	/^  QCPAxis *valueAxis() const { return mValueAxis.data(); }$/;"	f	class:QCPItemPosition
valueRange	qcustomplot.h	/^  QCPRange valueRange() const { return mValueRange; }$/;"	f	class:QCPColorMapData
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const { return QCPRange(low, high); } \/\/ open and close must lie between low and high, so we don't need to check them$/;"	f	class:QCPFinancialData
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const { return QCPRange(value, value); } \/\/ note that bar base value isn't held in each QCPBarsData and thus can't\/shouldn't be returned here$/;"	f	class:QCPBarsData
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const { return QCPRange(value, value); }$/;"	f	class:QCPCurveData
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const { return QCPRange(value, value); }$/;"	f	class:QCPGraphData
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const$/;"	f	class:QCPStatisticalBoxData
valueRange	qcustomplot.h	/^QCPRange QCPDataContainer<DataType>::valueRange(bool &foundRange, QCP::SignDomain signDomain, const QCPRange &inKeyRange)$/;"	f	class:QCPDataContainer
valueSize	qcustomplot.h	/^  int valueSize() const { return mValueSize; }$/;"	f	class:QCPColorMapData
viewport	qcustomplot.h	/^  QRect viewport() const { return mViewport; }$/;"	f	class:QCustomPlot
viewportRect	qcustomplot.h	/^  QRect axisRect, viewportRect;$/;"	m	class:QCPAxisPainterPrivate
visible	qcustomplot.h	/^  bool visible() const { return mVisible; }$/;"	f	class:QCPLayer
visible	qcustomplot.h	/^  bool visible() const { return mVisible; }$/;"	f	class:QCPLayerable
wheelEvent	qcustomplot.cpp	/^void QCPAxis::wheelEvent(QWheelEvent *event)$/;"	f	class:QCPAxis
wheelEvent	qcustomplot.cpp	/^void QCPAxisRect::wheelEvent(QWheelEvent *event)$/;"	f	class:QCPAxisRect
wheelEvent	qcustomplot.cpp	/^void QCPColorScale::wheelEvent(QWheelEvent *event)$/;"	f	class:QCPColorScale
wheelEvent	qcustomplot.cpp	/^void QCPLayerable::wheelEvent(QWheelEvent *event)$/;"	f	class:QCPLayerable
wheelEvent	qcustomplot.cpp	/^void QCustomPlot::wheelEvent(QWheelEvent *event)$/;"	f	class:QCustomPlot
whiskerAntialiased	qcustomplot.h	/^  bool whiskerAntialiased() const { return mWhiskerAntialiased; }$/;"	f	class:QCPStatisticalBox
whiskerBarPen	qcustomplot.h	/^  QPen whiskerBarPen() const { return mWhiskerBarPen; }$/;"	f	class:QCPStatisticalBox
whiskerPen	qcustomplot.h	/^  QPen whiskerPen() const { return mWhiskerPen; }$/;"	f	class:QCPStatisticalBox
whiskerWidth	qcustomplot.h	/^  double whiskerWidth() const { return mWhiskerWidth; }$/;"	f	class:QCPErrorBars
whiskerWidth	qcustomplot.h	/^  double whiskerWidth() const { return mWhiskerWidth; }$/;"	f	class:QCPStatisticalBox
width	qcustomplot.h	/^  double width() const { return mWidth; }$/;"	f	class:QCPBars
width	qcustomplot.h	/^  double width() const { return mWidth; }$/;"	f	class:QCPFinancial
width	qcustomplot.h	/^  double width() const { return mWidth; }$/;"	f	class:QCPLineEnding
width	qcustomplot.h	/^  double width() const { return mWidth; }$/;"	f	class:QCPStatisticalBox
width	qcustomplot.h	/^  int width() const { return mRect.width(); }$/;"	f	class:QCPAxisRect
widthType	qcustomplot.h	/^  WidthType widthType() const { return mWidthType; }$/;"	f	class:QCPBars
widthType	qcustomplot.h	/^  WidthType widthType() const { return mWidthType; }$/;"	f	class:QCPFinancial
wrap	qcustomplot.h	/^  int wrap() const { return mWrap; }$/;"	f	class:QCPLayoutGrid
wtAbsolute	qcustomplot.h	/^  enum WidthType { wtAbsolute       \/\/\/< Bar width is in absolute pixels$/;"	e	enum:QCPBars::WidthType
wtAbsolute	qcustomplot.h	/^  enum WidthType { wtAbsolute       \/\/\/< width is in absolute pixels$/;"	e	enum:QCPFinancial::WidthType
wtAxisRectRatio	qcustomplot.h	/^                   ,wtAxisRectRatio \/\/\/< Bar width is given by a fraction of the axis rect size$/;"	e	enum:QCPBars::WidthType
wtAxisRectRatio	qcustomplot.h	/^                   ,wtAxisRectRatio \/\/\/< width is given by a fraction of the axis rect size$/;"	e	enum:QCPFinancial::WidthType
wtPlotCoords	qcustomplot.h	/^                   ,wtPlotCoords    \/\/\/< Bar width is in key coordinates and thus scales with the key axis range$/;"	e	enum:QCPBars::WidthType
wtPlotCoords	qcustomplot.h	/^                   ,wtPlotCoords    \/\/\/< width is in key coordinates and thus scales with the key axis range$/;"	e	enum:QCPFinancial::WidthType
x	qcustomplot.h	/^  double x() const { return mX; }$/;"	f	class:QCPVector2D
xAxis	qcustomplot.h	/^  QCPAxis *xAxis, *yAxis, *xAxis2, *yAxis2;$/;"	m	class:QCustomPlot
xAxis2	qcustomplot.h	/^  QCPAxis *xAxis, *yAxis, *xAxis2, *yAxis2;$/;"	m	class:QCustomPlot
y	qcustomplot.h	/^  double y() const { return mY; }$/;"	f	class:QCPVector2D
yAxis	qcustomplot.h	/^  QCPAxis *xAxis, *yAxis, *xAxis2, *yAxis2;$/;"	m	class:QCustomPlot
yAxis2	qcustomplot.h	/^  QCPAxis *xAxis, *yAxis, *xAxis2, *yAxis2;$/;"	m	class:QCustomPlot
zeroLinePen	qcustomplot.h	/^  QPen zeroLinePen() const { return mZeroLinePen; }$/;"	f	class:QCPGrid
zoom	qcustomplot.cpp	/^void QCPAxisRect::zoom(const QRectF &pixelRect)$/;"	f	class:QCPAxisRect
zoom	qcustomplot.cpp	/^void QCPAxisRect::zoom(const QRectF &pixelRect, const QList<QCPAxis*> &affectedAxes)$/;"	f	class:QCPAxisRect
~MainWindow	mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~QCPAbstractItem	qcustomplot.cpp	/^QCPAbstractItem::~QCPAbstractItem()$/;"	f	class:QCPAbstractItem
~QCPAbstractPaintBuffer	qcustomplot.cpp	/^QCPAbstractPaintBuffer::~QCPAbstractPaintBuffer()$/;"	f	class:QCPAbstractPaintBuffer
~QCPAbstractPlottable	qcustomplot.cpp	/^QCPAbstractPlottable::~QCPAbstractPlottable()$/;"	f	class:QCPAbstractPlottable
~QCPAbstractPlottable1D	qcustomplot.h	/^QCPAbstractPlottable1D<DataType>::~QCPAbstractPlottable1D()$/;"	f	class:QCPAbstractPlottable1D
~QCPAxis	qcustomplot.cpp	/^QCPAxis::~QCPAxis()$/;"	f	class:QCPAxis
~QCPAxisPainterPrivate	qcustomplot.cpp	/^QCPAxisPainterPrivate::~QCPAxisPainterPrivate()$/;"	f	class:QCPAxisPainterPrivate
~QCPAxisRect	qcustomplot.cpp	/^QCPAxisRect::~QCPAxisRect()$/;"	f	class:QCPAxisRect
~QCPAxisTicker	qcustomplot.cpp	/^QCPAxisTicker::~QCPAxisTicker()$/;"	f	class:QCPAxisTicker
~QCPBars	qcustomplot.cpp	/^QCPBars::~QCPBars()$/;"	f	class:QCPBars
~QCPBarsGroup	qcustomplot.cpp	/^QCPBarsGroup::~QCPBarsGroup()$/;"	f	class:QCPBarsGroup
~QCPColorMap	qcustomplot.cpp	/^QCPColorMap::~QCPColorMap()$/;"	f	class:QCPColorMap
~QCPColorMapData	qcustomplot.cpp	/^QCPColorMapData::~QCPColorMapData()$/;"	f	class:QCPColorMapData
~QCPColorScale	qcustomplot.cpp	/^QCPColorScale::~QCPColorScale()$/;"	f	class:QCPColorScale
~QCPCurve	qcustomplot.cpp	/^QCPCurve::~QCPCurve()$/;"	f	class:QCPCurve
~QCPErrorBars	qcustomplot.cpp	/^QCPErrorBars::~QCPErrorBars()$/;"	f	class:QCPErrorBars
~QCPFinancial	qcustomplot.cpp	/^QCPFinancial::~QCPFinancial()$/;"	f	class:QCPFinancial
~QCPGraph	qcustomplot.cpp	/^QCPGraph::~QCPGraph()$/;"	f	class:QCPGraph
~QCPItemAnchor	qcustomplot.cpp	/^QCPItemAnchor::~QCPItemAnchor()$/;"	f	class:QCPItemAnchor
~QCPItemBracket	qcustomplot.cpp	/^QCPItemBracket::~QCPItemBracket()$/;"	f	class:QCPItemBracket
~QCPItemCurve	qcustomplot.cpp	/^QCPItemCurve::~QCPItemCurve()$/;"	f	class:QCPItemCurve
~QCPItemEllipse	qcustomplot.cpp	/^QCPItemEllipse::~QCPItemEllipse()$/;"	f	class:QCPItemEllipse
~QCPItemLine	qcustomplot.cpp	/^QCPItemLine::~QCPItemLine()$/;"	f	class:QCPItemLine
~QCPItemPixmap	qcustomplot.cpp	/^QCPItemPixmap::~QCPItemPixmap()$/;"	f	class:QCPItemPixmap
~QCPItemPosition	qcustomplot.cpp	/^QCPItemPosition::~QCPItemPosition()$/;"	f	class:QCPItemPosition
~QCPItemRect	qcustomplot.cpp	/^QCPItemRect::~QCPItemRect()$/;"	f	class:QCPItemRect
~QCPItemStraightLine	qcustomplot.cpp	/^QCPItemStraightLine::~QCPItemStraightLine()$/;"	f	class:QCPItemStraightLine
~QCPItemText	qcustomplot.cpp	/^QCPItemText::~QCPItemText()$/;"	f	class:QCPItemText
~QCPItemTracer	qcustomplot.cpp	/^QCPItemTracer::~QCPItemTracer()$/;"	f	class:QCPItemTracer
~QCPLayer	qcustomplot.cpp	/^QCPLayer::~QCPLayer()$/;"	f	class:QCPLayer
~QCPLayerable	qcustomplot.cpp	/^QCPLayerable::~QCPLayerable()$/;"	f	class:QCPLayerable
~QCPLayoutElement	qcustomplot.cpp	/^QCPLayoutElement::~QCPLayoutElement()$/;"	f	class:QCPLayoutElement
~QCPLayoutGrid	qcustomplot.cpp	/^QCPLayoutGrid::~QCPLayoutGrid()$/;"	f	class:QCPLayoutGrid
~QCPLayoutInset	qcustomplot.cpp	/^QCPLayoutInset::~QCPLayoutInset()$/;"	f	class:QCPLayoutInset
~QCPLegend	qcustomplot.cpp	/^QCPLegend::~QCPLegend()$/;"	f	class:QCPLegend
~QCPMarginGroup	qcustomplot.cpp	/^QCPMarginGroup::~QCPMarginGroup()$/;"	f	class:QCPMarginGroup
~QCPPaintBufferGlFbo	qcustomplot.cpp	/^QCPPaintBufferGlFbo::~QCPPaintBufferGlFbo()$/;"	f	class:QCPPaintBufferGlFbo
~QCPPaintBufferGlPbuffer	qcustomplot.cpp	/^QCPPaintBufferGlPbuffer::~QCPPaintBufferGlPbuffer()$/;"	f	class:QCPPaintBufferGlPbuffer
~QCPPaintBufferPixmap	qcustomplot.cpp	/^QCPPaintBufferPixmap::~QCPPaintBufferPixmap()$/;"	f	class:QCPPaintBufferPixmap
~QCPPlottableInterface1D	qcustomplot.h	/^  virtual ~QCPPlottableInterface1D() {}$/;"	f	class:QCPPlottableInterface1D
~QCPSelectionDecorator	qcustomplot.cpp	/^QCPSelectionDecorator::~QCPSelectionDecorator()$/;"	f	class:QCPSelectionDecorator
~QCPSelectionDecoratorBracket	qcustomplot.cpp	/^QCPSelectionDecoratorBracket::~QCPSelectionDecoratorBracket()$/;"	f	class:QCPSelectionDecoratorBracket
~QCPSelectionRect	qcustomplot.cpp	/^QCPSelectionRect::~QCPSelectionRect()$/;"	f	class:QCPSelectionRect
~QCustomPlot	qcustomplot.cpp	/^QCustomPlot::~QCustomPlot()$/;"	f	class:QCustomPlot
